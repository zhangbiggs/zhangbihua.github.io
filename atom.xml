<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>biggs blog</title>
  <subtitle>javascript | Front-End developer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhangbihua.github.io/"/>
  <updated>2017-07-09T07:09:00.587Z</updated>
  <id>https://zhangbihua.github.io/</id>
  
  <author>
    <name>zhangbihua</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Destructuring_assignment</title>
    <link href="https://zhangbihua.github.io/2017/07/09/DestructuringAssignment/"/>
    <id>https://zhangbihua.github.io/2017/07/09/DestructuringAssignment/</id>
    <published>2017-07-09T05:08:27.000Z</published>
    <updated>2017-07-09T07:09:00.587Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="external">解构赋值</a></h2><blockquote>
<p>解构赋值 语法是一个Javascript表达式，这使得可以将值从数组或属性从对象提取到不同的变量中。</p>
</blockquote>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li><p>交换变量</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="number">3</span>;</div><div class="line"></div><div class="line">[a, b] = [b, a];</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 3</span></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 1</span></div></pre></td></tr></table></figure>
</li>
<li><p>解构数组</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">let</span> a, b, rest;</div><div class="line"></div><div class="line"><span class="comment">/* array 解构赋值 */</span></div><div class="line">[a, b] = [<span class="number">1</span>, <span class="number">2</span>];</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></div><div class="line"></div><div class="line">[a, b, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(rest); <span class="comment">// [3, 4, 5]</span></div><div class="line"></div><div class="line"><span class="comment">/* object 解构赋值 */</span></div><div class="line">(&#123;a, b&#125; = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;);</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></div></pre></td></tr></table></figure>
</li>
<li><p>解构对象</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> o = &#123;<span class="attr">p</span>: <span class="number">42</span>, <span class="attr">q</span>: <span class="literal">true</span>&#125;;</div><div class="line"><span class="keyword">var</span> &#123;p, q&#125; = o;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(p); <span class="comment">// 42</span></div><div class="line"><span class="built_in">console</span>.log(q); <span class="comment">// true </span></div><div class="line"></div><div class="line"><span class="comment">// 用新变量名赋值</span></div><div class="line"><span class="keyword">var</span> &#123;<span class="attr">p</span>: foo, <span class="attr">q</span>: bar&#125; = o;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// 42</span></div><div class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// true</span></div></pre></td></tr></table></figure>
</li>
<li><p>解析一个从函数返回的数组(函数现在可以返回多个值了)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a, b; </div><div class="line">[a, b] = f(); </div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></div></pre></td></tr></table></figure>
</li>
<li><p>忽略某些返回值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> [a, , b] = f();</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 3</span></div></pre></td></tr></table></figure>
</li>
<li><p>将剩余数组赋值给一个变量</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> [a, ...b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// [2, 3]</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>用正则表达式匹配提取值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> url = <span class="string">"https://developer.mozilla.org/en-US/Web/JavaScript"</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> parsedURL = <span class="regexp">/^(\w+)\:\/\/([^\/]+)\/(.*)$/</span>.exec(url);</div><div class="line"><span class="built_in">console</span>.log(parsedURL); <span class="comment">// ["https://developer.mozilla.org/en-US/Web/JavaScript", "https", "developer.mozilla.org", "en-US/Web/JavaScript"]</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> [, protocol, fullhost, fullpath] = parsedURL;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(protocol); <span class="comment">// "https"</span></div></pre></td></tr></table></figure>
</li>
<li><p>函数参数默认值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawES6Chart</span>(<span class="params">&#123;size = <span class="string">'big'</span>, cords = &#123; x: <span class="number">0</span>, y: <span class="number">0</span> &#125;, radius = <span class="number">25</span>&#125; = &#123;&#125;</span>) </span></div><div class="line">&#123;</div><div class="line">  <span class="built_in">console</span>.log(size, cords, radius);</div><div class="line">  <span class="comment">// do some chart drawing</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">drawES6Chart(&#123;</div><div class="line">  <span class="attr">cords</span>: &#123; <span class="attr">x</span>: <span class="number">18</span>, <span class="attr">y</span>: <span class="number">30</span> &#125;,</div><div class="line">  <span class="attr">radius</span>: <span class="number">30</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>加载模块</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; Loader, main &#125; = <span class="built_in">require</span>(<span class="string">'toolkit/loader'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>解构嵌套对象和数组</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> metadata = &#123;</div><div class="line">    <span class="attr">title</span>: <span class="string">"Scratchpad"</span>,</div><div class="line">    <span class="attr">translations</span>: [</div><div class="line">       &#123;</div><div class="line">        <span class="attr">locale</span>: <span class="string">"de"</span>,</div><div class="line">        <span class="attr">localization_tags</span>: [ ],</div><div class="line">        <span class="attr">last_edit</span>: <span class="string">"2014-04-14T08:43:37"</span>,</div><div class="line">        <span class="attr">url</span>: <span class="string">"/de/docs/Tools/Scratchpad"</span>,</div><div class="line">        <span class="attr">title</span>: <span class="string">"JavaScript-Umgebung"</span></div><div class="line">       &#125;</div><div class="line">    ],</div><div class="line">    <span class="attr">url</span>: <span class="string">"/en-US/docs/Tools/Scratchpad"</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123; <span class="attr">title</span>: englishTitle, <span class="attr">translations</span>: [&#123; <span class="attr">title</span>: localeTitle &#125;] &#125; = metadata;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(englishTitle); <span class="comment">// "Scratchpad"</span></div><div class="line"><span class="built_in">console</span>.log(localeTitle);  <span class="comment">// "JavaScript-Umgebung"</span></div></pre></td></tr></table></figure>
</li>
<li><p>For of 迭代和解构</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> people = [</div><div class="line">  &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">"Mike Smith"</span>,</div><div class="line">    <span class="attr">family</span>: &#123;</div><div class="line">      <span class="attr">mother</span>: <span class="string">"Jane Smith"</span>,</div><div class="line">      <span class="attr">father</span>: <span class="string">"Harry Smith"</span>,</div><div class="line">      <span class="attr">sister</span>: <span class="string">"Samantha Smith"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">age</span>: <span class="number">35</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">"Tom Jones"</span>,</div><div class="line">    <span class="attr">family</span>: &#123;</div><div class="line">      <span class="attr">mother</span>: <span class="string">"Norah Jones"</span>,</div><div class="line">      <span class="attr">father</span>: <span class="string">"Richard Jones"</span>,</div><div class="line">      <span class="attr">brother</span>: <span class="string">"Howard Jones"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">age</span>: <span class="number">25</span></div><div class="line">  &#125;</div><div class="line">];</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> &#123;<span class="attr">name</span>: n, <span class="attr">family</span>: &#123; <span class="attr">father</span>: f &#125; &#125; <span class="keyword">of</span> people) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Name: "</span> + n + <span class="string">", Father: "</span> + f);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// "Name: Mike Smith, Father: Harry Smith"</span></div><div class="line"><span class="comment">// "Name: Tom Jones, Father: Richard Jones"</span></div></pre></td></tr></table></figure>
</li>
<li><p>从作为函数实参的对象中提取数据、</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">userId</span>(<span class="params">&#123;id&#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> id;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">whois</span>(<span class="params">&#123;displayName: displayName, fullName: &#123;firstName: name&#125;&#125;</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(displayName + <span class="string">" is "</span> + name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> user = &#123; </div><div class="line">  <span class="attr">id</span>: <span class="number">42</span>, </div><div class="line">  <span class="attr">displayName</span>: <span class="string">"jdoe"</span>,</div><div class="line">  <span class="attr">fullName</span>: &#123; </div><div class="line">      <span class="attr">firstName</span>: <span class="string">"John"</span>,</div><div class="line">      <span class="attr">lastName</span>: <span class="string">"Doe"</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"userId: "</span> + userId(user)); <span class="comment">// "userId: 42"</span></div><div class="line">whois(user); <span class="comment">// "jdoe is John"</span></div></pre></td></tr></table></figure>
</li>
<li><p>对象属性计算名和解构</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> key = <span class="string">"z"</span>;</div><div class="line"><span class="keyword">let</span> &#123; [key]: foo &#125; = &#123; <span class="attr">z</span>: <span class="string">"bar"</span> &#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// "bar</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;解构赋值&quot;&gt;&lt;a href=&quot;#解构赋值&quot; class=&quot;headerlink&quot; title=&quot;解构赋值&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference
    
    </summary>
    
      <category term="javascript" scheme="https://zhangbihua.github.io/categories/javascript/"/>
    
      <category term="MDN" scheme="https://zhangbihua.github.io/categories/javascript/MDN/"/>
    
    
      <category term="解构赋值" scheme="https://zhangbihua.github.io/tags/%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>js对象属性判断</title>
    <link href="https://zhangbihua.github.io/2017/07/09/instanceTypeofContructor/"/>
    <id>https://zhangbihua.github.io/2017/07/09/instanceTypeofContructor/</id>
    <published>2017-07-09T05:08:27.000Z</published>
    <updated>2017-07-10T16:03:18.429Z</updated>
    
    <content type="html"><![CDATA[<h2 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof" target="_blank" rel="external">instanceof</a></h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><blockquote>
<p>instanceof 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。<br>instanceof 运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链上。</p>
</blockquote>
<h2 id="prototype-是每个-对象-的的属性-prototype-是每个函数的属性"><a href="#prototype-是每个-对象-的的属性-prototype-是每个函数的属性" class="headerlink" title="[[prototype]] 是每个 对象 的的属性 prototype 是每个函数的属性"></a>[[prototype]] 是每个 <strong>对象</strong> 的的属性 prototype 是每个<strong>函数</strong>的属性</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote>
<p>object instanceof constructor</p>
<ul>
<li>instanof 是用来检测一个对象的原型链是否存在参数Oject的原型链上，js中的继承是基于原型链继承，类似的 child.prototype.constructor === parent.protorype返回true<!--- 相对比 child.prototype.constructor === grandparent.protorype返回false--></li>
<li>child instanceof grandparernt返回true<br>prototype里面包含<strong>proto</strong> 和 constructor</li>
</ul>
</blockquote>
<hr>
<h2 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call"></a>Object.prototype.toString.call</h2><blockquote>
<p>Object.prototype 属性表示 Object 的原型对象。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myObj = &#123;&#125;</div><div class="line"><span class="keyword">var</span> myArr = []</div><div class="line"><span class="keyword">var</span> myNumber = <span class="number">1</span></div><div class="line"><span class="keyword">var</span> myStr = <span class="string">'a'</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(myObj) <span class="comment">// ===&gt; '[object Object]' </span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(myArr) <span class="comment">// ===&gt; '[object Array]' </span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(myNumber) <span class="comment">// ===&gt; '[object Number]'</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(myStr) <span class="comment">// ===&gt; '[object String]'</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>) <span class="comment">// ===&gt; '[object undefined]'</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>) <span class="comment">// ===&gt; '[object null]'</span></div><div class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.nimei = <span class="string">'nimie'</span></div><div class="line">  <span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'nimei'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> b ;</div><div class="line">b. </div><div class="line">b.say()</div></pre></td></tr></table></figure>
<h2 id="gt-Object-prototype-constructor-特定的函数，用于创建一个对象的原型。"><a href="#gt-Object-prototype-constructor-特定的函数，用于创建一个对象的原型。" class="headerlink" title="&gt; Object.prototype.constructor 特定的函数，用于创建一个对象的原型。"></a>&gt; Object.prototype.constructor 特定的函数，用于创建一个对象的原型。</h2><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myArr = []</div><div class="line"><span class="keyword">var</span> myNumber = <span class="number">1</span></div><div class="line"><span class="keyword">var</span> myStr = <span class="string">'a'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> myObj)  <span class="comment">// ===&gt; 'object'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> myArr)  <span class="comment">// ===&gt; 'object'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> myNumber)  <span class="comment">// ===&gt; 'number'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> myStr)  <span class="comment">// ===&gt; 'string'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">undefined</span>)  <span class="comment">// ===&gt; 'undefined'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>)  <span class="comment">// ===&gt; 'object'</span></div></pre></td></tr></table></figure>
<p>##<br><strong>so, 相对比typeof ,Object.prototype.toString.call 来判断会对象会更加的准确，在使用typeof Array 和 typeof null 结果与 typeof Ojbect 一样是 ‘object’</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;instanceof&quot;&gt;&lt;a href=&quot;#instanceof&quot; class=&quot;headerlink&quot; title=&quot;instanceof&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Ja
    
    </summary>
    
      <category term="javascript" scheme="https://zhangbihua.github.io/categories/javascript/"/>
    
      <category term="MDN" scheme="https://zhangbihua.github.io/categories/javascript/MDN/"/>
    
    
      <category term="js对象属性判断" scheme="https://zhangbihua.github.io/tags/js%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E5%88%A4%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>中介模式(Mediator)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/Mediator/"/>
    <id>https://zhangbihua.github.io/2017/05/05/Mediator/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-08T08:04:09.419Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<h3 id="中介模式的定义"><a href="#中介模式的定义" class="headerlink" title="中介模式的定义"></a>中介模式的定义</h3><ul>
<li>中介者模式用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</li>
<li>每一个同事对象在需要和其他同事对象通信时，先与中介者通信，通过中介者来间接完成与其他同事类的通信；</li>
<li>在具体同事类中实现了在抽象同事类中定义的方法。</li>
<li>中介者模式又称为调停者模式，它是一种对象行为型模式。<h3 id="中介模式包含二个角色："><a href="#中介模式包含二个角色：" class="headerlink" title="中介模式包含二个角色："></a>中介模式包含二个角色：</h3></li>
<li>Mediator-抽象中介者用于定义一个接口，该接口用于与各同事对象之间的通信；</li>
<li>ConcreteMediator-具体中介者是抽象中介者的子类，通过协调各个同事对象来实现协作行为，了解并维护它的各个同事对象的引用；</li>
<li>Colleague-抽象同事类定义各同事的公有方法；</li>
<li>Colleague-具体同事类是抽象同事类的子类，每一个同事对象都引用一个中介者对象；</li>
</ul>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Mediator Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    colleagueChanged(colleague) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Mediator.colleagueChanged invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title">Mediator</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteMediator Class created'</span>);</div><div class="line">        <span class="keyword">this</span>.colleague1 = <span class="keyword">new</span> ConcreteColleague1(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">this</span>.colleague2 = <span class="keyword">new</span> ConcreteColleague2(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    colleagueChanged(colleague) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteMediator.colleagueChanged invoked'</span>);</div><div class="line">        <span class="keyword">switch</span> (colleague) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="keyword">this</span>.colleague1:</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'ConcreteColleague1 has Changed -&gt; change ConcreteColleague2.feature: '</span>);</div><div class="line">                <span class="keyword">this</span>.colleague2.setFeature(<span class="string">'new feature 2'</span>);</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">case</span> <span class="keyword">this</span>.colleague2:</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'ConcreteColleague2 has Changed, but do nothing'</span>);</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'Do nothing'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Colleague Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    changed() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Colleague.changed invoked'</span>);</div><div class="line">        <span class="keyword">this</span>.mediator.colleagueChanged(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague1</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(mediator) &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteColleague1 Class created'</span>);</div><div class="line">        <span class="keyword">this</span>.mediator = mediator;</div><div class="line">        <span class="keyword">this</span>.feature = <span class="string">"feature 1"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setFeature(feature) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteColleague1.setFeature invoked'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteColleague1 Feature has changed from '</span> + <span class="keyword">this</span>.feature + <span class="string">' to '</span> + feature)</div><div class="line">        <span class="keyword">this</span>.feature = feature;</div><div class="line">        <span class="keyword">this</span>.changed();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague2</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(mediator) &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteColleague2 Class created'</span>);</div><div class="line">        <span class="keyword">this</span>.mediator = mediator;</div><div class="line">        <span class="keyword">this</span>.feature = <span class="string">"feature 2"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setFeature(feature) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteColleague2.setFeature invoked'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteColleague2 Feature has changed from '</span> + <span class="keyword">this</span>.feature + <span class="string">' to '</span> + feature);</div><div class="line">        <span class="keyword">this</span>.feature = feature;</div><div class="line">        <span class="keyword">this</span>.changed();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> mediator = <span class="keyword">new</span> ConcreteMediator();</div><div class="line">mediator.colleague1.setFeature(<span class="string">"new feature 1"</span>);</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> MediatorPattern &#123;</div><div class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> Mediator &#123;</div><div class="line">        send(msg: <span class="built_in">string</span>, colleague: Colleague): <span class="built_in">void</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Colleague &#123;</div><div class="line">        <span class="keyword">public</span> mediator: Mediator;</div><div class="line"></div><div class="line">        <span class="keyword">constructor</span>(<span class="params">mediator: Mediator</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.mediator = mediator;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> send(msg: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Abstract Method!"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> receive(msg: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Abstract Method!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteColleagueA <span class="keyword">extends</span> Colleague &#123;</div><div class="line">        <span class="keyword">constructor</span>(<span class="params">mediator: Mediator</span>) &#123;</div><div class="line">            <span class="keyword">super</span>(mediator);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> send(msg: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="keyword">this</span>.mediator.send(msg, <span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> receive(msg: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(msg, <span class="string">"`receive` of ConcreteColleagueA is being called!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteColleagueB <span class="keyword">extends</span> Colleague &#123;</div><div class="line">        <span class="keyword">constructor</span>(<span class="params">mediator: Mediator</span>) &#123;</div><div class="line">            <span class="keyword">super</span>(mediator);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> send(msg: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="keyword">this</span>.mediator.send(msg, <span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> receive(msg: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(msg, <span class="string">"`receive` of ConcreteColleagueB is being called!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteMediator <span class="keyword">implements</span> Mediator &#123;</div><div class="line">        <span class="keyword">public</span> concreteColleagueA: ConcreteColleagueA;</div><div class="line">        <span class="keyword">public</span> concreteColleagueB: ConcreteColleagueB;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> send(msg: <span class="built_in">string</span>, colleague: Colleague): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.concreteColleagueA === colleague) &#123;</div><div class="line">                <span class="keyword">this</span>.concreteColleagueB.receive(msg);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">this</span>.concreteColleagueA.receive(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></li>
<li><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
      <category term="Behavioral Patterns" scheme="https://zhangbihua.github.io/categories/design-pattern/Behavioral-Patterns/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="中介模式" scheme="https://zhangbihua.github.io/tags/%E4%B8%AD%E4%BB%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>建造者模式(Builder)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/Builder/"/>
    <id>https://zhangbihua.github.io/2017/05/05/Builder/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-08T08:04:09.419Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<h3 id="建造者模式包含如下四个角色："><a href="#建造者模式包含如下四个角色：" class="headerlink" title="建造者模式包含如下四个角色："></a>建造者模式包含如下四个角色：</h3><ul>
<li>Builder-抽象建造者为创建一个产品对象的各个部件指定抽象接口；</li>
<li>ConcreteBuilder-具体建造者实现了抽象建造者接口，实现各个部件的构造和装配方法，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象；</li>
<li>Product-产品角色是被构建的复杂对象，包含多个组成部件；</li>
<li>Director-指挥者负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在关联关系，可以在其construct()建造方法中调用建造者对象的部件构造与装配方法，完成复杂对象的建造</li>
</ul>
<h3 id="建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个："><a href="#建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：" class="headerlink" title="建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个："></a>建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：</h3><ul>
<li>一方面它隔离了客户与生产过程；</li>
<li>另一方面它负责控制产品的生成过程。指挥者针对抽象建造者编程，客户端只需要知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对象。</li>
</ul>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Builder Class created!'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    buildPart(partName) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Builder.buildPart invoked!'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteBuilder Class created!'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    buildPart(partName) &#123;</div><div class="line">        <span class="keyword">super</span>.buildPart(partName);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteBuilder.buildPart invoked!'</span>);</div><div class="line">        <span class="keyword">this</span>.product = <span class="keyword">new</span> Product(partName);</div><div class="line">    &#125;</div><div class="line">    getResult() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteBuilder.getResult invoked!'</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.product;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(material) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Product class created"</span>);</div><div class="line">        <span class="keyword">this</span>.data = material</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">this</span>.structure = [<span class="string">'Prod1'</span>, <span class="string">'Prod2'</span>, <span class="string">'Prod3'</span>];</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Director class created"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    construct() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Director.Construct created"</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> prodName <span class="keyword">in</span> <span class="keyword">this</span>.structure) &#123;</div><div class="line">            <span class="keyword">let</span> builder = <span class="keyword">new</span> ConcreteBuilder();</div><div class="line">            builder.buildPart(<span class="keyword">this</span>.structure[prodName]);</div><div class="line">            builder.getResult();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> director = <span class="keyword">new</span> Director();</div><div class="line">director.construct();</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> BuilderPattern &#123;</div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> UserBuilder &#123;</div><div class="line">        <span class="keyword">private</span> name: <span class="built_in">string</span>;</div><div class="line">        <span class="keyword">private</span> age: <span class="built_in">number</span>;</div><div class="line">        <span class="keyword">private</span> phone: <span class="built_in">string</span>;</div><div class="line">        <span class="keyword">private</span> address: <span class="built_in">string</span>;</div><div class="line"></div><div class="line">        <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">get</span> Name() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">        &#125;</div><div class="line">        setAge(value: <span class="built_in">number</span>): UserBuilder &#123;</div><div class="line">            <span class="keyword">this</span>.age = value;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">get</span> Age() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.age;</div><div class="line">        &#125;</div><div class="line">        setPhone(value: <span class="built_in">string</span>): UserBuilder &#123;</div><div class="line">            <span class="keyword">this</span>.phone = value;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">get</span> Phone() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.phone;</div><div class="line">        &#125;</div><div class="line">        setAddress(value: <span class="built_in">string</span>): UserBuilder &#123;</div><div class="line">            <span class="keyword">this</span>.address = value;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">get</span> Address() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.address;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        build(): User &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> User &#123;</div><div class="line">        <span class="keyword">private</span> name: <span class="built_in">string</span>;</div><div class="line">        <span class="keyword">private</span> age: <span class="built_in">number</span>;</div><div class="line">        <span class="keyword">private</span> phone: <span class="built_in">string</span>;</div><div class="line">        <span class="keyword">private</span> address: <span class="built_in">string</span>;</div><div class="line"></div><div class="line">        <span class="keyword">constructor</span>(<span class="params">builder: UserBuilder</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.name = builder.Name;</div><div class="line">            <span class="keyword">this</span>.age = builder.Age;</div><div class="line">            <span class="keyword">this</span>.phone = builder.Phone;</div><div class="line">            <span class="keyword">this</span>.address = builder.Address</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">get</span> Name() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">get</span> Age() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.age;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">get</span> Phone() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.phone;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">get</span> Address() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.address;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><p><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></p>
</li>
<li><p><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></p>
</li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
      <category term="Creational Patterns" scheme="https://zhangbihua.github.io/categories/design-pattern/Creational-Patterns/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="建造者模式" scheme="https://zhangbihua.github.io/tags/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>命令模式(Command)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/Command/"/>
    <id>https://zhangbihua.github.io/2017/05/05/Command/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-08T08:04:09.419Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<h3 id="命令模式的定义"><a href="#命令模式的定义" class="headerlink" title="命令模式的定义"></a>命令模式的定义</h3><ul>
<li>命令模式：将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；</li>
<li>对请求排队或者记录请求日志，以及支持可撤销的操作。</li>
<li>命令模式是一种对象行为型模式，其别名为动作模式或事务模式。</li>
</ul>
<h3 id="命令模式包含四个角色："><a href="#命令模式包含四个角色：" class="headerlink" title="命令模式包含四个角色："></a>命令模式包含四个角色：</h3><ul>
<li>Command-抽象命令类中声明了用于执行请求等方法，通过这些方法可以调用请求接收者的相关操作；</li>
<li>ConcreteCommand-具体命令类是抽象命令类的子类，实现了在抽象命令类中声明的方法，它对应具体的接收者对象，将接收者对象的动作绑定其中；</li>
<li>Invoker-调用者即请求的发送者，又称为请求者，它通过命令对象来执行请求；</li>
<li>Receiver-接收者执行与请求相关的操作，它具体实现对请求的业务处理。</li>
</ul>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Invoker Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    storeCommand(command) &#123;</div><div class="line">        <span class="keyword">this</span>.command = command;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Invoker.storeCommand invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Command Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    execute() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Command.execute invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(receiver, state) &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.receiver = receiver;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteCommand Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    execute() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteCommand.execute invoked'</span>);</div><div class="line">        <span class="keyword">this</span>.receiver.action();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Receiver Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    action() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Receiver.action invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> invoker = <span class="keyword">new</span> Invoker();</div><div class="line"><span class="keyword">var</span> receiver = <span class="keyword">new</span> Receiver();</div><div class="line"><span class="keyword">var</span> command = <span class="keyword">new</span> ConcreteCommand(receiver);</div><div class="line">invoker.storeCommand(command);</div><div class="line">invoker.command.execute();</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> CommandPattern &#123;</div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Command &#123;</div><div class="line">        <span class="keyword">public</span> execute(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Abstract method!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteCommand1 <span class="keyword">extends</span> Command &#123;</div><div class="line">        <span class="keyword">private</span> receiver: Receiver;</div><div class="line"></div><div class="line">        <span class="keyword">constructor</span>(<span class="params">receiver: Receiver</span>) &#123;</div><div class="line">            <span class="keyword">super</span>();</div><div class="line">            <span class="keyword">this</span>.receiver = receiver;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> execute(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"`execute` method of ConcreteCommand1 is being called!"</span>);</div><div class="line">            <span class="keyword">this</span>.receiver.action();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteCommand2 <span class="keyword">extends</span> Command &#123;</div><div class="line">        <span class="keyword">private</span> receiver: Receiver;</div><div class="line"></div><div class="line">        <span class="keyword">constructor</span>(<span class="params">receiver: Receiver</span>) &#123;</div><div class="line">            <span class="keyword">super</span>();</div><div class="line">            <span class="keyword">this</span>.receiver = receiver;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> execute(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"`execute` method of ConcreteCommand2 is being called!"</span>);</div><div class="line">            <span class="keyword">this</span>.receiver.action();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Invoker &#123;</div><div class="line">        <span class="keyword">private</span> commands: Command[];</div><div class="line"></div><div class="line">        <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</div><div class="line">            <span class="keyword">this</span>.commands = [];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> storeAndExecute(cmd: Command) &#123;</div><div class="line">            <span class="keyword">this</span>.commands.push(cmd);</div><div class="line">            cmd.execute();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Receiver &#123;</div><div class="line">        <span class="keyword">public</span> action(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"action is being called!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> receiver: CommandPattern.Receiver = <span class="keyword">new</span> CommandPattern.Receiver(),</div><div class="line">        command1: CommandPattern.Command  = <span class="keyword">new</span> CommandPattern.ConcreteCommand1(receiver),</div><div class="line">        command2: CommandPattern.Command  = <span class="keyword">new</span> CommandPattern.ConcreteCommand2(receiver),</div><div class="line">        invoker : CommandPattern.Invoker  = <span class="keyword">new</span> CommandPattern.Invoker();</div><div class="line"></div><div class="line">    invoker.storeAndExecute(command1);</div><div class="line">    invoker.storeAndExecute(command2);</div><div class="line"></div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></li>
<li><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
      <category term="Behavioral Patterns" scheme="https://zhangbihua.github.io/categories/design-pattern/Behavioral-Patterns/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="命令模式" scheme="https://zhangbihua.github.io/tags/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>组合模式(Composite)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/Composite/"/>
    <id>https://zhangbihua.github.io/2017/05/05/Composite/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-08T08:04:09.419Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Component Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operation() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Component.operation invoked'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    add(Component) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Component.add invoked'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    remove(Component) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Component.remove invoked'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    getChild(key) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Component.getChild invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name) &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Leaf Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operation() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Leaf.operation invoked'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name) &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.children = [];</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Composite Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operation() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Composite operation for: '</span> + <span class="keyword">this</span>.name)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> <span class="keyword">this</span>.children) &#123;</div><div class="line">            <span class="keyword">this</span>.children[i].operation();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    add(Component) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Composite.add invoked'</span>);</div><div class="line">        <span class="keyword">this</span>.children.push(Component);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    remove(Component) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Composite.remove invoked'</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> <span class="keyword">this</span>.children) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.children[i] === Component) &#123;</div><div class="line">                <span class="keyword">this</span>.children.splice(i, <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    getChild(key) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Composite.getChild invoked'</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.children[key];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> composite1 = <span class="keyword">new</span> Composite(<span class="string">'C1'</span>);</div><div class="line">composite1.add(<span class="keyword">new</span> Leaf(<span class="string">'L1'</span>));</div><div class="line">composite1.add(<span class="keyword">new</span> Leaf(<span class="string">'L2'</span>));</div><div class="line"><span class="keyword">var</span> composite2 = <span class="keyword">new</span> Composite(<span class="string">'C2'</span>);</div><div class="line">composite2.add(composite1);</div><div class="line">composite1.getChild(<span class="number">1</span>).operation();</div><div class="line">composite2.operation();</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> CompositePattern &#123;</div><div class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> Component &#123;</div><div class="line">        operation(): <span class="built_in">void</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Composite <span class="keyword">implements</span> Component &#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> list: Component[];</div><div class="line">        <span class="keyword">private</span> s: <span class="built_in">String</span>;</div><div class="line"></div><div class="line">        <span class="keyword">constructor</span>(<span class="params">s: <span class="built_in">String</span></span>) &#123;</div><div class="line">            <span class="keyword">this</span>.list = [];</div><div class="line">            <span class="keyword">this</span>.s = s;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> operation(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"`operation of `"</span>, <span class="keyword">this</span>.s)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.list.length; i += <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">this</span>.list[i].operation();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> add(c: Component): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="keyword">this</span>.list.push(c);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> remove(i: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.list.length &lt;= i) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"index out of bound!"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">this</span>.list.splice(i, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Leaf <span class="keyword">implements</span> Component &#123;</div><div class="line">        <span class="keyword">private</span> s: <span class="built_in">String</span>;</div><div class="line">        <span class="keyword">constructor</span>(<span class="params">s: <span class="built_in">String</span></span>) &#123;</div><div class="line">            <span class="keyword">this</span>.s = s;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">public</span> operation(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"`operation` of Leaf"</span>, <span class="keyword">this</span>.s, <span class="string">" is called."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></li>
<li><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
      <category term="Structural Patterns" scheme="https://zhangbihua.github.io/categories/design-pattern/Structural-Patterns/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="组合模式" scheme="https://zhangbihua.github.io/tags/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>适配器模式(Adapter)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/Adapter/"/>
    <id>https://zhangbihua.github.io/2017/05/05/Adapter/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-08T08:04:09.419Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<h3 id="适配器模式的定义"><a href="#适配器模式的定义" class="headerlink" title="适配器模式的定义"></a>适配器模式的定义</h3><ul>
<li>适配器模式：用于将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</li>
</ul>
<h3 id="适配器模式包含四个角色："><a href="#适配器模式包含四个角色：" class="headerlink" title="适配器模式包含四个角色："></a>适配器模式包含四个角色：</h3><ul>
<li>Target：目标抽象类-定义客户要用的特定领域的接口</li>
<li>Adapter：适配器类-作为一个转换器，对适配者和抽象目标类进行适配，它是适配器模式的核心</li>
<li>Adaptee：适配者类-定义了一个已经存在的接口，这个接口需要适配</li>
<li>Client：客户类-在客户类中针对目标抽象类（Target）进行编程，调用在目标抽象类中定义的业务方法</li>
</ul>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Target</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(type) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Target Class created!'</span>);</div><div class="line">        <span class="keyword">let</span> result = <span class="literal">undefined</span>;</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (type) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'adapter'</span>:</div><div class="line">                result = <span class="keyword">new</span> AdapterImpl();</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                result = <span class="literal">undefined</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    request() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Target.request invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Adapter Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    specificRequest() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Adapter.specificRequest invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdapterImpl</span> <span class="keyword">extends</span> <span class="title">Adapter</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>()</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'AdapterImpl Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    request() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'AdapterImpl.request invoked'</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.specificRequest();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Target(<span class="string">"adapter"</span>);</div><div class="line">f.request();</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">namespace AdapterPattern &#123;</div><div class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</div><div class="line">        public method(): <span class="keyword">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"`method` of Adaptee is being called"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> interface Target &#123;</div><div class="line">        call(): <span class="keyword">void</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="title">implements</span> <span class="title">Target</span> </span>&#123;</div><div class="line">        public call(): <span class="keyword">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"Adapter's `call` method is being called"</span>);</div><div class="line">            <span class="keyword">var</span> adaptee: Adaptee = <span class="keyword">new</span> Adaptee();</div><div class="line">            adaptee.method();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></li>
<li><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
      <category term="Structural Patterns" scheme="https://zhangbihua.github.io/categories/design-pattern/Structural-Patterns/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="适配器模式" scheme="https://zhangbihua.github.io/tags/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>装饰模式(Decorator)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/Decorator/"/>
    <id>https://zhangbihua.github.io/2017/05/05/Decorator/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-08T08:04:09.419Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<h3 id="装饰模式的定义"><a href="#装饰模式的定义" class="headerlink" title="装饰模式的定义"></a>装饰模式的定义</h3><ul>
<li>装饰模式：装饰模式用于动态地给一个对象增加一些额外的职责，就增加对象功 能来说，装饰模式比生成子类实现更为灵活。它是一种对象结构型模 式。</li>
</ul>
<h3 id="装饰模式包含四个角色："><a href="#装饰模式包含四个角色：" class="headerlink" title="装饰模式包含四个角色："></a>装饰模式包含四个角色：</h3><ul>
<li>Component-抽象构件定义了对象的接口，可以给这些对 象动态增加职责（方法）；</li>
<li>ConcreteComponent-具体构件定义了具体的构件对象，实现了 在抽象构件中声明的方法，装饰器可以给它增加额外的职责（方法）；</li>
<li>Decorator-抽象装饰类是抽象构件类的子类，用于给具体构件增加职责，但是具 体职责在其子类中实现；</li>
<li>ConcreteDecorator-具体装饰类是抽象装饰类的子类，负责向构 件添加新的职责。</li>
</ul>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Component Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operation() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Component.operation invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteComponent Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operation() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteComponent.operation invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(component) &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.component = component;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Decorator Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operation() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Decorator.operation invoked'</span>);</div><div class="line">        <span class="keyword">this</span>.component.operation()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecoratorA</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(component, sign) &#123;</div><div class="line">        <span class="keyword">super</span>(component);</div><div class="line">        <span class="keyword">this</span>.addedState = sign;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteDecoratorA Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operation() &#123;</div><div class="line">        <span class="keyword">super</span>.operation();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteDecoratorA.operation invoked'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.addedState)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecoratorB</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(component, sign) &#123;</div><div class="line">        <span class="keyword">super</span>(component);</div><div class="line">        <span class="keyword">this</span>.addedState = sign;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteDecoratorB Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operation() &#123;</div><div class="line">        <span class="keyword">super</span>.operation();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteDecoratorB.operation invoked'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.addedState + <span class="keyword">this</span>.addedState + <span class="keyword">this</span>.addedState + <span class="keyword">this</span>.addedState + <span class="keyword">this</span>.addedState);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    addedBehavior() &#123;</div><div class="line">        <span class="keyword">this</span>.operation();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteDecoratorB.operation invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> component = <span class="keyword">new</span> ConcreteComponent();</div><div class="line"><span class="keyword">var</span> decoratorA = <span class="keyword">new</span> ConcreteDecoratorA(component, <span class="string">'decoratorA'</span>);</div><div class="line"><span class="keyword">var</span> decoratorB = <span class="keyword">new</span> ConcreteDecoratorB(component, <span class="string">'decoratorB'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'component: '</span>);</div><div class="line">component.operation();</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'decoratorA: '</span>);</div><div class="line">decoratorA.operation();</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'decoratorB: '</span>);</div><div class="line">decoratorB.addedBehavior();</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> DecoratorPattern &#123;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> Component &#123;</div><div class="line">        operation(): <span class="built_in">void</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteComponent <span class="keyword">implements</span> Component &#123;</div><div class="line">        <span class="keyword">private</span> s: <span class="built_in">String</span>;</div><div class="line"></div><div class="line">        <span class="keyword">constructor</span>(<span class="params">s: <span class="built_in">String</span></span>) &#123;</div><div class="line">            <span class="keyword">this</span>.s = s;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> operation(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"`operation` of ConcreteComponent"</span>, <span class="keyword">this</span>.s, <span class="string">" is being called!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Decorator <span class="keyword">implements</span> Component &#123;</div><div class="line">        <span class="keyword">private</span> component: Component;</div><div class="line">        <span class="keyword">private</span> id: <span class="built_in">Number</span>;</div><div class="line"></div><div class="line">        <span class="keyword">constructor</span>(<span class="params">id: <span class="built_in">Number</span>, component: Component</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.id = id;</div><div class="line">            <span class="keyword">this</span>.component = component;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">get</span> Id(): <span class="built_in">Number</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.id;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> operation(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"`operation` of Decorator"</span>, <span class="keyword">this</span>.id, <span class="string">" is being called!"</span>);</div><div class="line">            <span class="keyword">this</span>.component.operation();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteDecorator <span class="keyword">extends</span> Decorator &#123;</div><div class="line">        <span class="keyword">constructor</span>(<span class="params">id: <span class="built_in">Number</span>, component: Component</span>) &#123;</div><div class="line">            <span class="keyword">super</span>(id, component);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> operation(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="keyword">super</span>.operation();</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"`operation` of ConcreteDecorator"</span>, <span class="keyword">this</span>.Id, <span class="string">" is being called!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></li>
<li><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
      <category term="Structural Patterns" scheme="https://zhangbihua.github.io/categories/design-pattern/Structural-Patterns/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="装饰模式" scheme="https://zhangbihua.github.io/tags/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>外观模式(Facade)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/Facade/"/>
    <id>https://zhangbihua.github.io/2017/05/05/Facade/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-08T08:04:09.419Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<h3 id="外观模式的定义"><a href="#外观模式的定义" class="headerlink" title="外观模式的定义"></a>外观模式的定义</h3><ul>
<li>外观模式：在外观模式中，外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，</li>
<li>外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。</li>
</ul>
<h3 id="外观模式包含二个角色："><a href="#外观模式包含二个角色：" class="headerlink" title="外观模式包含二个角色："></a>外观模式包含二个角色：</h3><ul>
<li>Facade-外观角色是在客户端直接调用的角色，在外观角色中可以知道相关的(一个或者多个)子系统的功能和责任，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；</li>
<li>SubSystem-在软件系统中可以同时有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能</li>
</ul>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Facade class created"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    gotoPage(dp) &#123;</div><div class="line">        <span class="keyword">switch</span> (dp) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">"Facade"</span>:</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the Facade"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"AbstractFactory"</span>:</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">"This is the AbstractFactory"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">"nothing to be matched"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> facade = <span class="keyword">new</span> Facade();</div><div class="line">facade.gotoPage(<span class="string">'Facade'</span>);</div><div class="line">facade.gotoPage(<span class="string">'AbstractFactory'</span>);</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> FacadePattern &#123;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Part1 &#123;</div><div class="line">        <span class="keyword">public</span> method1(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"`method1` of Part1"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Part2 &#123;</div><div class="line">        <span class="keyword">public</span> method2(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"`method2` of Part2"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Part3 &#123;</div><div class="line">        <span class="keyword">public</span> method3(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"`method3` of Part3"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Facade &#123;</div><div class="line">        <span class="keyword">private</span> part1: Part1 = <span class="keyword">new</span> Part1();</div><div class="line">        <span class="keyword">private</span> part2: Part2 = <span class="keyword">new</span> Part2();</div><div class="line">        <span class="keyword">private</span> part3: Part3 = <span class="keyword">new</span> Part3();</div><div class="line"></div><div class="line">        <span class="keyword">public</span> operation1(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"`operation1` is called ==="</span>);</div><div class="line">            <span class="keyword">this</span>.part1.method1();</div><div class="line">            <span class="keyword">this</span>.part2.method2();</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"=========================="</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> operation2(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"`operation2` is called ==="</span>);</div><div class="line">            <span class="keyword">this</span>.part1.method1();</div><div class="line">            <span class="keyword">this</span>.part3.method3();</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"=========================="</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></li>
<li><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
      <category term="Structural Patterns" scheme="https://zhangbihua.github.io/categories/design-pattern/Structural-Patterns/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="外观模式" scheme="https://zhangbihua.github.io/tags/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>享元模式(Flyweight)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/Flyweight/"/>
    <id>https://zhangbihua.github.io/2017/05/05/Flyweight/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-08T08:04:09.419Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<h3 id="享元模式的定义"><a href="#享元模式的定义" class="headerlink" title="享元模式的定义"></a>享元模式的定义</h3><ul>
<li>享元模式：享元模式运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用，它是一种对象结构型模式。</li>
</ul>
<h3 id="享元模式包含四个角色："><a href="#享元模式包含四个角色：" class="headerlink" title="享元模式包含四个角色："></a>享元模式包含四个角色：</h3><ul>
<li>Flyweight-抽象享元类声明一个接口，通过它可以接受并作用于外部状态；</li>
<li>ConcreteFlyweight-具体享元类实现了抽象享元接口，其实例称为享元对象；</li>
<li>UnsharedConcreteFlyweight-非共享具体享元是不能被共享的抽象享元类的子类；</li>
<li>FlyweightFactory-享元工厂类用于创建并管理享元对象，它针对抽象享元类编程，将各种类型的具体享元对象存储在一个享元池中。</li>
</ul>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyweightFactory</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">this</span>.flyweights = &#123;&#125;;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'FlyweightFactory Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    getFlyweight(key) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'FlyweightFactory.getFlyweight invoked'</span>);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.flyweights[key]) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.flyweights[key];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">this</span>.flyweights[key] = <span class="keyword">new</span> ConcreteFlyweight(key);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.flyweights[key];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    createGibberish(keys) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'FlyweightFactory.createGibberish invoked'</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UnsharedConcreteFlyweight(keys, <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flyweight</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Flyweight Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operation(extrinsicState) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Flyweight.operation invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFlyweight</span> <span class="keyword">extends</span> <span class="title">Flyweight</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(key) &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.intrinsicState = key;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteFlyweight Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operation(extrinsicState) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteFlyweight.operation invoked'</span>);</div><div class="line">        <span class="keyword">return</span> extrinsicState + <span class="keyword">this</span>.intrinsicState;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnsharedConcreteFlyweight</span> <span class="keyword">extends</span> <span class="title">Flyweight</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(keys, flyweights) &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.flyweights = flyweights;</div><div class="line">        <span class="keyword">this</span>.keys = keys;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'UnsharedConcreteFlyweight Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operation(extrinsicState) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'UnsharedConcreteFlyweight.operation invoked'</span>);</div><div class="line">        <span class="keyword">var</span> key, word = <span class="string">''</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; extrinsicState; i++) &#123;</div><div class="line">            key = <span class="keyword">this</span>.keys[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (<span class="keyword">this</span>.keys.length))];</div><div class="line">            word = <span class="keyword">this</span>.flyweights.getFlyweight(key).operation(word);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'UnsharedConcreteFlyweight Operation: '</span>);</div><div class="line">        <span class="built_in">console</span>.log(word);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> flyweights = <span class="keyword">new</span> FlyweightFactory();</div><div class="line"><span class="keyword">var</span> gibberish = flyweights.createGibberish([<span class="string">'-'</span>, <span class="string">'+'</span>, <span class="string">'*'</span>]);</div><div class="line">gibberish.operation(<span class="number">5</span>);</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> FlyweightPattern &#123;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> Flyweight &#123;</div><div class="line">        operation(s: <span class="built_in">String</span>): <span class="built_in">void</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteFlyweight <span class="keyword">implements</span> Flyweight &#123;</div><div class="line">        <span class="keyword">private</span> instrinsicState: <span class="built_in">String</span>;</div><div class="line"></div><div class="line">        <span class="keyword">constructor</span>(<span class="params">instrinsicState: <span class="built_in">String</span></span>) &#123;</div><div class="line">            <span class="keyword">this</span>.instrinsicState = instrinsicState;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> operation(s: <span class="built_in">String</span>): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"`operation` of ConcreteFlyweight"</span>, s, <span class="string">" is being called!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> UnsharedConcreteFlyweight <span class="keyword">implements</span> Flyweight &#123;</div><div class="line">        <span class="keyword">private</span> allState: <span class="built_in">number</span>;</div><div class="line"></div><div class="line">        <span class="keyword">constructor</span>(<span class="params">allState: <span class="built_in">number</span></span>) &#123;</div><div class="line">            <span class="keyword">this</span>.allState = allState;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> operation(s: <span class="built_in">String</span>): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"`operation` of UnsharedConcreteFlyweight"</span>, s, <span class="string">" is being called!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> FlyweightFactory &#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> fliesMap: &#123; [s: <span class="built_in">string</span>]: Flyweight; &#125; = &lt;<span class="built_in">any</span>&gt;&#123;&#125;;</div><div class="line"></div><div class="line">        <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> getFlyweight(key: <span class="built_in">string</span>): Flyweight &#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.fliesMap[key] === <span class="literal">undefined</span> || <span class="literal">null</span>) &#123;</div><div class="line">                <span class="keyword">this</span>.fliesMap[key] = <span class="keyword">new</span> ConcreteFlyweight(key);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.fliesMap[key];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></li>
<li><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
      <category term="Structural Patterns" scheme="https://zhangbihua.github.io/categories/design-pattern/Structural-Patterns/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="享元模式" scheme="https://zhangbihua.github.io/tags/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>解析器模式(Interpreter)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/Interpreter/"/>
    <id>https://zhangbihua.github.io/2017/05/05/Interpreter/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-08T08:04:09.419Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<h3 id="解析器模式的定义"><a href="#解析器模式的定义" class="headerlink" title="解析器模式的定义"></a>解析器模式的定义</h3><ul>
<li>解析器模式：在外观模式中，外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，</li>
<li>外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。</li>
</ul>
<h3 id="解析器模式包含二个角色："><a href="#解析器模式包含二个角色：" class="headerlink" title="解析器模式包含二个角色："></a>解析器模式包含二个角色：</h3><ul>
<li>Interpreter-外观角色是在客户端直接调用的角色，在外观角色中可以知道相关的(一个或者多个)子系统的功能和责任，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；</li>
<li>SubSystem-在软件系统中可以同时有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能</li>
</ul>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(input) &#123;</div><div class="line">        <span class="keyword">this</span>.sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">this</span>.list = [];</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Context Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    add(eps) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Context.add invoked'</span>);</div><div class="line">        <span class="keyword">this</span>.list.push(eps);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    getList() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Context.getList invoked'</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    getSum() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Context.getSum invoked'</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sum;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setSum(_sum) &#123;</div><div class="line">        <span class="keyword">this</span>.sum = _sum;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Context.setSum invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractExpression</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'AbstractExpression Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    interpret(context) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'AbstractExpression.interpret invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlusExpression</span> <span class="keyword">extends</span> <span class="title">AbstractExpression</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name) &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'PlusExpression Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    interpret(context) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'PlusExpression.interpret invoked'</span>);</div><div class="line">        <span class="keyword">var</span> sum = context.getSum();</div><div class="line">        sum++;</div><div class="line">        context.setSum(sum);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinusExpression</span> <span class="keyword">extends</span> <span class="title">AbstractExpression</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.name = <span class="string">'+'</span>;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'MinusExpression Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    interpret(context) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'MinusExpression.interpret invoked'</span>);</div><div class="line">        <span class="keyword">var</span> sum = context.getSum();</div><div class="line">        sum--;</div><div class="line">        context.setSum(sum)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> context = <span class="keyword">new</span> Context();</div><div class="line">context.setSum(<span class="number">20</span>);</div><div class="line"></div><div class="line">context.add(<span class="keyword">new</span> PlusExpression());</div><div class="line">context.add(<span class="keyword">new</span> PlusExpression());</div><div class="line">context.add(<span class="keyword">new</span> PlusExpression());</div><div class="line"></div><div class="line">context.add(<span class="keyword">new</span> MinusExpression());</div><div class="line">context.add(<span class="keyword">new</span> MinusExpression());</div><div class="line"></div><div class="line"><span class="keyword">var</span> list = context.getList();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> expression = list[i];</div><div class="line">    expression.interpret(context);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"Result："</span> + context.getSum());</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> InterpreterPattern &#123;</div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Context &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> AbstractExpression &#123;</div><div class="line">        interpret(context: Context): <span class="built_in">void</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> TerminalExpression <span class="keyword">implements</span> AbstractExpression &#123;</div><div class="line">        <span class="keyword">public</span> interpret(context: Context): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"`interpret` method of TerminalExpression is being called!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> NonterminalExpression <span class="keyword">implements</span> AbstractExpression &#123;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> interpret(context: Context): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"`interpret` method of NonterminalExpression is being called!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></li>
<li><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
      <category term="Behavioral Patterns" scheme="https://zhangbihua.github.io/categories/design-pattern/Behavioral-Patterns/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="解析器模式" scheme="https://zhangbihua.github.io/tags/%E8%A7%A3%E6%9E%90%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>观察者模式(Observer)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/Observer/"/>
    <id>https://zhangbihua.github.io/2017/05/05/Observer/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-08T08:04:09.419Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<h3 id="观察者模式的定义"><a href="#观察者模式的定义" class="headerlink" title="观察者模式的定义"></a>观察者模式的定义</h3><ul>
<li>观察者模式定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。</li>
<li>观察者模式又叫做发布-订阅模式、模型-视图模式、源-监听器模式或从属者模式。</li>
<li>观察者模式是一种对象行为型模式。</li>
</ul>
<h3 id="观察者模式包含四个角色："><a href="#观察者模式包含四个角色：" class="headerlink" title="观察者模式包含四个角色："></a>观察者模式包含四个角色：</h3><ul>
<li>Subject-目标又称为主题，它是指被观察的对象；</li>
<li>ConcreteSubject-具体目标是目标类的子类，通常它包含有经常发生改变的数据，当它的状态发生改变时，向它的各个观察者发出通知；</li>
<li>Observer-观察者将对观察目标的改变做出反应；</li>
<li>ConcreteObserver-在具体观察者中维护一个指向具体目标对象的引用，它存储具体观察者的有关状态，这些状态需要和具体目标的状态保持一致。</li>
</ul>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Subject Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    attach(observer) &#123;</div><div class="line">        <span class="keyword">this</span>.observers.push(observer);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Subject.attach invoked'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dettach(observer) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Subject.dettach invoked'</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> <span class="keyword">this</span>.observers) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.observers[i] === observer) &#123;</div><div class="line">                <span class="keyword">this</span>.observers.splice(i, <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    notify() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Subject.notify invoked'</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> <span class="keyword">this</span>.observers) &#123;</div><div class="line">            <span class="keyword">this</span>.observers[i].update(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.subjectState = <span class="literal">null</span>;</div><div class="line">        <span class="keyword">this</span>.observers = [];</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteSubject Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    getState() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteSubject.getState invoked'</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.subjectState;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setState(state) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteSubject.setState invoked'</span>);</div><div class="line">        <span class="keyword">this</span>.subjectState = state;</div><div class="line">        <span class="keyword">this</span>.notify();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Observer Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    update() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Observer.update invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.observerState = <span class="string">''</span>;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteObserver Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    update(Subject) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteObserver.update invoked'</span>);</div><div class="line">        <span class="keyword">this</span>.observerState = Subject.getState();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Observer new state: '</span> + <span class="keyword">this</span>.observerState);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> observer1 = <span class="keyword">new</span> ConcreteObserver();</div><div class="line"><span class="keyword">var</span> observer2 = <span class="keyword">new</span> ConcreteObserver();</div><div class="line"><span class="keyword">var</span> subject = <span class="keyword">new</span> ConcreteSubject();</div><div class="line">subject.attach(observer1);</div><div class="line">subject.attach(observer2);</div><div class="line">subject.setState(<span class="string">'state 1'</span>);</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> ObserverPattern &#123;</div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Subject &#123;</div><div class="line">        <span class="keyword">private</span> observers: Observer[] = [];</div><div class="line"></div><div class="line">        <span class="keyword">public</span> register(observer: Observer): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(observer, <span class="string">"is pushed!"</span>);</div><div class="line">            <span class="keyword">this</span>.observers.push(observer);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> unregister(observer: Observer): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="keyword">var</span> n: <span class="built_in">number</span> = <span class="keyword">this</span>.observers.indexOf(observer);</div><div class="line">            <span class="built_in">console</span>.log(observer, <span class="string">"is removed"</span>);</div><div class="line">            <span class="keyword">this</span>.observers.splice(n, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> notify(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"notify all the observers"</span>, <span class="keyword">this</span>.observers);</div><div class="line">            <span class="keyword">var</span> i: <span class="built_in">number</span></div><div class="line">              , max: <span class="built_in">number</span>;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>, max = <span class="keyword">this</span>.observers.length; i &lt; max; i += <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">this</span>.observers[i].notify();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteSubject <span class="keyword">extends</span> Subject &#123;</div><div class="line">        <span class="keyword">private</span> subjectState: <span class="built_in">number</span>;</div><div class="line"></div><div class="line">        <span class="keyword">get</span> SubjectState(): <span class="built_in">number</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.subjectState;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">set</span> SubjectState(subjectState: <span class="built_in">number</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.subjectState = subjectState;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Observer &#123;</div><div class="line">        <span class="keyword">public</span> notify(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Abstract Method!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteObserver <span class="keyword">extends</span> Observer &#123;</div><div class="line">        <span class="keyword">private</span> name: <span class="built_in">string</span>;</div><div class="line">        <span class="keyword">private</span> state: <span class="built_in">number</span>;</div><div class="line">        <span class="keyword">private</span> subject: ConcreteSubject;</div><div class="line"></div><div class="line">        <span class="keyword">constructor</span> (<span class="params">subject: ConcreteSubject, name: <span class="built_in">string</span></span>) &#123;</div><div class="line">            <span class="keyword">super</span>();</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"ConcreteObserver"</span>, name, <span class="string">"is created!"</span>);</div><div class="line">            <span class="keyword">this</span>.subject = subject;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> notify(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"ConcreteObserver's notify method"</span>);</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="keyword">this</span>.state);</div><div class="line">            <span class="keyword">this</span>.state = <span class="keyword">this</span>.subject.SubjectState;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">get</span> Subject(): ConcreteSubject &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.subject;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">set</span> Subject(subject: ConcreteSubject) &#123;</div><div class="line">            <span class="keyword">this</span>.subject = subject;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></li>
<li><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
      <category term="Behavioral Patterns" scheme="https://zhangbihua.github.io/categories/design-pattern/Behavioral-Patterns/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="观察者模式" scheme="https://zhangbihua.github.io/tags/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>抽象工厂模式(Abstract Factory)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/AbstractFactory/"/>
    <id>https://zhangbihua.github.io/2017/05/05/AbstractFactory/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-08T08:04:09.419Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<h3 id="抽象工厂模式的定义"><a href="#抽象工厂模式的定义" class="headerlink" title="抽象工厂模式的定义"></a>抽象工厂模式的定义</h3><ul>
<li>抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。</li>
<li>抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构</li>
</ul>
<h3 id="抽象工厂模式包含四个角色："><a href="#抽象工厂模式包含四个角色：" class="headerlink" title="抽象工厂模式包含四个角色："></a>抽象工厂模式包含四个角色：</h3><ul>
<li>ConcreteFactory-具体工厂实现了抽象工厂声明的生成抽象产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中；</li>
<li>AbstractProduct-抽象产品为每种产品声明接口，在抽象产品中定义了产品的抽象业务方法；</li>
<li>AbstractFactory-抽象工厂用于明生成抽象产品的方法；</li>
<li>Product-具体产品定义具体工厂生产的具体产品对象，实现抽象产品接口中定义的业务方法。</li>
</ul>
<h3 id="抽象工厂模式适用情况包括："><a href="#抽象工厂模式适用情况包括：" class="headerlink" title="抽象工厂模式适用情况包括："></a>抽象工厂模式适用情况包括：</h3><ul>
<li>一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节；</li>
<li>系统中有多于一个的产品族，而每次只使用其中某一产品族；</li>
<li>属于同一个产品族的产品将在一起使用；</li>
<li>系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。</li>
</ul>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"AbstractFactory class created"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    createProductA(product) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"AbstractFactory.createProductA created"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    createProductB(product) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"AbstractFactory.createProductB created"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory1</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcreteFactory1 class created"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    createProductA(product) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteFactory1 createProductA'</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA1();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    createProductB(product) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteFactory1 createProductB'</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB1();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory2</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcreteFactory2 class created"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    createProductA(product) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteFactory2 createProductA'</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA2();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    createProductB(product) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteFactory2 createProductB'</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB2();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractProductA</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'AbstractProductA class created'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractProductB</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'AbstractProductB class created'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA1</span> <span class="keyword">extends</span> <span class="title">AbstractProductA</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ProductA1 class created'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA2</span> <span class="keyword">extends</span> <span class="title">AbstractProductA</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ProductA2 class created'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB1</span> <span class="keyword">extends</span> <span class="title">AbstractProductB</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ProductB1 class created'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB2</span> <span class="keyword">extends</span> <span class="title">AbstractProductB</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ProductB2 class created'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> factory1 = <span class="keyword">new</span> ConcreteFactory1();</div><div class="line"><span class="keyword">var</span> productB1 = factory1.createProductB();</div><div class="line"><span class="keyword">var</span> productA1 = factory1.createProductA();</div><div class="line"></div><div class="line"><span class="keyword">var</span> factory2 = <span class="keyword">new</span> ConcreteFactory2();</div><div class="line"><span class="keyword">var</span> productA2 = factory2.createProductA();</div><div class="line"><span class="keyword">var</span> productB2 = factory2.createProductB();</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> AbstractFactoryPattern &#123;</div><div class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> AbstractProductA &#123;</div><div class="line">        methodA(): <span class="built_in">string</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> AbstractProductB &#123;</div><div class="line">        methodB(): <span class="built_in">number</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> AbstractFactory &#123;</div><div class="line">        createProductA(param?: <span class="built_in">any</span>) : AbstractProductA;</div><div class="line">        createProductB() : AbstractProductB;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ProductA1 <span class="keyword">implements</span> AbstractProductA &#123;</div><div class="line">        methodA = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"This is methodA of ProductA1"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ProductB1 <span class="keyword">implements</span> AbstractProductB &#123;</div><div class="line">        methodB = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ProductA2 <span class="keyword">implements</span> AbstractProductA &#123;</div><div class="line">        methodA = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"This is methodA of ProductA2"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ProductB2 <span class="keyword">implements</span> AbstractProductB &#123;</div><div class="line">        methodB = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteFactory1 <span class="keyword">implements</span> AbstractFactory &#123;</div><div class="line">        createProductA(param?: <span class="built_in">any</span>) : AbstractProductA &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductA1();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        createProductB(param?: <span class="built_in">any</span>) : AbstractProductB &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductB1();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteFactory2 <span class="keyword">implements</span> AbstractFactory &#123;</div><div class="line">        createProductA(param?: <span class="built_in">any</span>) : AbstractProductA &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductA2();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        createProductB(param?: <span class="built_in">any</span>) : AbstractProductB &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductB2();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Tester &#123;</div><div class="line">        <span class="keyword">private</span> abstractProductA: AbstractProductA;</div><div class="line">        <span class="keyword">private</span> abstractProductB: AbstractProductB;</div><div class="line"></div><div class="line">        <span class="keyword">constructor</span>(<span class="params">factory: AbstractFactory</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.abstractProductA = factory.createProductA();</div><div class="line">            <span class="keyword">this</span>.abstractProductB = factory.createProductB();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> test(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.abstractProductA.methodA());</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.abstractProductB.methodB());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><p><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></p>
</li>
<li><p><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></p>
</li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
      <category term="Creational Patterns" scheme="https://zhangbihua.github.io/categories/design-pattern/Creational-Patterns/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="抽象工厂模式" scheme="https://zhangbihua.github.io/tags/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>迭代器(Iterator)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/Iterator/"/>
    <id>https://zhangbihua.github.io/2017/05/05/Iterator/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-08T08:04:09.419Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Iterator</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Iterator Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    first() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Iterator.first invoked'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    next() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Iterator.next invoked'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    isDone() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Iterator.isDone invoked'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    currentItem() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Iterator.currentItem invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteIterator</span> <span class="keyword">extends</span> <span class="title">Iterator</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(aggregate) &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.index = <span class="number">0</span>;</div><div class="line">        <span class="keyword">this</span>.aggregate = aggregate;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteIterator Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    first() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteIterator.first invoked'</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.aggregate.list[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    next() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteIterator.next invoked'</span>);</div><div class="line">        <span class="keyword">this</span>.index += <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.aggregate.list[<span class="keyword">this</span>.index];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    currentItem() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteIterator.currentItem invoked'</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.aggregate.list[<span class="keyword">this</span>.index];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Aggregate</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Aggregate Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    createIterator() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Aggregate.CreateIterator invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteAggregate</span> <span class="keyword">extends</span> <span class="title">Aggregate</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(list) &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.list = list;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteAggregate Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    createIterator() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteAggregate.CreateIterator invoked'</span>);</div><div class="line">        <span class="keyword">this</span>.iterator = <span class="keyword">new</span> ConcreteIterator(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> aggregate = <span class="keyword">new</span> ConcreteAggregate([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]);</div><div class="line">aggregate.createIterator();</div><div class="line"><span class="built_in">console</span>.log(aggregate.iterator.first());</div><div class="line"><span class="built_in">console</span>.log(aggregate.iterator.next());</div><div class="line"><span class="built_in">console</span>.log(aggregate.iterator.currentItem());</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> IteratorPattern &#123;</div><div class="line">	<span class="keyword">export</span> <span class="keyword">namespace</span> Demo &#123;</div><div class="line"></div><div class="line">		<span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) : <span class="title">void</span> </span>&#123;</div><div class="line">		    <span class="keyword">var</span> nArray = [<span class="number">1</span>, <span class="number">7</span>, <span class="number">21</span>, <span class="number">657</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">765</span>, <span class="number">13</span>, <span class="number">65</span>],</div><div class="line">				numbers: IteratorPattern.Numbers = <span class="keyword">new</span> IteratorPattern.Numbers(nArray),</div><div class="line">				it: IteratorPattern.ConcreteIterator = &lt;IteratorPattern.ConcreteIterator&gt;numbers.createIterator();</div><div class="line"></div><div class="line">			<span class="keyword">while</span> (it.hasNext()) &#123;</div><div class="line">				<span class="built_in">console</span>.log(it.next());</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></li>
<li><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
      <category term="Behavioral Patterns" scheme="https://zhangbihua.github.io/categories/design-pattern/Behavioral-Patterns/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="迭代器" scheme="https://zhangbihua.github.io/tags/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>原型模式(Prototype)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/Prototype/"/>
    <id>https://zhangbihua.github.io/2017/05/05/Prototype/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-08T08:04:09.419Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(prototype) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Prototype Class created"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setFeature(key, val) &#123;</div><div class="line">        <span class="keyword">this</span>[key] = val</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    clone() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Prototype.clone invoked"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototype1</span> <span class="keyword">extends</span> <span class="title">Prototype</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcretePrototype1 created"</span>);</div><div class="line">        <span class="keyword">this</span>.feature = <span class="string">"feature 1"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    clone() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcretePrototype1.clone invoked'</span>);</div><div class="line">        <span class="keyword">let</span> clone = <span class="keyword">new</span> ConcretePrototype1();</div><div class="line">        <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        keys.forEach(<span class="function"><span class="params">k</span> =&gt;</span> clone.setFeature(k, <span class="keyword">this</span>[k]));</div><div class="line"></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcretePrototype1 cloned"</span>);</div><div class="line">        <span class="keyword">return</span> clone;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototype2</span> <span class="keyword">extends</span> <span class="title">Prototype</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcretePrototype2 created"</span>);</div><div class="line">        <span class="keyword">this</span>.feature = <span class="string">"feature 2"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    clone() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcretePrototype2.Clone function'</span>);</div><div class="line">        <span class="keyword">let</span> clone = <span class="keyword">new</span> ConcretePrototype2();</div><div class="line">        <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        keys.forEach(<span class="function"><span class="params">k</span> =&gt;</span> clone.setFeature(k, <span class="keyword">this</span>[k]));</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcretePrototype2 cloned"</span>);</div><div class="line">        <span class="keyword">return</span> clone;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> proto1 = <span class="keyword">new</span> ConcretePrototype1();</div><div class="line">proto1.setFeature(<span class="string">'feature'</span>, <span class="string">"feature 11"</span>);</div><div class="line"><span class="keyword">var</span> clone1 = proto1.clone();</div><div class="line"><span class="built_in">console</span>.log(clone1.feature);</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> clone1);</div><div class="line"><span class="built_in">console</span>.log(clone1 === proto1);</div><div class="line"></div><div class="line"><span class="keyword">var</span> proto2 = <span class="keyword">new</span> ConcretePrototype2();</div><div class="line">proto2.setFeature(<span class="string">'feature'</span>, <span class="string">"feature 22"</span>);</div><div class="line"><span class="keyword">var</span> clone2 = proto2.clone();</div><div class="line"><span class="built_in">console</span>.log(clone2.feature);</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> clone2);</div><div class="line"><span class="built_in">console</span>.log(clone2 === proto2);</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> PrototypePattern &#123;</div><div class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> Prototype &#123;</div><div class="line">        clone(): Prototype;</div><div class="line">        toString(): <span class="built_in">string</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Concrete1 <span class="keyword">implements</span> Prototype &#123;</div><div class="line"></div><div class="line">        clone() : Prototype &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Concrete1();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        toString(): <span class="built_in">string</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"This is Concrete1"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Concrete2 <span class="keyword">implements</span> Prototype &#123;</div><div class="line"></div><div class="line">        clone() : Prototype &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Concrete2();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        toString(): <span class="built_in">string</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"This is Concrete2"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Concrete3 <span class="keyword">implements</span> Prototype &#123;</div><div class="line"></div><div class="line">        clone() : Prototype &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Concrete3();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        toString(): <span class="built_in">string</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"This is Concrete3"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Builder &#123;</div><div class="line">        <span class="keyword">private</span> prototypeMap: &#123; [s: <span class="built_in">string</span>]: Prototype; &#125; = &#123;&#125;;</div><div class="line"></div><div class="line">        <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</div><div class="line">            <span class="keyword">this</span>.prototypeMap[<span class="string">'c1'</span>] = <span class="keyword">new</span> Concrete1();</div><div class="line">            <span class="keyword">this</span>.prototypeMap[<span class="string">'c2'</span>] = <span class="keyword">new</span> Concrete2();</div><div class="line">            <span class="keyword">this</span>.prototypeMap[<span class="string">'c3'</span>] = <span class="keyword">new</span> Concrete3();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        createOne(s: <span class="built_in">string</span>): Prototype &#123;</div><div class="line">            <span class="built_in">console</span>.log(s);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.prototypeMap[s].clone();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><p><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></p>
</li>
<li><p><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></p>
</li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
      <category term="Creational Patterns" scheme="https://zhangbihua.github.io/categories/design-pattern/Creational-Patterns/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="原型模式" scheme="https://zhangbihua.github.io/tags/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>代理模式(Proxy)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/Proxy/"/>
    <id>https://zhangbihua.github.io/2017/05/05/Proxy/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-08T08:04:09.419Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<h3 id="代理模式的定义"><a href="#代理模式的定义" class="headerlink" title="代理模式的定义"></a>代理模式的定义</h3><ul>
<li>代理模式(Proxy Pattern) ：给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英 文叫做Proxy或Surrogate，它是一种对象结构型模式。</li>
</ul>
<h3 id="代理模式包含三个角色："><a href="#代理模式包含三个角色：" class="headerlink" title="代理模式包含三个角色："></a>代理模式包含三个角色：</h3><p>Subject: 抽象主题角色<br>Proxy: 代理主题角色<br>RealSubject: 真实主题角色</p>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Subject Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    request() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Subject.request invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>()</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'RealSubject Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    request() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'RealSubject.request invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>()</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Proxy Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    request() &#123;</div><div class="line">        <span class="keyword">this</span>.realSubject = <span class="keyword">new</span> RealSubject();</div><div class="line">        <span class="keyword">this</span>.realSubject.request();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>()</div><div class="line">proxy.request()</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> ProxyPattern &#123;</div><div class="line">    <span class="keyword">export</span> <span class="keyword">interface</span> Subject &#123;</div><div class="line">        doAction(): <span class="built_in">void</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> Proxy <span class="keyword">implements</span> Subject &#123;</div><div class="line">        <span class="keyword">private</span> realSubject: RealSubject;</div><div class="line">        <span class="keyword">private</span> s: <span class="built_in">string</span>;</div><div class="line"></div><div class="line">        <span class="keyword">constructor</span>(<span class="params">s: <span class="built_in">string</span></span>) &#123;</div><div class="line">            <span class="keyword">this</span>.s = s;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> doAction(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"`doAction` of Proxy("</span>, <span class="keyword">this</span>.s, <span class="string">")"</span>);</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.realSubject === <span class="literal">null</span> || <span class="keyword">this</span>.realSubject === <span class="literal">undefined</span>) &#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">"creating a new RealSubject."</span>);</div><div class="line">                <span class="keyword">this</span>.realSubject = <span class="keyword">new</span> RealSubject(<span class="keyword">this</span>.s);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">this</span>.realSubject.doAction();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> RealSubject <span class="keyword">implements</span> Subject &#123;</div><div class="line">        <span class="keyword">private</span> s: <span class="built_in">string</span>;</div><div class="line"></div><div class="line">        <span class="keyword">constructor</span>(<span class="params">s: <span class="built_in">string</span></span>) &#123;</div><div class="line">            <span class="keyword">this</span>.s = s;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">public</span> doAction(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"`doAction` of RealSubject"</span>, <span class="keyword">this</span>.s, <span class="string">"is being called!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></li>
<li><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
      <category term="Structural Patterns" scheme="https://zhangbihua.github.io/categories/design-pattern/Structural-Patterns/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="代理模式" scheme="https://zhangbihua.github.io/tags/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单例模式(Singleton)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/Singleton/"/>
    <id>https://zhangbihua.github.io/2017/05/05/Singleton/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-08T08:04:09.419Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<h3 id="单例模式的定义"><a href="#单例模式的定义" class="headerlink" title="单例模式的定义"></a>单例模式的定义</h3><ul>
<li>某个类只能有一个实例；</li>
<li>它必须自行创建这个实例；</li>
<li>它必须自行向整个系统提供这个实例。</li>
</ul>
<h3 id="单例模式的实现过程中，需要注意如下三点："><a href="#单例模式的实现过程中，需要注意如下三点：" class="headerlink" title="单例模式的实现过程中，需要注意如下三点："></a>单例模式的实现过程中，需要注意如下三点：</h3><ul>
<li>单例类的构造函数为私有；</li>
<li>提供一个自身的静态私有成员变量；</li>
<li>提供一个公有的静态工厂方法。</li>
</ul>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(data) &#123;</div><div class="line">        <span class="keyword">if</span> (Singleton.prototype.Instance === <span class="literal">undefined</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.data = data;</div><div class="line">            Singleton.prototype.Instance = <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Singleton.prototype.Instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> ob1 = <span class="keyword">new</span> Singleton.getInstance();</div><div class="line"><span class="keyword">let</span> ob2 = <span class="keyword">new</span> Singleton(<span class="string">"two"</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(ob1 === ob2);</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Singleton &#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> instance: Singleton;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> <span class="keyword">get</span> Instance() &#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.instance === <span class="literal">null</span> || <span class="keyword">this</span>.instance === <span class="literal">undefined</span>) &#123;</div><div class="line">          <span class="keyword">this</span>.instance = <span class="keyword">new</span> Singleton();</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.instance;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> ob1 = <span class="keyword">new</span> Singleton(<span class="string">"one"</span>);</div><div class="line"><span class="keyword">let</span> ob2 = <span class="keyword">new</span> Singleton(<span class="string">"two"</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(ob1 === ob2);</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><p><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></p>
</li>
<li><p><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></p>
</li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
      <category term="Creational Patterns" scheme="https://zhangbihua.github.io/categories/design-pattern/Creational-Patterns/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="单例模式" scheme="https://zhangbihua.github.io/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>简单工厂模式(Factory)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/SimpleFactory/"/>
    <id>https://zhangbihua.github.io/2017/05/05/SimpleFactory/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-08T08:04:09.419Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<h3 id="简单工厂模式的定义"><a href="#简单工厂模式的定义" class="headerlink" title="简单工厂模式的定义"></a>简单工厂模式的定义</h3><ul>
<li>简单工厂模式：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。</li>
</ul>
<h3 id="简单工厂模式包含三个角色："><a href="#简单工厂模式包含三个角色：" class="headerlink" title="简单工厂模式包含三个角色："></a>简单工厂模式包含三个角色：</h3><ul>
<li>Factory-工厂角色负责实现创建所有实例的内部逻辑；</li>
<li>Product-抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口；</li>
<li>ConcreteProduct-具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。</li>
</ul>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Product Class created'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteProduct Class created'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Creator</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Creator Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    factoryMethod() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Creator.factoryMethod created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    anOperation() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Creator.anOperation created'</span>);</div><div class="line">        <span class="keyword">this</span>.product = <span class="keyword">this</span>.factoryMethod();</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.product <span class="keyword">instanceof</span> ConcreteProduct);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCreator</span> <span class="keyword">extends</span> <span class="title">Creator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteCreator Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    factoryMethod() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> factory = <span class="keyword">new</span> ConcreteCreator();</div><div class="line">factory.anOperation();</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> AbstractProduct &#123;</div><div class="line">    method(param?: <span class="built_in">any</span>) : <span class="built_in">void</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> ConcreteProductA <span class="keyword">implements</span> AbstractProduct &#123;</div><div class="line">    method = <span class="function">(<span class="params">param?: <span class="built_in">any</span></span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Method of ConcreteProductA"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> ConcreteProductB <span class="keyword">implements</span> AbstractProduct &#123;</div><div class="line">    method = <span class="function">(<span class="params">param?: <span class="built_in">any</span></span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Method of ConcreteProductB"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> ProductFactory &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> createProduct(<span class="keyword">type</span>: <span class="built_in">string</span>) : AbstractProduct &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">type</span> === <span class="string">"A"</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProductA();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">type</span> === <span class="string">"B"</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProductB();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><p><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></p>
</li>
<li><p><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></p>
</li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
      <category term="Creational Patterns" scheme="https://zhangbihua.github.io/categories/design-pattern/Creational-Patterns/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="简单工厂模式" scheme="https://zhangbihua.github.io/tags/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>状态模式(State)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/State/"/>
    <id>https://zhangbihua.github.io/2017/05/05/State/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-08T08:04:09.419Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<h3 id="状态模式的定义"><a href="#状态模式的定义" class="headerlink" title="状态模式的定义"></a>状态模式的定义</h3><ul>
<li>状态模式允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。</li>
<li>其别名为状态对象，状态模式是一种对象行为型模式。</li>
</ul>
<h3 id="状态模式包含二个角色："><a href="#状态模式包含二个角色：" class="headerlink" title="状态模式包含二个角色："></a>状态模式包含二个角色：</h3><ul>
<li>Context-环境类又称为上下文类，它是拥有状态的对象，在环境类中维护一个抽象状态类State的实例，这个实例定义当前状态，在具体实现时，它是一个State子类的对象，可以定义初始状态；</li>
<li>State-抽象状态类用于定义一个接口以封装与环境类的一个特定状态相关的行为；</li>
<li>ConcreteState-具体状态类是抽象状态类的子类，每一个子类实现一个与环境类的一个状态相关的行为，每一个具体状态类对应环境的一个具体状态，不同的具体状态类其行为有所不同。</li>
</ul>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(state) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Context Class created"</span>);</div><div class="line">        <span class="keyword">switch</span> (state) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">"A"</span>:</div><div class="line">                <span class="keyword">this</span>.state = <span class="keyword">new</span> ConcreteStateA()</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">case</span> <span class="string">"B"</span>:</div><div class="line">                <span class="keyword">this</span>.state = <span class="keyword">new</span> ConcreteStateB()</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">this</span>.state = <span class="keyword">new</span> ConcreteStateA()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    request() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Context.request invoked'</span>);</div><div class="line">        <span class="keyword">this</span>.state.handle(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"State Class created"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    handle() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'State.handle invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateA</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcreteStateA Class created"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    handle(context) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteStateA.handle invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateB</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcreteStateB Class created"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    handle(context) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteStateB.handle invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> context = <span class="keyword">new</span> Context(<span class="string">"A"</span>)</div><div class="line">context.request()</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> StatePattern &#123;</div><div class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> State &#123;</div><div class="line">      handle(context: Context): <span class="built_in">void</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">export</span> <span class="keyword">class</span> ConcreteStateA <span class="keyword">implements</span> State &#123;</div><div class="line">      <span class="keyword">public</span> handle(context: Context): <span class="built_in">void</span> &#123;</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">"`handle` method of ConcreteStateA is being called!"</span>);</div><div class="line">          context.State = <span class="keyword">new</span> ConcreteStateB();</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">export</span> <span class="keyword">class</span> ConcreteStateB <span class="keyword">implements</span> State &#123;</div><div class="line">      <span class="keyword">public</span> handle(context: Context): <span class="built_in">void</span> &#123;</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">"`handle` method of ConcreteStateB is being called!"</span>);</div><div class="line">          context.State = <span class="keyword">new</span> ConcreteStateA();</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">export</span> <span class="keyword">class</span> Context &#123;</div><div class="line">      <span class="keyword">private</span> state: State;</div><div class="line"></div><div class="line">      <span class="keyword">constructor</span>(<span class="params">state: State</span>) &#123;</div><div class="line">          <span class="keyword">this</span>.state = state;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">get</span> State(): State &#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.state;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">set</span> State(state: State) &#123;</div><div class="line">          <span class="keyword">this</span>.state = state;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">public</span> request(): <span class="built_in">void</span> &#123;</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">"request is being called!"</span>);</div><div class="line">          <span class="keyword">this</span>.state.handle(<span class="keyword">this</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></li>
<li><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
      <category term="Behavioral Patterns" scheme="https://zhangbihua.github.io/categories/design-pattern/Behavioral-Patterns/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="状态模式" scheme="https://zhangbihua.github.io/tags/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>模板方法模式(TemplateMethod)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/TemplateMethod/"/>
    <id>https://zhangbihua.github.io/2017/05/05/TemplateMethod/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-08T08:04:09.419Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<h3 id="模板方法模式的定义"><a href="#模板方法模式的定义" class="headerlink" title="模板方法模式的定义"></a>模板方法模式的定义</h3><ul>
<li>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</li>
</ul>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'AbstractClass Class created!'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    templateMethod() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'AbstractClass.templateMethod invoked'</span>);</div><div class="line">        <span class="keyword">this</span>.primitiveOperation1();</div><div class="line">        <span class="keyword">this</span>.primitiveOperation2();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    primitiveOperation1() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'AbstractClass.primitiveOperation1 invoked'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    primitiveOperation2() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'AbstractClass.primitiveOperation2 invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteClass Class created!'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    primitiveOperation1() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteClass.primitiveOperation1 invoked'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    primitiveOperation2() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteClass.primitiveOperation2 invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> ConcreteClass();</div><div class="line">obj.templateMethod();</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> TemplateMethodPattern &#123;</div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> AbstractClass &#123;</div><div class="line">        <span class="keyword">public</span> method1(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Abstract Method"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> method2(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Abstract Method"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> method3(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Abstract Method"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> templateMethod(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"templateMethod is being called"</span>);</div><div class="line">            <span class="keyword">this</span>.method1();</div><div class="line">            <span class="keyword">this</span>.method2();</div><div class="line">            <span class="keyword">this</span>.method3();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteClass1 <span class="keyword">extends</span> AbstractClass &#123;</div><div class="line">        <span class="keyword">public</span> method1(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"method1 of ConcreteClass1"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> method2(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"method2 of ConcreteClass1"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> method3(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"method3 of ConcreteClass1"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="keyword">class</span> ConcreteClass2 <span class="keyword">extends</span> AbstractClass &#123;</div><div class="line">        <span class="keyword">public</span> method1(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"method1 of ConcreteClass2"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> method2(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"method2 of ConcreteClass2"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> method3(): <span class="built_in">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"method3 of ConcreteClass2"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></li>
<li><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
      <category term="Behavioral Patterns" scheme="https://zhangbihua.github.io/categories/design-pattern/Behavioral-Patterns/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="模板方法模式" scheme="https://zhangbihua.github.io/tags/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
