{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"c5ae214140b7c1233b89472502f057342979dfd2","modified":1499501049423},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1499270054058},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1499270054058},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1499270054058},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1499270054058},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1499270054058},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1499270054058},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1499270054058},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1499270054058},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1499270054058},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1499270054058},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1499270054058},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1499270054058},{"_id":"themes/next/_config.yml","hash":"97113792989f53a67290e510ffa3e98daec8c606","modified":1499449116185},{"_id":"themes/next/bower.json","hash":"be0a430362cb73a7e3cf9ecf51a67edf8214b637","modified":1499270054058},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1499270054058},{"_id":"themes/next/package.json","hash":"6b5bfec48776ddf9c03811b1ff2cb2b615eccc88","modified":1499270054062},{"_id":"source/_posts/Adapter.md","hash":"08bfcb2c10bafa5d0fd8a779f695cbea293d3de2","modified":1499501049419},{"_id":"source/_posts/Bridge.md","hash":"11319113ca5385d521f524f6af1ed4feabfddfe8","modified":1499501049419},{"_id":"source/_posts/AbstractFactory.md","hash":"fb37385eaff17c13d82818b76f3f6aed50bd2980","modified":1499501049419},{"_id":"source/_posts/Builder.md","hash":"667504e7d9ed97c8f2c4823c31b2a18acaff76f0","modified":1499501049419},{"_id":"source/_posts/Command.md","hash":"aae12ea3ab78753bee92f63078cb8f3600f7e37a","modified":1499501049419},{"_id":"source/_posts/Class.md","hash":"e1507ae9a79c432cf40b641b15cf414635ece886","modified":1499925840140},{"_id":"source/_posts/Composite.md","hash":"f6a57147a7b40b0c6b335b96df394f1201a8b5ee","modified":1499501049419},{"_id":"source/_posts/Decorator.md","hash":"bc25cf7b35415b8da430ee46a77f959c18b6c925","modified":1499501049419},{"_id":"source/_posts/Facade.md","hash":"23d3d380fd236b977ac8ea53363e2afdc3f19c5f","modified":1499501049419},{"_id":"source/_posts/DestructuringAssignment.md","hash":"f22073b201a596117c2770d536f87a1112f921e5","modified":1499918490305},{"_id":"source/_posts/Flyweight.md","hash":"c7c977c099c268cc506cd63981de303b7c055464","modified":1499501049419},{"_id":"source/_posts/Interpreter.md","hash":"95fe4209ee03f633e8562f6f6219a377458618cc","modified":1499501049419},{"_id":"source/_posts/Iterator.md","hash":"8f6b409d571c6b360acf559dda8bff8a50d0cb03","modified":1499501049419},{"_id":"source/_posts/Observer.md","hash":"0884c414524584242eef6a9061d0355a75b17185","modified":1499501049419},{"_id":"source/_posts/Mediator.md","hash":"5d15dc31c8fc4b59fa8be75fc7315ad991197886","modified":1499501049419},{"_id":"source/_posts/Prototype.md","hash":"98a26fbc3f6804ea02265b9cad569e0418ffa3fb","modified":1499501049419},{"_id":"source/_posts/Proxy.md","hash":"7a9f4cfe0da33acae3a28eccf050ed13296bc3f1","modified":1499926312000},{"_id":"source/_posts/Promise.md","hash":"e4499c154e8f815bcb959ffd75aeaf0539766bbc","modified":1499950478381},{"_id":"source/_posts/Singleton.md","hash":"56509b173e9230948a6a24dc72c4557fdb2f6b7e","modified":1499501049419},{"_id":"source/_posts/SimpleFactory.md","hash":"4efc87cf182f2a9083c04a1d58969185ccedc8bd","modified":1499501049419},{"_id":"source/_posts/State.md","hash":"e0ed8e99d45f01c21ec8c24aa1614ceb84138959","modified":1499501049419},{"_id":"source/_posts/Strategy.md","hash":"0f33d819860c85b8b8e780b0ad3d621fabdbdbaf","modified":1499501049419},{"_id":"source/_posts/TemplateMethod.md","hash":"28d7e8c1aee19a5bd78343a6a0210b81663d238b","modified":1499501049419},{"_id":"source/_posts/Visitor.md","hash":"5637e5a5ee12662719974ee6fcfc704e9e029872","modified":1499501049419},{"_id":"source/_posts/chainOfResponsibility.md","hash":"80d61a04cadd240bfd7bba9404992d6ac07843a4","modified":1499501049419},{"_id":"source/_posts/generatorAndIterator.md","hash":"5cfdfe686f904ee496648d06d613d927d706d32d","modified":1499964201866},{"_id":"source/_posts/instanceTypeofContructor.md","hash":"e6e3fcb57e8f27606273752af96da1b3582541f1","modified":1499951769528},{"_id":"source/_posts/prototypeAndProto.md","hash":"8b1a9b51308bcdf72e441b921063c1be2293dab6","modified":1499933284834},{"_id":"source/about/index.md","hash":"22d3dadba2f51bd8b70a3787189a921db6d0a027","modified":1499501049423},{"_id":"source/categories/index.md","hash":"d1be0ba9daa3422cb173edfa694de3fc13062749","modified":1499501049423},{"_id":"source/tags/index.md","hash":"5cb0f04bd634d6f6abd40f76c4dd38e73765bed7","modified":1499501049423},{"_id":"themes/next/.git/COMMIT_EDITMSG","hash":"49cb6bb791b065a02aed54e3a5125cf90aae71e7","modified":1499505583563},{"_id":"themes/next/.git/FETCH_HEAD","hash":"1a8adf559166579585be1bc1755b59a469b0c491","modified":1499505588789},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1499270054055},{"_id":"themes/next/.git/ORIG_HEAD","hash":"ec0d610e9e87f0827c186231167e9a6b6b59afe3","modified":1499505588793},{"_id":"themes/next/.git/config","hash":"91b6a53b2a7f929b698734717a38d4ac169f0c1f","modified":1499270054055},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1499270043952},{"_id":"themes/next/.git/packed-refs","hash":"a4625796eee26974358d0e18ae41e91965c12dca","modified":1499270054052},{"_id":"themes/next/.git/index","hash":"acbb49caa7d55d63995054e7c6a55255452a2ea9","modified":1499505583563},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1499270054058},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"fdd63b77472612337309eb93ec415a059b90756b","modified":1499270054058},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1499270054058},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1499270054058},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1499270054058},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1499270054058},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1499270054058},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1499270054058},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1499270054058},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1499270054058},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1499270054058},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1499270054058},{"_id":"themes/next/languages/zh-Hans.yml","hash":"75ea7e8f77a73876ba40c5b7fc238346c79f8f1b","modified":1499366535066},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1499270054058},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1499270054058},{"_id":"themes/next/layout/_layout.swig","hash":"a44305f8fa7fe9c80eb50c0696a704424b589750","modified":1499270054058},{"_id":"themes/next/layout/archive.swig","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1499270054062},{"_id":"themes/next/layout/category.swig","hash":"82e7bc278559b4335ad974659104eaaf04863032","modified":1499270054062},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1499270054062},{"_id":"themes/next/layout/page.swig","hash":"baa667bc801349d5c4984c0f172973d3780400df","modified":1499270054062},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1499270054062},{"_id":"themes/next/layout/schedule.swig","hash":"f93c53f6fd5c712584f6efba6f770c30fa8a3e80","modified":1499270054062},{"_id":"themes/next/layout/tag.swig","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1499270054062},{"_id":"themes/next/source/404.html","hash":"1737472538c4208b2a7436eeb1ea66dd45fbe915","modified":1499350426520},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1499270054085},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1499270054085},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1499270054085},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1499270054062},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1499270054062},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499270054065},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1499270043952},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1499270043952},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1499270043952},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1499270043952},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1499270043952},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1499270043952},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1499270043952},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1499270043952},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1499270043952},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1499270043952},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1499270043952},{"_id":"themes/next/.git/logs/HEAD","hash":"308d90e7dbf54f0b9de08578bacb834052b280a1","modified":1499505583563},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1499270054058},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1499270054058},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1499270054058},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1499270054058},{"_id":"themes/next/layout/_macro/post.swig","hash":"dae072b356b4035e5f37210cc332002d7e465842","modified":1499449355666},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1499270054058},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"501b06d28150ec97a1a59e8fe071711cde317180","modified":1499366190000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1499270054058},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1499447105959},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1499270054058},{"_id":"themes/next/layout/_partials/head.swig","hash":"6a7eb93d8aa7d4baa472890bd666b921f449d8af","modified":1499270054058},{"_id":"themes/next/layout/_partials/header.swig","hash":"277fd0d13e87c3e38aad825a10e6b41b948b1e3c","modified":1499366432911},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1499270054058},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1499270054058},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1499270054058},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1499270054058},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1499270054058},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1499270054058},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1499270054058},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1499270054058},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1499270054062},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1499270054062},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1499270054062},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1499270054062},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1499270054062},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1499270054062},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1499270054062},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1499270054062},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1499270054062},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1499270054062},{"_id":"themes/next/scripts/tags/note.js","hash":"21b102db8a01c7b15ae2c0ea3ef3d4cf807ec6ed","modified":1499270054062},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1499270054065},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1499270054065},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1499270054065},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1499270054065},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1499270054065},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1499270054065},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1499270054065},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1499270054065},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1499270054065},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1499270054065},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1499270054065},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1499270054065},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1499270054065},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1499270054065},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1499270054065},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499270054058},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499270054058},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499270054062},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499270054062},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499270054065},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499270054065},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499270054065},{"_id":"themes/next/.git/objects/08/c6823b767859580bdfae0981e77a05b458fd85","hash":"a77dec570877592c997b5e3cea11559ad7bbbf75","modified":1499447100475},{"_id":"themes/next/.git/objects/05/2b0d8d9bddcdc42e38af0ea054b168cd8ad48a","hash":"8e5a734cd5cb23cd6a9712f5a3decf9c9c2e98f7","modified":1499446993422},{"_id":"themes/next/.git/objects/0e/9d5aea8de8d4bcc9320efe91117a60561a6e72","hash":"eb6bf6296517f5167f08832b24fac358116f1e60","modified":1499447100479},{"_id":"themes/next/.git/objects/10/660255499923f6344e066989b8460118fb3b05","hash":"0d9e41a3d14bd00573f049a1a915e635af9fffcc","modified":1499505568539},{"_id":"themes/next/.git/objects/17/232d01dda73b2505e73b7ca4a8e4b82c7eb51a","hash":"e94c7936fb3c44b3a4a98e436202f7fe95e999cf","modified":1499446993418},{"_id":"themes/next/.git/objects/10/7ccd0597d966fbb6a7885db3d6c67a5b59beaa","hash":"1641ee6319a00397920265f96f6e1e193c1dab65","modified":1499313449523},{"_id":"themes/next/.git/objects/1b/845705d399d02d561ce3aaad4cc9c69a79e29a","hash":"16638c72c815d52a50c394838ec144df9a30ce73","modified":1499447105965},{"_id":"themes/next/.git/objects/1c/65af91afb209117e3761629e543b5571af56f0","hash":"965315600ffb1952a6519f6c34d4d2036cd47881","modified":1499447105000},{"_id":"themes/next/.git/objects/27/9dba3cb06ac1146f57329eeafa8aa162d5689c","hash":"3b3f5cdd44c4c4183efbf791763ab5d04e1627bc","modified":1499447105965},{"_id":"themes/next/.git/objects/36/4cb0f4216b79521237b759c4ee8e7c87b6e727","hash":"0975594c7e9b7ee6fb23b2e564ee5113c68c9471","modified":1499447154872},{"_id":"themes/next/.git/objects/36/4e6ce22b307df8f1651e18ea252beab018de3c","hash":"26aadf2dda9b32bacb73a434354782382799b922","modified":1499313453433},{"_id":"themes/next/.git/objects/2a/e23fc7eb46f6e1482066b9f938df3c81df798a","hash":"92648385a05821d55c3369d013a1e1dde67b709a","modified":1499447105000},{"_id":"themes/next/.git/objects/39/4ab8c1104923397eb53339ccb9eba274964929","hash":"a13cda4f159516fceac4412c137a55bdc109d844","modified":1499447100479},{"_id":"themes/next/.git/objects/4b/16df286bc6b2832e26770806591766e7267d42","hash":"1bb113130584d8706395db240ffe1a1e588665dd","modified":1499447096529},{"_id":"themes/next/.git/objects/4b/fa6927ddd96431da5ca30b4a4a225cef9d6a3d","hash":"2a47cf7809bd78ca365949ffc0f1c19b783b43ac","modified":1499447096525},{"_id":"themes/next/.git/objects/50/8635f48ff34b041a8b765497a57cfdd8a2c63a","hash":"916ffa9e0fc20bd5c3d081b25ecee13a58b98164","modified":1499446993422},{"_id":"themes/next/.git/objects/56/3def506845b12336f655d0d7417fd64e1d4d8a","hash":"f0a795bcf975803bbfb989972103d6378c1e30c5","modified":1499446993422},{"_id":"themes/next/.git/objects/5a/5a781c81f655c77b3e7563053dee005a664cab","hash":"d650894c12d67654fd520965991d7d3ac339d311","modified":1499447096525},{"_id":"themes/next/.git/objects/5c/f2a59381beee7b5ef09ccbac7e4bd66e1dc97d","hash":"223cb8c9a930ed701321117e1808fb588264edbc","modified":1499505583563},{"_id":"themes/next/.git/objects/5f/f9f2c0c911af44c44a3fa4bf3f87ed213f581d","hash":"072269d8c337a63321b57854f3b9f47c3cfa0403","modified":1499447105000},{"_id":"themes/next/.git/objects/5e/acff3b47725c91f4d662d9d6241fc8e19aec3b","hash":"d4c929002834058cee724cf68382adf60a9a1e5a","modified":1499447105962},{"_id":"themes/next/.git/objects/63/45e775c1c749752925ddc54ea895edce978be2","hash":"a761d9506a9d0fb3189ead418513a64e1dc734b5","modified":1499447096525},{"_id":"themes/next/.git/objects/62/eb457c57203c1a73e73f68f324487742cc9316","hash":"9733b5941719659d77ce73d46266c0d62a693817","modified":1499447100479},{"_id":"themes/next/.git/objects/69/5f3f23b7346f5562cb12019037462d5e6ae5ef","hash":"a3692c854d84fed0ff55bf84cd41fdddb7b50b13","modified":1499505583563},{"_id":"themes/next/.git/objects/74/8a2530638bfc2c943e2c262eacdd28ace18721","hash":"e8073c4190f1273fcf130dfcf7a09e56ada471c7","modified":1499446993418},{"_id":"themes/next/.git/objects/7d/9e9df06e1ba0942ca7700942abc6317f3d6027","hash":"4b6e9be83e5467181d1e784affbf657fddea874c","modified":1499446993418},{"_id":"themes/next/.git/objects/78/7225a99e13380d8187382e3e3dbb1c7a0e18c4","hash":"8c13159cf3b461394ad30fe8ff02bf05197faca2","modified":1499313449523},{"_id":"themes/next/.git/objects/89/1a40379ce4457d46224f7069e454590a6a4b0f","hash":"d7b265223b92cd906662a6fc2fd6002e6469be7d","modified":1499447096529},{"_id":"themes/next/.git/objects/89/5e52243973886d383a63c9e0c359a3412f2487","hash":"3e4adf91ddfaa14d4662d5cf6acb76b5894e2545","modified":1499446993422},{"_id":"themes/next/.git/objects/89/e2f366140ba004b3c6fcaad74e512ae9331d11","hash":"7fb9b89bd5ebf128d8ca9cf933701d5fcbd89d72","modified":1499447105000},{"_id":"themes/next/.git/objects/94/49b48a1020c5e8c3d1af165d717903bd2b6c73","hash":"484f813d3bdf06a8bb178e33c68b457cb96a99ae","modified":1499447096525},{"_id":"themes/next/.git/objects/96/ea5d3d928c54292fea6b7d57adb5477998e464","hash":"274298cf17c9250b6368c580c9ebffe3e197970a","modified":1499446993422},{"_id":"themes/next/.git/objects/97/e7e5507ab558f8ab5301f7653ea2d2dd3f4228","hash":"cfede104a6367b4454bd8e787d04fe38c275182b","modified":1499447105962},{"_id":"themes/next/.git/objects/9a/52e356270b7f5538cf50fe0b3dd7c6b07c2278","hash":"2eadcfef6af911b9a97b45f07e972a3de6535d6c","modified":1499313453433},{"_id":"themes/next/.git/objects/9a/d8338700bfa83a1bf8b4b4510226dad9e716a3","hash":"dcea3c988fb234d4fe37c5a12c87d082f708cd1b","modified":1499447105962},{"_id":"themes/next/.git/objects/9e/1e1656302dddfe338effdf18f6b804c62851d1","hash":"f1260abb1cd6c18aeaaed65b6d51ca353ea310a0","modified":1499446993422},{"_id":"themes/next/.git/objects/a7/0d88d141892cbc4faae1e0d76d691eb64b949e","hash":"0163c715aecda1c98a2a3e7df71cf1334addb3df","modified":1499446993422},{"_id":"themes/next/.git/objects/a9/b07d81cd5ea343fdccbc211c01e9ef07cab509","hash":"59ab0e51e7a1c26dd3d24db70fa65e13ee7e16e4","modified":1499447105000},{"_id":"themes/next/.git/objects/ba/47ce9ddc285eb970d39366936e1c26a3703d60","hash":"e40966f23ab6a94f0052866c8faa2ef7b804fc24","modified":1499505583563},{"_id":"themes/next/.git/objects/bc/0054838243846225bb102fe34505542bd30d0e","hash":"14dafaaab2662985c6c5f86ed543ba270bf37027","modified":1499447096525},{"_id":"themes/next/.git/objects/bd/62293d2651aca77d45dc8601777edead23fa2e","hash":"71eafbe75519c22301a93dbfbf19b30027ac784d","modified":1499446993418},{"_id":"themes/next/.git/objects/be/cc2edb46468e86afbe44cc5cb2f06af6f45fc1","hash":"a310a8dabdd6530f3ec663366487718431b7006d","modified":1499447105962},{"_id":"themes/next/.git/objects/ca/591414a9df3621e43d904d86769645dbad2709","hash":"26621e8d6d4b0e10d9062a195c2570eb86953376","modified":1499446993422},{"_id":"themes/next/.git/objects/bf/fa663ea16576afb4e92d9a176852ba8393ef82","hash":"afccf3c5655ac15d35b0c80ec0a15e7e06b994ae","modified":1499447105000},{"_id":"themes/next/.git/objects/cb/f8bee23e03f9fbc034ef8fb4c107ea5867826c","hash":"6204c54b3639df46817574f736fe7489f7d6bf49","modified":1499447100475},{"_id":"themes/next/.git/objects/ce/41514a2bceb1694932fab496791cf81088914f","hash":"13fdeda27ed0baba91e19f1c0df17c0ac7a7b03e","modified":1499447100479},{"_id":"themes/next/.git/objects/d1/df695b8cfed0f90cec2eb01f6d6e31364eb7c1","hash":"8244f62e593a525b8f110be0c91cf8780de569f0","modified":1499447100475},{"_id":"themes/next/.git/objects/d2/376d65de0814cbf50054dba10ba43c53ff11a2","hash":"0904606cad7b95f64d7cb7c8f559a8e7298d9024","modified":1499446993418},{"_id":"themes/next/.git/objects/d3/afc43c036e11125b62963249537109c0fcb044","hash":"514feea69f838d1a880f1019bafe90c3c2c6f270","modified":1499313453433},{"_id":"themes/next/.git/objects/db/f3e8a853d625f08bfb81f762cd08da132574f2","hash":"9d72be7446d65c9f73f8b0f793607b6140289478","modified":1499446993422},{"_id":"themes/next/.git/objects/e1/4ade2c9c399c03fe491583b327e3a328f4e2f1","hash":"4c0b92a9a2d0b2f3bed3e890f4d470030eae222b","modified":1499505583563},{"_id":"themes/next/.git/objects/e2/d082fad0f9b2519c5116051125fd727a5a4dcb","hash":"40346007f522afcddb627e02842f98afdb98153d","modified":1499446993418},{"_id":"themes/next/.git/objects/e5/4e4d61027e06154d90108c93cf882cb644ef5e","hash":"fbe34e6c1dc8c71518b737163e6a61c86ac2b3fa","modified":1499313453433},{"_id":"themes/next/.git/objects/e8/feb3d457b05c2917d83aa04c12f0c4c8ef2506","hash":"50d173ed11eebb9bfd84f1efeeea0b38f5681c5f","modified":1499313453433},{"_id":"themes/next/.git/objects/ea/8f6a76405b1f2a467e94c4d64839dd34d38ba2","hash":"5b63cc4742ab091f5bb7c2ed15b180d7d05355d7","modified":1499446993418},{"_id":"themes/next/.git/objects/ec/387a68f2041a3b5398e4c811b930ce02ac7d5e","hash":"b3f9a025b1cbe1886f0e8138693e63a592f80c0b","modified":1499447105962},{"_id":"themes/next/.git/objects/ee/80ecf5eff73ec774466cc8751a942d768b7fca","hash":"8df9d6249a9aaeb62a13c05bee6047b0717752f5","modified":1499447105000},{"_id":"themes/next/.git/objects/ee/b1fa5eeefe458c0161fb41328d3a98cd79fbb0","hash":"7d363b9b487a8388efe43d9353d7b96e56a0f1db","modified":1499447100479},{"_id":"themes/next/.git/objects/f0/63f96394cb888fcbb80f67c68b88b0a78e02a8","hash":"139604b95cecc7885230b6d7ae44bbd74cf3b96b","modified":1499447105962},{"_id":"themes/next/.git/objects/f4/b606100406c683d69caa086384fe878683de7b","hash":"6cdce00cae0beafa78a38ef550649c2cf8a01699","modified":1499447105000},{"_id":"themes/next/.git/objects/f7/5f740266f3bc7ddecce4f5765c95039e4a38f1","hash":"e87c524473e79160f8faef777d0675f58f0e2876","modified":1499446993418},{"_id":"themes/next/.git/objects/fa/f5c8cd380be0b1844bf1c31e5709ed57cacc7f","hash":"91e427c160b1282dd0bd319b544dfec9719c3309","modified":1499447100479},{"_id":"themes/next/.git/objects/fc/a9f633d8c9469cc87c7575879876193f4a7c6c","hash":"82d178eb42ad1de241b1377c19c705bba59db878","modified":1499447105962},{"_id":"themes/next/.git/objects/fc/df30750cd68cedf6ae5dcbb3f0b8d1d1ce8f1c","hash":"2792777c11d86a1339d2275b1298f3b9d01875f1","modified":1499447096525},{"_id":"themes/next/.git/objects/fd/4e7566af6b194f89ab66103ec3befcaa378050","hash":"930c1123f99130176a664e5faa902ab1c30dc9dc","modified":1499505568539},{"_id":"themes/next/.git/refs/heads/master","hash":"ec0d610e9e87f0827c186231167e9a6b6b59afe3","modified":1499505583563},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1499270054058},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1499270054058},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1499270054058},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1499270054058},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1499270054058},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1499270054058},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1499270054058},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1499270054058},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1499270054058},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1499270054058},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1499270054058},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1499270054058},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1499270054058},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1499270054058},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1499447105959},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1499270054058},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1499447105959},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1499447105959},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1499270054058},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1499270054058},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1499270054058},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1499270054058},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1499270054058},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1499270054058},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1499270054058},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1499270054058},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1499270054058},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1499270054062},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1499270054062},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1499270054062},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1499270054062},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1499270054062},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1499270054062},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1499270054065},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1499270054065},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1499270054065},{"_id":"themes/next/source/css/_variables/base.styl","hash":"aaf39e490df82f74495e79e922f4ecaa6ccc4301","modified":1499446753681},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1499270054065},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1499270054065},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1499270054065},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1499270054065},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1499270054065},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1499270054065},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1499270054065},{"_id":"themes/next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1499270054065},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1499270054065},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1499270054065},{"_id":"themes/next/source/js/src/utils.js","hash":"0fcb80ec11e6df05ed1a07b9338bef2669f93a70","modified":1499270054065},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1499270054068},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1499270054068},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1499270054072},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1499270054072},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1499270054072},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1499270054072},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1499270054072},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1499270054072},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1499270054072},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1499270054072},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1499270054072},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1499270054072},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1499270054078},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1499270054078},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1499270054078},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1499270054078},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1499270054078},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1499270054078},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1499270054078},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1499270054078},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1499270054078},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1499270054078},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1499270054078},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1499270054078},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1499270054078},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1499270054078},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1499270054078},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1499270054078},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1499270054078},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1499270054078},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1499270054078},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1499270054078},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1499270054082},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1499270054082},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1499270054082},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1499270054082},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1499270054082},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1499270054082},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1499270054085},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1499270054085},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1499270054085},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1499270054058},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1499270054058},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1499270054078},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"308d90e7dbf54f0b9de08578bacb834052b280a1","modified":1499505583563},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"c3a62d5d48daf6b683b6168070542c0f648116ae","modified":1499446993428},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1499270054055},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1499270054062},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1499270054062},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1499270054062},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1499270054062},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1499270054062},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1499270054062},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1499270054062},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1499270054062},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1499306861466},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"fc50f348d43cf50a6e30208105ae476ea509efc5","modified":1499367652145},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1499270054065},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1499270054065},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1499270054068},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1499270054068},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1499270054072},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1499270054072},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1499270054072},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1499270054072},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1499270054072},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1499270054072},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1499270054082},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1499270054082},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1499270054068},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1499270054068},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1499270054078},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1499270054078},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1499270054085},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"9ebf1d469780d5bb63a8ad4da9972f4e10b6a5d4","modified":1499270054055},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"c59044b9625dad1f04e7a0229c2c5a38102a8aaf","modified":1499446993428},{"_id":"themes/next/.git/objects/pack/pack-aa5624b188af3a542276e9e5043a6bba4eb99eed.idx","hash":"bdfb836e2c2ffaf51231b019ce747dea18840982","modified":1499270053995},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"6260f85f33ec87aaa6684c2e8dee0a6feb4df0e0","modified":1499363980710},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"468bc734f47209096588ef1a8e55e60a3b12aa63","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"dfc86d37f5b580977d82af6ef835082d09a0c499","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1499447105959},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1499270054065},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1499270054065},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1499270054065},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1499270054065},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1499270054068},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1499270054072},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1499270054075},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1499270054075},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1499270054078},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1499270054068},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1499270054082},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1499270054078},{"_id":"themes/next/.git/objects/pack/pack-aa5624b188af3a542276e9e5043a6bba4eb99eed.pack","hash":"972d10e93cde2903d5329adb5e295e590997f67a","modified":1499447105000},{"_id":"public/atom.xml","hash":"64dd8d7473b2776c71a3256571eeeeabd09452bb","modified":1499963973080},{"_id":"public/search.xml","hash":"5b6f748f2b65c3adf6658b3df2a186fd9adbe614","modified":1499963973199},{"_id":"public/about/index.html","hash":"9222d10d5e475092cc2fb7b4f1e269285934cbfa","modified":1499963973252},{"_id":"public/categories/index.html","hash":"cb14aaa14bf2eb3c1ce033bb7e36a9e5fc2bd4f5","modified":1499963973252},{"_id":"public/tags/index.html","hash":"1d6189fb9f2f683c98afbec2dd9a983782cc77ca","modified":1499963973252},{"_id":"public/2017/07/13/prototypeAndProto/index.html","hash":"9cd67c6d485e96d59d9184c85c158b97c48225f0","modified":1499963973252},{"_id":"public/2017/07/13/Promise/index.html","hash":"01175b10c1f4eb0bb389b09a8ee5f8ebe05d3912","modified":1499963973253},{"_id":"public/2017/07/13/Class/index.html","hash":"8eac864f9cc35e631594c7f5eb014c118d9b8fa9","modified":1499963973253},{"_id":"public/2017/07/09/DestructuringAssignment/index.html","hash":"98666a2986e3cebc4b282cec7753a1976115d3cb","modified":1499963973253},{"_id":"public/2017/07/09/generatorAndIterator/index.html","hash":"9b414b609539a48e16b5c3e5add7aec80dcbd097","modified":1499963973253},{"_id":"public/2017/07/09/instanceTypeofContructor/index.html","hash":"ec2431cc0d2afb44385bfe84e41920810f5e60a9","modified":1499963973253},{"_id":"public/2017/05/05/Composite/index.html","hash":"c289e50b382821ca51b2e9f9ac99ab554ef74837","modified":1499963973253},{"_id":"public/2017/05/05/Decorator/index.html","hash":"1e02313bfd50a055b9851ef12ea60d48ba21bdea","modified":1499963973253},{"_id":"public/2017/05/05/Facade/index.html","hash":"9794a95bdc5ed3fe09974a1c68e7df486e0c304b","modified":1499963973253},{"_id":"public/2017/05/05/AbstractFactory/index.html","hash":"d30fbdf075c2ffb29ee0db541c9eef0fb05c7a44","modified":1499963973253},{"_id":"public/2017/05/05/Flyweight/index.html","hash":"1326cd3de583bac01de78a82634d056bc91ff074","modified":1499963973253},{"_id":"public/2017/05/05/Interpreter/index.html","hash":"f80989f48fe9534a05f299ce96197a8098bd6e82","modified":1499963973253},{"_id":"public/2017/05/05/Iterator/index.html","hash":"b723317c8ecea7e6b4267c9404503644559a0d87","modified":1499963973253},{"_id":"public/2017/05/05/Observer/index.html","hash":"294123025e09612fed5f1ac722f851e1b44e2b6e","modified":1499963973253},{"_id":"public/2017/05/05/Bridge/index.html","hash":"4550410f45bca0df0ecfe2b9ece358227c0b5c9f","modified":1499963973253},{"_id":"public/2017/05/05/Prototype/index.html","hash":"253b036a8428aba2220b6577c81b952efa7fa0b7","modified":1499963973253},{"_id":"public/2017/05/05/Proxy/index.html","hash":"8dfd8c7ab4b629a7aead74cb1df5ac8c4f7f282d","modified":1499963973253},{"_id":"public/2017/05/05/Builder/index.html","hash":"74a8bf71ed3f10881e2af0e6a1e339d94a473d18","modified":1499963973253},{"_id":"public/2017/05/05/Singleton/index.html","hash":"d9b1248431133f260b45ef0152154eea435560db","modified":1499963973253},{"_id":"public/2017/05/05/SimpleFactory/index.html","hash":"0b3478339d5229add727a7f501fe12fef0d8f49f","modified":1499963973253},{"_id":"public/2017/05/05/State/index.html","hash":"69e481175f6ce01dc12e71e678026abc08a57ca8","modified":1499963973253},{"_id":"public/2017/05/05/Strategy/index.html","hash":"c3b813ba28e941965f29194a8de5d40b208f6399","modified":1499963973253},{"_id":"public/2017/05/05/TemplateMethod/index.html","hash":"5375021ec2e197be9e9697de44c645d14b9012da","modified":1499963973253},{"_id":"public/2017/05/05/Visitor/index.html","hash":"bdce46d51d7d317a1285bf79742d0702cd24aa4c","modified":1499963973253},{"_id":"public/2017/05/05/chainOfResponsibility/index.html","hash":"9b7f152ab326fc29ed29bf92d3a9f89ba2422bcd","modified":1499963973253},{"_id":"public/2017/05/05/Command/index.html","hash":"6af579b1856308633019d1ed1baac11169bce446","modified":1499963973253},{"_id":"public/2017/05/05/Adapter/index.html","hash":"75bff4416a6c9fba0d9b86486dba716e8a13537e","modified":1499963973253},{"_id":"public/2017/05/05/Mediator/index.html","hash":"e9d98f1b5717ae620d3ae9f787b798a2d687f4de","modified":1499963973254},{"_id":"public/archives/index.html","hash":"e1969ad392322a0aa3dd8914cc93d1e325126d2b","modified":1499963973254},{"_id":"public/archives/page/2/index.html","hash":"97d3f988c675de6ae35a8b729a8a7cf854d2e6de","modified":1499963973254},{"_id":"public/archives/page/3/index.html","hash":"46773861f0430bb40de98968e2d1ea92a82435cd","modified":1499963973254},{"_id":"public/archives/2017/index.html","hash":"d9a1b79ae4f097d63420ff57f508a490b4d12771","modified":1499963973254},{"_id":"public/archives/2017/page/2/index.html","hash":"e8de39c3f4926a8c579b3e78f2c995110defb919","modified":1499963973254},{"_id":"public/archives/2017/page/3/index.html","hash":"01371c6f97b6f0911039b4ed87bec802718a6b01","modified":1499963973254},{"_id":"public/archives/2017/05/index.html","hash":"a3bddb9cea8af2da0f49126c3af7e4a9ce47c752","modified":1499963973254},{"_id":"public/archives/2017/05/page/2/index.html","hash":"7b11b67fc6aedff6e43d05f02d88b4e12e235e2c","modified":1499963973254},{"_id":"public/archives/2017/05/page/3/index.html","hash":"53d06dac6968f04c1c88d2711bd4dea72a4e16a7","modified":1499963973255},{"_id":"public/archives/2017/07/index.html","hash":"89828320105136e92d89f8de2c6655bdbe40d3d7","modified":1499963973255},{"_id":"public/categories/design-pattern/index.html","hash":"b17499b334206cad2b7c24be02c61922020df63a","modified":1499963973255},{"_id":"public/categories/design-pattern/page/2/index.html","hash":"28ce44145206b836ac6dd68cb569e02f7bdd246a","modified":1499963973255},{"_id":"public/categories/design-pattern/page/3/index.html","hash":"54be489159555b5785ec636526aac13ac6abf4f2","modified":1499963973255},{"_id":"public/categories/design-pattern/Creational-Patterns/index.html","hash":"479a97b1b6ae3aa8b8d36202a506f06f6a8fa2ea","modified":1499963973255},{"_id":"public/categories/design-pattern/Structural-Patterns/index.html","hash":"49fbc8530c190043f74cf77fff254c39fc7ee3a2","modified":1499963973255},{"_id":"public/categories/design-pattern/Behavioral-Patterns/index.html","hash":"40048d5ac6585e3b37adc499bf1e0420b0247688","modified":1499963973255},{"_id":"public/categories/javascript/index.html","hash":"8bbfa21cdab36d523889f5dd1f3a1aa94aba147f","modified":1499963973255},{"_id":"public/categories/javascript/MDN/index.html","hash":"46e91bfa854f3f612d256b0ecf877b43ab69fe82","modified":1499963973255},{"_id":"public/index.html","hash":"758b9302c893762c69754b5f822448cd53b06817","modified":1499963973255},{"_id":"public/page/2/index.html","hash":"cfc189bb5f10d9b5cde7bae44237e6521cfd5854","modified":1499963973255},{"_id":"public/page/3/index.html","hash":"347826be33978e8ec40efdc3e2bbd89d6b56fcff","modified":1499963973255},{"_id":"public/tags/javasctipt/index.html","hash":"afd6a644c77a38742b25e32f07217616ac9cbc60","modified":1499963973255},{"_id":"public/tags/javasctipt/page/2/index.html","hash":"96ae3838190321f819cb4c55cb6882115413d84c","modified":1499963973255},{"_id":"public/tags/javasctipt/page/3/index.html","hash":"9cb85fdb30487803fbf53a255b1c3c201d7d0c7d","modified":1499963973255},{"_id":"public/tags/适配器模式/index.html","hash":"fd1b52db753a87c1156baece0d6e959be26dae97","modified":1499963973255},{"_id":"public/tags/桥接模式/index.html","hash":"8607f722775565ec6d175e41dda85fd2833d80e5","modified":1499963973255},{"_id":"public/tags/抽象工厂模式/index.html","hash":"c5ea72ef209c6e125c0956f0b3c397a1ba3f1715","modified":1499963973255},{"_id":"public/tags/建造者模式/index.html","hash":"5f8a8352f3a30652a7415d08904f3b85d89e06b1","modified":1499963973255},{"_id":"public/tags/命令模式/index.html","hash":"50c6ff6104b4ca861085b4b613822c328fe07f89","modified":1499963973255},{"_id":"public/tags/class/index.html","hash":"8750f58cc03c3557576c9881f74c1ac67d09235a","modified":1499963973255},{"_id":"public/tags/组合模式/index.html","hash":"b7b2f952004e1da901ae2eed4f61105c59022477","modified":1499963973255},{"_id":"public/tags/装饰模式/index.html","hash":"0c3484e3408f46af9cdf6943cab206d8153d81fe","modified":1499963973255},{"_id":"public/tags/外观模式/index.html","hash":"8ae4ecd1f7a193ebcf6f438aa8919be19ce858fb","modified":1499963973255},{"_id":"public/tags/解构赋值/index.html","hash":"e82c1f5e9e614c366cfd915b2c041d49df64b94b","modified":1499963973255},{"_id":"public/tags/享元模式/index.html","hash":"7ef6edeee2db97fcd9023b0766d3a27de927ea50","modified":1499963973255},{"_id":"public/tags/解析器模式/index.html","hash":"db5881ba1dbf2d907524558c9fa56c35f9d44a3f","modified":1499963973256},{"_id":"public/tags/迭代器/index.html","hash":"e3cd65a9021fc485198e871728def9c138741e19","modified":1499963973256},{"_id":"public/tags/观察者模式/index.html","hash":"0efa5caaec558fc4d5a19a5afa4a90a3df79405e","modified":1499963973256},{"_id":"public/tags/原型模式/index.html","hash":"dd3182481ec981fb4af085bd11cd97def2c64cb0","modified":1499963973256},{"_id":"public/tags/代理模式/index.html","hash":"3ef4691c8d53d4b5fb51f445765c778596644d1d","modified":1499963973256},{"_id":"public/tags/Promise/index.html","hash":"ddb88a5ff301aeac0ac8574c686775020f6d5d5c","modified":1499963973256},{"_id":"public/tags/单例模式/index.html","hash":"fc86fcd6db2f8cad75705f8d459e010ee5bbcc6d","modified":1499963973256},{"_id":"public/tags/中介模式/index.html","hash":"de338a1e87aff2c0103a9f6a71595fcc20735ae1","modified":1499963973256},{"_id":"public/tags/简单工厂模式/index.html","hash":"0d94b3bc0610c8e9caa169fad120186615c94ed2","modified":1499963973256},{"_id":"public/tags/状态模式/index.html","hash":"4d0297a4772e4b2684ec0a22edbd5f4d3911c922","modified":1499963973256},{"_id":"public/tags/策略模式/index.html","hash":"a43c91be39dce197c5100292cc62db83915cc7f3","modified":1499963973256},{"_id":"public/tags/模板方法模式/index.html","hash":"c41b149a5094841cc59e266a383dd41c75e9f5cf","modified":1499963973256},{"_id":"public/tags/访问者模式/index.html","hash":"6745b52ebb516cb1e0b265051c7998f684ce12f7","modified":1499963973256},{"_id":"public/tags/责任链模式/index.html","hash":"a90c09459951e24a944b4a1b7af41a693108220f","modified":1499963973256},{"_id":"public/tags/生成器/index.html","hash":"fd2c0e3d57b8e55e4ebdc65be7b7429cf22ac91a","modified":1499963973256},{"_id":"public/tags/js对象属性判断/index.html","hash":"be959a7a8eb56493b297ca35736716320614825c","modified":1499963973256},{"_id":"public/tags/prototype和-proto/index.html","hash":"7c7dc73b2e7a843ff355abc71357656a4c707273","modified":1499963973256},{"_id":"public/favicon.ico","hash":"c5ae214140b7c1233b89472502f057342979dfd2","modified":1499963973276},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1499963973276},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1499963973276},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1499963973276},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1499963973276},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1499963973276},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1499963973276},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1499963973276},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1499963973276},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1499963973276},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1499963973276},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1499963973277},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1499963973277},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1499963973277},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1499963973277},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1499963973278},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1499963973278},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1499963973278},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1499963973278},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1499963973278},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1499963973278},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1499963973278},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1499963973278},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1499963973278},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1499963973278},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1499963973278},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1499963973278},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1499963973278},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1499963973278},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1499963973803},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1499963973819},{"_id":"public/404.html","hash":"1737472538c4208b2a7436eeb1ea66dd45fbe915","modified":1499963973836},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1499963973836},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1499963973836},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1499963973836},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1499963973836},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1499963973836},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1499963973837},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1499963973837},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1499963973837},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1499963973837},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1499963973837},{"_id":"public/js/src/utils.js","hash":"0fcb80ec11e6df05ed1a07b9338bef2669f93a70","modified":1499963973837},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1499963973837},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1499963973837},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1499963973837},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1499963973837},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1499963973839},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1499963973839},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1499963973840},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1499963973840},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1499963973840},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1499963973840},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1499963973840},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1499963973840},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1499963973840},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1499963973840},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1499963973840},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1499963973840},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1499963973840},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1499963973840},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1499963973840},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1499963973840},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1499963973840},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1499963973840},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1499963973840},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1499963973840},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1499963973840},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1499963973840},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1499963973840},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1499963973840},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1499963973841},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1499963973841},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1499963973841},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1499963973841},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1499963973841},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1499963973841},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1499963973841},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1499963973841},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1499963973841},{"_id":"public/css/main.css","hash":"e4261878dc52617b27085fde461bc30c1df557eb","modified":1499963973841},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1499963973841},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1499963973841},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1499963973841},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1499963973841},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1499963973841},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1499963973841},{"_id":"public/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1499963973841},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1499963973841},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1499963973841},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1499963973841},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1499963973841},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1499963973841},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1499963973842},{"_id":"public/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1499963973842},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1499963973842},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1499963973842},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1499963973842},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1499963973842},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1499963973842},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1499963973842},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1499963973842},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1499963973881}],"Category":[{"name":"design-pattern","_id":"cj52nth670004e0mw86tjtstr"},{"name":"Creational Patterns","parent":"cj52nth670004e0mw86tjtstr","_id":"cj52nth6s000je0mwa2bc10q2"},{"name":"Structural Patterns","parent":"cj52nth670004e0mw86tjtstr","_id":"cj52nth6v000oe0mw5iwfijy4"},{"name":"Behavioral Patterns","parent":"cj52nth670004e0mw86tjtstr","_id":"cj52nth6y000ve0mwwewjjppx"},{"name":"javascript","_id":"cj52nth740011e0mwz4bbeucz"},{"name":"MDN","parent":"cj52nth740011e0mwz4bbeucz","_id":"cj52nth7x002xe0mwofif4cop"}],"Data":[],"Page":[{"title":"about","date":"2017-07-06T13:48:32.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-07-06 21:48:32\n---\n","updated":"2017-07-08T08:04:09.423Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj52nth620001e0mwaqr3q3n7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2017-07-06T14:07:59.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-07-06 22:07:59\ntype: 'categories'\ncomments: false\n---\n","updated":"2017-07-08T08:04:09.423Z","path":"categories/index.html","layout":"page","_id":"cj52nth650003e0mwiz7fxhcj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"All tags","type":"tags","comments":0,"date":"2017-07-06T14:12:57.000Z","_content":"","source":"tags/index.md","raw":"---\n  title: All tags\n  type: \"tags\"\n  comments: false\n  date: 2017-07-06 22:12:57\n---\n","updated":"2017-07-08T08:04:09.423Z","path":"tags/index.html","layout":"page","_id":"cj52nth6b0007e0mwkowjcxlj","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"适配器模式(Adapter)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 适配器模式的定义\n- 适配器模式：用于将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。\n\n### 适配器模式包含四个角色：\n- Target：目标抽象类-定义客户要用的特定领域的接口\n- Adapter：适配器类-作为一个转换器，对适配者和抽象目标类进行适配，它是适配器模式的核心\n- Adaptee：适配者类-定义了一个已经存在的接口，这个接口需要适配\n- Client：客户类-在客户类中针对目标抽象类（Target）进行编程，调用在目标抽象类中定义的业务方法\n\n---\n\n### ES6实现\n``` js\nclass Target {\n    constructor(type) {\n        console.log('Target Class created!');\n        let result = undefined;\n\n        switch (type) {\n            case 'adapter':\n                result = new AdapterImpl();\n                break\n            default:\n                result = undefined;\n        }\n        return result;\n    }\n\n    request() {\n        console.log('Target.request invoked');\n    }\n}\n\nclass Adapter {\n    constructor() {\n        console.log('Adapter Class created');\n    }\n\n    specificRequest() {\n        console.log('Adapter.specificRequest invoked');\n    }\n}\n\nclass AdapterImpl extends Adapter {\n    constructor() {\n        super()\n        console.log('AdapterImpl Class created');\n    }\n\n    request() {\n        console.log('AdapterImpl.request invoked');\n        return this.specificRequest();\n    }\n}\n\nvar f = new Target(\"adapter\");\nf.request();\n```\n---\n\n### Typescript实现\n``` js\nnamespace AdapterPattern {\n    export class Adaptee {\n        public method(): void {\n            console.log(\"`method` of Adaptee is being called\");\n        }\n    }\n\n    export interface Target {\n        call(): void;\n    }\n\n    export class Adapter implements Target {\n        public call(): void {\n            console.log(\"Adapter's `call` method is being called\");\n            var adaptee: Adaptee = new Adaptee();\n            adaptee.method();\n        }\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Adapter.md","raw":"---\ntitle: 适配器模式(Adapter)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Structural Patterns]\ntags: [javasctipt, 适配器模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 适配器模式的定义\n- 适配器模式：用于将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。\n\n### 适配器模式包含四个角色：\n- Target：目标抽象类-定义客户要用的特定领域的接口\n- Adapter：适配器类-作为一个转换器，对适配者和抽象目标类进行适配，它是适配器模式的核心\n- Adaptee：适配者类-定义了一个已经存在的接口，这个接口需要适配\n- Client：客户类-在客户类中针对目标抽象类（Target）进行编程，调用在目标抽象类中定义的业务方法\n\n---\n\n### ES6实现\n``` js\nclass Target {\n    constructor(type) {\n        console.log('Target Class created!');\n        let result = undefined;\n\n        switch (type) {\n            case 'adapter':\n                result = new AdapterImpl();\n                break\n            default:\n                result = undefined;\n        }\n        return result;\n    }\n\n    request() {\n        console.log('Target.request invoked');\n    }\n}\n\nclass Adapter {\n    constructor() {\n        console.log('Adapter Class created');\n    }\n\n    specificRequest() {\n        console.log('Adapter.specificRequest invoked');\n    }\n}\n\nclass AdapterImpl extends Adapter {\n    constructor() {\n        super()\n        console.log('AdapterImpl Class created');\n    }\n\n    request() {\n        console.log('AdapterImpl.request invoked');\n        return this.specificRequest();\n    }\n}\n\nvar f = new Target(\"adapter\");\nf.request();\n```\n---\n\n### Typescript实现\n``` js\nnamespace AdapterPattern {\n    export class Adaptee {\n        public method(): void {\n            console.log(\"`method` of Adaptee is being called\");\n        }\n    }\n\n    export interface Target {\n        call(): void;\n    }\n\n    export class Adapter implements Target {\n        public call(): void {\n            console.log(\"Adapter's `call` method is being called\");\n            var adaptee: Adaptee = new Adaptee();\n            adaptee.method();\n        }\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Adapter","published":1,"updated":"2017-07-08T08:04:09.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52nth5x0000e0mwbjwq193l","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"适配器模式的定义\"><a href=\"#适配器模式的定义\" class=\"headerlink\" title=\"适配器模式的定义\"></a>适配器模式的定义</h3><ul>\n<li>适配器模式：用于将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</li>\n</ul>\n<h3 id=\"适配器模式包含四个角色：\"><a href=\"#适配器模式包含四个角色：\" class=\"headerlink\" title=\"适配器模式包含四个角色：\"></a>适配器模式包含四个角色：</h3><ul>\n<li>Target：目标抽象类-定义客户要用的特定领域的接口</li>\n<li>Adapter：适配器类-作为一个转换器，对适配者和抽象目标类进行适配，它是适配器模式的核心</li>\n<li>Adaptee：适配者类-定义了一个已经存在的接口，这个接口需要适配</li>\n<li>Client：客户类-在客户类中针对目标抽象类（Target）进行编程，调用在目标抽象类中定义的业务方法</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Target</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(type) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Target Class created!'</span>);</div><div class=\"line\">        <span class=\"keyword\">let</span> result = <span class=\"literal\">undefined</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">switch</span> (type) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'adapter'</span>:</div><div class=\"line\">                result = <span class=\"keyword\">new</span> AdapterImpl();</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                result = <span class=\"literal\">undefined</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    request() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Target.request invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Adapter Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    specificRequest() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Adapter.specificRequest invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdapterImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">Adapter</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AdapterImpl Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    request() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AdapterImpl.request invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.specificRequest();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> Target(<span class=\"string\">\"adapter\"</span>);</div><div class=\"line\">f.request();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">namespace AdapterPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adaptee</span> </span>&#123;</div><div class=\"line\">        public method(): <span class=\"keyword\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`method` of Adaptee is being called\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> interface Target &#123;</div><div class=\"line\">        call(): <span class=\"keyword\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"title\">implements</span> <span class=\"title\">Target</span> </span>&#123;</div><div class=\"line\">        public call(): <span class=\"keyword\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Adapter's `call` method is being called\"</span>);</div><div class=\"line\">            <span class=\"keyword\">var</span> adaptee: Adaptee = <span class=\"keyword\">new</span> Adaptee();</div><div class=\"line\">            adaptee.method();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"适配器模式的定义\"><a href=\"#适配器模式的定义\" class=\"headerlink\" title=\"适配器模式的定义\"></a>适配器模式的定义</h3><ul>\n<li>适配器模式：用于将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</li>\n</ul>\n<h3 id=\"适配器模式包含四个角色：\"><a href=\"#适配器模式包含四个角色：\" class=\"headerlink\" title=\"适配器模式包含四个角色：\"></a>适配器模式包含四个角色：</h3><ul>\n<li>Target：目标抽象类-定义客户要用的特定领域的接口</li>\n<li>Adapter：适配器类-作为一个转换器，对适配者和抽象目标类进行适配，它是适配器模式的核心</li>\n<li>Adaptee：适配者类-定义了一个已经存在的接口，这个接口需要适配</li>\n<li>Client：客户类-在客户类中针对目标抽象类（Target）进行编程，调用在目标抽象类中定义的业务方法</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Target</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(type) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Target Class created!'</span>);</div><div class=\"line\">        <span class=\"keyword\">let</span> result = <span class=\"literal\">undefined</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">switch</span> (type) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'adapter'</span>:</div><div class=\"line\">                result = <span class=\"keyword\">new</span> AdapterImpl();</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                result = <span class=\"literal\">undefined</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    request() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Target.request invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Adapter Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    specificRequest() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Adapter.specificRequest invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdapterImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">Adapter</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AdapterImpl Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    request() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AdapterImpl.request invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.specificRequest();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> Target(<span class=\"string\">\"adapter\"</span>);</div><div class=\"line\">f.request();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">namespace AdapterPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adaptee</span> </span>&#123;</div><div class=\"line\">        public method(): <span class=\"keyword\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`method` of Adaptee is being called\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> interface Target &#123;</div><div class=\"line\">        call(): <span class=\"keyword\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"title\">implements</span> <span class=\"title\">Target</span> </span>&#123;</div><div class=\"line\">        public call(): <span class=\"keyword\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Adapter's `call` method is being called\"</span>);</div><div class=\"line\">            <span class=\"keyword\">var</span> adaptee: Adaptee = <span class=\"keyword\">new</span> Adaptee();</div><div class=\"line\">            adaptee.method();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"桥接模式(Bridge)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 桥接模式的定义\n- 桥接模式：模式将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体(Handle and Body)模式或接口(Interface)模式。\n\n### 桥接模式包含四个角色：\n- Abstraction-抽象类中定义了一个实现类接口类型的对象并可以维护该对象；\n- RefinedAbstraction-扩充抽象类扩充由抽象类定义的接口，它实现了在抽象类中定义的抽象业务方法，在扩充抽象类中可以调用在实现类接口中定义的业务方法；\n- Implementor实现类接口定义了实现类的接口，实现类接口仅提供基本操作，而抽象类定义的接口可能会做更多更复杂的操作；\n- ConcreteImplementor具体实现类实现了实现类接口并且具体实现它，在不同的具体实现类中提供基本操作的不同实现，在程序运行时，具体实现类对象将替换其父类对象，提供给客户端具体的业务操作方法。\n---\n\n### ES6实现\n``` js\nclass Abstraction {\n    constructor() {\n        console.log('Abstraction Class created');\n    }\n\n    operation() {\n        console.log('Abstraction.operation invoked');\n        this.imp.operationImp();\n    }\n}\n\nclass RefinedAbstraction extends Abstraction {\n    constructor() {\n        super()\n        console.log('RefinedAbstraction Class created');\n    }\n\n    setImp(imp) {\n        console.log('RefinedAbstraction.setImp invoked');\n        this.imp = imp\n    }\n}\n\nclass Implementor {\n    constructor() {\n        console.log('Implementor Class created');\n    }\n\n    operationImp() {\n        console.log('Implementor.operationImp invoked');\n    }\n}\n\nclass ConcreteImplementorA extends Implementor {\n    constructor() {\n        super()\n        console.log('ConcreteImplementorA Class created');\n    }\n\n    operationImp() {\n        console.log('ConcreteImplementorA.operationImp invoked');\n    }\n}\n\nclass ConcreteImplementorB extends Implementor {\n    constructor() {\n        super()\n        console.log('ConcreteImplementorB Class created');\n    }\n\n    operationImp() {\n        console.log('ConcreteImplementorB.operationImp invoked');\n    }\n}\n\nvar abstraction = new RefinedAbstraction();\nabstraction.setImp(new ConcreteImplementorA());\nabstraction.operation();\nabstraction.setImp(new ConcreteImplementorB());\nabstraction.operation();\n```\n---\n\n### Typescript实现\n``` ts\nclass Abstraction {\n    constructor() {\n        console.log('Abstraction Class created');\n    }\n\n    operation() {\n        console.log('Abstraction.operation invoked');\n        this.imp.operationImp();\n    }\n}\n\nclass RefinedAbstraction extends Abstraction {\n    constructor() {\n        super()\n        console.log('RefinedAbstraction Class created');\n    }\n\n    setImp(imp) {\n        console.log('RefinedAbstraction.setImp invoked');\n        this.imp = imp\n    }\n}\n\nclass Implementor {\n    constructor() {\n        console.log('Implementor Class created');\n    }\n\n    operationImp() {\n        console.log('Implementor.operationImp invoked');\n    }\n}\n\nclass ConcreteImplementorA extends Implementor {\n    constructor() {\n        super()\n        console.log('ConcreteImplementorA Class created');\n    }\n\n    operationImp() {\n        console.log('ConcreteImplementorA.operationImp invoked');\n    }\n}\n\nclass ConcreteImplementorB extends Implementor {\n    constructor() {\n        super()\n        console.log('ConcreteImplementorB Class created');\n    }\n\n    operationImp() {\n        console.log('ConcreteImplementorB.operationImp invoked');\n    }\n}\n\nvar abstraction = new RefinedAbstraction();\nabstraction.setImp(new ConcreteImplementorA());\nabstraction.operation();\nabstraction.setImp(new ConcreteImplementorB());\nabstraction.operation();\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Bridge.md","raw":"---\ntitle: 桥接模式(Bridge)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Structural Patterns]\ntags: [javasctipt, 桥接模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 桥接模式的定义\n- 桥接模式：模式将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体(Handle and Body)模式或接口(Interface)模式。\n\n### 桥接模式包含四个角色：\n- Abstraction-抽象类中定义了一个实现类接口类型的对象并可以维护该对象；\n- RefinedAbstraction-扩充抽象类扩充由抽象类定义的接口，它实现了在抽象类中定义的抽象业务方法，在扩充抽象类中可以调用在实现类接口中定义的业务方法；\n- Implementor实现类接口定义了实现类的接口，实现类接口仅提供基本操作，而抽象类定义的接口可能会做更多更复杂的操作；\n- ConcreteImplementor具体实现类实现了实现类接口并且具体实现它，在不同的具体实现类中提供基本操作的不同实现，在程序运行时，具体实现类对象将替换其父类对象，提供给客户端具体的业务操作方法。\n---\n\n### ES6实现\n``` js\nclass Abstraction {\n    constructor() {\n        console.log('Abstraction Class created');\n    }\n\n    operation() {\n        console.log('Abstraction.operation invoked');\n        this.imp.operationImp();\n    }\n}\n\nclass RefinedAbstraction extends Abstraction {\n    constructor() {\n        super()\n        console.log('RefinedAbstraction Class created');\n    }\n\n    setImp(imp) {\n        console.log('RefinedAbstraction.setImp invoked');\n        this.imp = imp\n    }\n}\n\nclass Implementor {\n    constructor() {\n        console.log('Implementor Class created');\n    }\n\n    operationImp() {\n        console.log('Implementor.operationImp invoked');\n    }\n}\n\nclass ConcreteImplementorA extends Implementor {\n    constructor() {\n        super()\n        console.log('ConcreteImplementorA Class created');\n    }\n\n    operationImp() {\n        console.log('ConcreteImplementorA.operationImp invoked');\n    }\n}\n\nclass ConcreteImplementorB extends Implementor {\n    constructor() {\n        super()\n        console.log('ConcreteImplementorB Class created');\n    }\n\n    operationImp() {\n        console.log('ConcreteImplementorB.operationImp invoked');\n    }\n}\n\nvar abstraction = new RefinedAbstraction();\nabstraction.setImp(new ConcreteImplementorA());\nabstraction.operation();\nabstraction.setImp(new ConcreteImplementorB());\nabstraction.operation();\n```\n---\n\n### Typescript实现\n``` ts\nclass Abstraction {\n    constructor() {\n        console.log('Abstraction Class created');\n    }\n\n    operation() {\n        console.log('Abstraction.operation invoked');\n        this.imp.operationImp();\n    }\n}\n\nclass RefinedAbstraction extends Abstraction {\n    constructor() {\n        super()\n        console.log('RefinedAbstraction Class created');\n    }\n\n    setImp(imp) {\n        console.log('RefinedAbstraction.setImp invoked');\n        this.imp = imp\n    }\n}\n\nclass Implementor {\n    constructor() {\n        console.log('Implementor Class created');\n    }\n\n    operationImp() {\n        console.log('Implementor.operationImp invoked');\n    }\n}\n\nclass ConcreteImplementorA extends Implementor {\n    constructor() {\n        super()\n        console.log('ConcreteImplementorA Class created');\n    }\n\n    operationImp() {\n        console.log('ConcreteImplementorA.operationImp invoked');\n    }\n}\n\nclass ConcreteImplementorB extends Implementor {\n    constructor() {\n        super()\n        console.log('ConcreteImplementorB Class created');\n    }\n\n    operationImp() {\n        console.log('ConcreteImplementorB.operationImp invoked');\n    }\n}\n\nvar abstraction = new RefinedAbstraction();\nabstraction.setImp(new ConcreteImplementorA());\nabstraction.operation();\nabstraction.setImp(new ConcreteImplementorB());\nabstraction.operation();\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Bridge","published":1,"updated":"2017-07-08T08:04:09.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52nth640002e0mwg9bzagsx","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"桥接模式的定义\"><a href=\"#桥接模式的定义\" class=\"headerlink\" title=\"桥接模式的定义\"></a>桥接模式的定义</h3><ul>\n<li>桥接模式：模式将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体(Handle and Body)模式或接口(Interface)模式。</li>\n</ul>\n<h3 id=\"桥接模式包含四个角色：\"><a href=\"#桥接模式包含四个角色：\" class=\"headerlink\" title=\"桥接模式包含四个角色：\"></a>桥接模式包含四个角色：</h3><ul>\n<li>Abstraction-抽象类中定义了一个实现类接口类型的对象并可以维护该对象；</li>\n<li>RefinedAbstraction-扩充抽象类扩充由抽象类定义的接口，它实现了在抽象类中定义的抽象业务方法，在扩充抽象类中可以调用在实现类接口中定义的业务方法；</li>\n<li>Implementor实现类接口定义了实现类的接口，实现类接口仅提供基本操作，而抽象类定义的接口可能会做更多更复杂的操作；</li>\n<li>ConcreteImplementor具体实现类实现了实现类接口并且具体实现它，在不同的具体实现类中提供基本操作的不同实现，在程序运行时，具体实现类对象将替换其父类对象，提供给客户端具体的业务操作方法。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Abstraction</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Abstraction Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Abstraction.operation invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.imp.operationImp();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefinedAbstraction</span> <span class=\"keyword\">extends</span> <span class=\"title\">Abstraction</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'RefinedAbstraction Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setImp(imp) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'RefinedAbstraction.setImp invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.imp = imp</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Implementor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Implementor Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationImp() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Implementor.operationImp invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteImplementorA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Implementor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorA Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationImp() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorA.operationImp invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteImplementorB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Implementor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorB Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationImp() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorB.operationImp invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> abstraction = <span class=\"keyword\">new</span> RefinedAbstraction();</div><div class=\"line\">abstraction.setImp(<span class=\"keyword\">new</span> ConcreteImplementorA());</div><div class=\"line\">abstraction.operation();</div><div class=\"line\">abstraction.setImp(<span class=\"keyword\">new</span> ConcreteImplementorB());</div><div class=\"line\">abstraction.operation();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Abstraction &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Abstraction Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Abstraction.operation invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.imp.operationImp();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> RefinedAbstraction <span class=\"keyword\">extends</span> Abstraction &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'RefinedAbstraction Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setImp(imp) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'RefinedAbstraction.setImp invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.imp = imp</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Implementor &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Implementor Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationImp() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Implementor.operationImp invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> ConcreteImplementorA <span class=\"keyword\">extends</span> Implementor &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorA Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationImp() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorA.operationImp invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> ConcreteImplementorB <span class=\"keyword\">extends</span> Implementor &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorB Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationImp() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorB.operationImp invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> abstraction = <span class=\"keyword\">new</span> RefinedAbstraction();</div><div class=\"line\">abstraction.setImp(<span class=\"keyword\">new</span> ConcreteImplementorA());</div><div class=\"line\">abstraction.operation();</div><div class=\"line\">abstraction.setImp(<span class=\"keyword\">new</span> ConcreteImplementorB());</div><div class=\"line\">abstraction.operation();</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"桥接模式的定义\"><a href=\"#桥接模式的定义\" class=\"headerlink\" title=\"桥接模式的定义\"></a>桥接模式的定义</h3><ul>\n<li>桥接模式：模式将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体(Handle and Body)模式或接口(Interface)模式。</li>\n</ul>\n<h3 id=\"桥接模式包含四个角色：\"><a href=\"#桥接模式包含四个角色：\" class=\"headerlink\" title=\"桥接模式包含四个角色：\"></a>桥接模式包含四个角色：</h3><ul>\n<li>Abstraction-抽象类中定义了一个实现类接口类型的对象并可以维护该对象；</li>\n<li>RefinedAbstraction-扩充抽象类扩充由抽象类定义的接口，它实现了在抽象类中定义的抽象业务方法，在扩充抽象类中可以调用在实现类接口中定义的业务方法；</li>\n<li>Implementor实现类接口定义了实现类的接口，实现类接口仅提供基本操作，而抽象类定义的接口可能会做更多更复杂的操作；</li>\n<li>ConcreteImplementor具体实现类实现了实现类接口并且具体实现它，在不同的具体实现类中提供基本操作的不同实现，在程序运行时，具体实现类对象将替换其父类对象，提供给客户端具体的业务操作方法。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Abstraction</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Abstraction Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Abstraction.operation invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.imp.operationImp();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefinedAbstraction</span> <span class=\"keyword\">extends</span> <span class=\"title\">Abstraction</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'RefinedAbstraction Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setImp(imp) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'RefinedAbstraction.setImp invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.imp = imp</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Implementor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Implementor Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationImp() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Implementor.operationImp invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteImplementorA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Implementor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorA Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationImp() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorA.operationImp invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteImplementorB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Implementor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorB Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationImp() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorB.operationImp invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> abstraction = <span class=\"keyword\">new</span> RefinedAbstraction();</div><div class=\"line\">abstraction.setImp(<span class=\"keyword\">new</span> ConcreteImplementorA());</div><div class=\"line\">abstraction.operation();</div><div class=\"line\">abstraction.setImp(<span class=\"keyword\">new</span> ConcreteImplementorB());</div><div class=\"line\">abstraction.operation();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Abstraction &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Abstraction Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Abstraction.operation invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.imp.operationImp();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> RefinedAbstraction <span class=\"keyword\">extends</span> Abstraction &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'RefinedAbstraction Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setImp(imp) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'RefinedAbstraction.setImp invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.imp = imp</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Implementor &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Implementor Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationImp() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Implementor.operationImp invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> ConcreteImplementorA <span class=\"keyword\">extends</span> Implementor &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorA Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationImp() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorA.operationImp invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> ConcreteImplementorB <span class=\"keyword\">extends</span> Implementor &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorB Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationImp() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorB.operationImp invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> abstraction = <span class=\"keyword\">new</span> RefinedAbstraction();</div><div class=\"line\">abstraction.setImp(<span class=\"keyword\">new</span> ConcreteImplementorA());</div><div class=\"line\">abstraction.operation();</div><div class=\"line\">abstraction.setImp(<span class=\"keyword\">new</span> ConcreteImplementorB());</div><div class=\"line\">abstraction.operation();</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"抽象工厂模式(Abstract Factory)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 抽象工厂模式的定义\n- 抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。\n- 抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构\n\n### 抽象工厂模式包含四个角色：\n- ConcreteFactory-具体工厂实现了抽象工厂声明的生成抽象产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中；\n- AbstractProduct-抽象产品为每种产品声明接口，在抽象产品中定义了产品的抽象业务方法；\n- AbstractFactory-抽象工厂用于明生成抽象产品的方法；\n- Product-具体产品定义具体工厂生产的具体产品对象，实现抽象产品接口中定义的业务方法。\n\n### 抽象工厂模式适用情况包括：\n- 一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节；\n- 系统中有多于一个的产品族，而每次只使用其中某一产品族；\n- 属于同一个产品族的产品将在一起使用；\n- 系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。\n\n---\n\n### ES6实现\n``` js\nclass AbstractFactory {\n    constructor() {\n        console.log(\"AbstractFactory class created\");\n    }\n\n    createProductA(product) {\n        console.log(\"AbstractFactory.createProductA created\");\n    }\n\n    createProductB(product) {\n        console.log(\"AbstractFactory.createProductB created\");\n    }\n}\n\nclass ConcreteFactory1 extends AbstractFactory {\n    constructor() {\n        super();\n        console.log(\"ConcreteFactory1 class created\");\n    }\n\n    createProductA(product) {\n        console.log('ConcreteFactory1 createProductA');\n        return new ProductA1();\n    }\n\n    createProductB(product) {\n        console.log('ConcreteFactory1 createProductB');\n        return new ProductB1();\n    }\n}\n\nclass ConcreteFactory2 extends AbstractFactory {\n    constructor() {\n        super();\n        console.log(\"ConcreteFactory2 class created\");\n    }\n\n    createProductA(product) {\n        console.log('ConcreteFactory2 createProductA');\n        return new ProductA2();\n    }\n\n    createProductB(product) {\n        console.log('ConcreteFactory2 createProductB');\n        return new ProductB2();\n    }\n}\n\nclass AbstractProductA {\n    constructor() {\n        console.log('AbstractProductA class created');\n    }\n}\n\nclass AbstractProductB {\n    constructor() {\n        console.log('AbstractProductB class created');\n    }\n}\n\nclass ProductA1 extends AbstractProductA {\n    constructor() {\n        super();\n        console.log('ProductA1 class created');\n    }\n}\n\nclass ProductA2 extends AbstractProductA {\n    constructor() {\n        super();\n        console.log('ProductA2 class created');\n    }\n}\n\nclass ProductB1 extends AbstractProductB {\n    constructor() {\n        super();\n        console.log('ProductB1 class created');\n    }\n}\n\nclass ProductB2 extends AbstractProductB {\n    constructor() {\n        super();\n        console.log('ProductB2 class created');\n    }\n}\n\nvar factory1 = new ConcreteFactory1();\nvar productB1 = factory1.createProductB();\nvar productA1 = factory1.createProductA();\n\nvar factory2 = new ConcreteFactory2();\nvar productA2 = factory2.createProductA();\nvar productB2 = factory2.createProductB();\n```\n---\n\n### Typescript实现\n``` ts\nnamespace AbstractFactoryPattern {\n    export interface AbstractProductA {\n        methodA(): string;\n    }\n    export interface AbstractProductB {\n        methodB(): number;\n    }\n\n    export interface AbstractFactory {\n        createProductA(param?: any) : AbstractProductA;\n        createProductB() : AbstractProductB;\n    }\n\n\n    export class ProductA1 implements AbstractProductA {\n        methodA = () => {\n            return \"This is methodA of ProductA1\";\n        }\n    }\n    export class ProductB1 implements AbstractProductB {\n        methodB = () => {\n            return 1;\n        }\n    }\n\n    export class ProductA2 implements AbstractProductA {\n        methodA = () => {\n            return \"This is methodA of ProductA2\";\n        }\n    }\n    export class ProductB2 implements AbstractProductB {\n        methodB = () => {\n            return 2;\n        }\n    }\n\n\n    export class ConcreteFactory1 implements AbstractFactory {\n        createProductA(param?: any) : AbstractProductA {\n            return new ProductA1();\n        }\n\n        createProductB(param?: any) : AbstractProductB {\n            return new ProductB1();\n        }\n    }\n    export class ConcreteFactory2 implements AbstractFactory {\n        createProductA(param?: any) : AbstractProductA {\n            return new ProductA2();\n        }\n\n        createProductB(param?: any) : AbstractProductB {\n            return new ProductB2();\n        }\n    }\n\n\n    export class Tester {\n        private abstractProductA: AbstractProductA;\n        private abstractProductB: AbstractProductB;\n\n        constructor(factory: AbstractFactory) {\n            this.abstractProductA = factory.createProductA();\n            this.abstractProductB = factory.createProductB();\n        }\n\n        public test(): void {\n            console.log(this.abstractProductA.methodA());\n            console.log(this.abstractProductB.methodB());\n        }\n    }\n\n }\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/AbstractFactory.md","raw":"---\ntitle: 抽象工厂模式(Abstract Factory)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Creational Patterns]\ntags: [javasctipt, 抽象工厂模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 抽象工厂模式的定义\n- 抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。\n- 抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构\n\n### 抽象工厂模式包含四个角色：\n- ConcreteFactory-具体工厂实现了抽象工厂声明的生成抽象产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中；\n- AbstractProduct-抽象产品为每种产品声明接口，在抽象产品中定义了产品的抽象业务方法；\n- AbstractFactory-抽象工厂用于明生成抽象产品的方法；\n- Product-具体产品定义具体工厂生产的具体产品对象，实现抽象产品接口中定义的业务方法。\n\n### 抽象工厂模式适用情况包括：\n- 一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节；\n- 系统中有多于一个的产品族，而每次只使用其中某一产品族；\n- 属于同一个产品族的产品将在一起使用；\n- 系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。\n\n---\n\n### ES6实现\n``` js\nclass AbstractFactory {\n    constructor() {\n        console.log(\"AbstractFactory class created\");\n    }\n\n    createProductA(product) {\n        console.log(\"AbstractFactory.createProductA created\");\n    }\n\n    createProductB(product) {\n        console.log(\"AbstractFactory.createProductB created\");\n    }\n}\n\nclass ConcreteFactory1 extends AbstractFactory {\n    constructor() {\n        super();\n        console.log(\"ConcreteFactory1 class created\");\n    }\n\n    createProductA(product) {\n        console.log('ConcreteFactory1 createProductA');\n        return new ProductA1();\n    }\n\n    createProductB(product) {\n        console.log('ConcreteFactory1 createProductB');\n        return new ProductB1();\n    }\n}\n\nclass ConcreteFactory2 extends AbstractFactory {\n    constructor() {\n        super();\n        console.log(\"ConcreteFactory2 class created\");\n    }\n\n    createProductA(product) {\n        console.log('ConcreteFactory2 createProductA');\n        return new ProductA2();\n    }\n\n    createProductB(product) {\n        console.log('ConcreteFactory2 createProductB');\n        return new ProductB2();\n    }\n}\n\nclass AbstractProductA {\n    constructor() {\n        console.log('AbstractProductA class created');\n    }\n}\n\nclass AbstractProductB {\n    constructor() {\n        console.log('AbstractProductB class created');\n    }\n}\n\nclass ProductA1 extends AbstractProductA {\n    constructor() {\n        super();\n        console.log('ProductA1 class created');\n    }\n}\n\nclass ProductA2 extends AbstractProductA {\n    constructor() {\n        super();\n        console.log('ProductA2 class created');\n    }\n}\n\nclass ProductB1 extends AbstractProductB {\n    constructor() {\n        super();\n        console.log('ProductB1 class created');\n    }\n}\n\nclass ProductB2 extends AbstractProductB {\n    constructor() {\n        super();\n        console.log('ProductB2 class created');\n    }\n}\n\nvar factory1 = new ConcreteFactory1();\nvar productB1 = factory1.createProductB();\nvar productA1 = factory1.createProductA();\n\nvar factory2 = new ConcreteFactory2();\nvar productA2 = factory2.createProductA();\nvar productB2 = factory2.createProductB();\n```\n---\n\n### Typescript实现\n``` ts\nnamespace AbstractFactoryPattern {\n    export interface AbstractProductA {\n        methodA(): string;\n    }\n    export interface AbstractProductB {\n        methodB(): number;\n    }\n\n    export interface AbstractFactory {\n        createProductA(param?: any) : AbstractProductA;\n        createProductB() : AbstractProductB;\n    }\n\n\n    export class ProductA1 implements AbstractProductA {\n        methodA = () => {\n            return \"This is methodA of ProductA1\";\n        }\n    }\n    export class ProductB1 implements AbstractProductB {\n        methodB = () => {\n            return 1;\n        }\n    }\n\n    export class ProductA2 implements AbstractProductA {\n        methodA = () => {\n            return \"This is methodA of ProductA2\";\n        }\n    }\n    export class ProductB2 implements AbstractProductB {\n        methodB = () => {\n            return 2;\n        }\n    }\n\n\n    export class ConcreteFactory1 implements AbstractFactory {\n        createProductA(param?: any) : AbstractProductA {\n            return new ProductA1();\n        }\n\n        createProductB(param?: any) : AbstractProductB {\n            return new ProductB1();\n        }\n    }\n    export class ConcreteFactory2 implements AbstractFactory {\n        createProductA(param?: any) : AbstractProductA {\n            return new ProductA2();\n        }\n\n        createProductB(param?: any) : AbstractProductB {\n            return new ProductB2();\n        }\n    }\n\n\n    export class Tester {\n        private abstractProductA: AbstractProductA;\n        private abstractProductB: AbstractProductB;\n\n        constructor(factory: AbstractFactory) {\n            this.abstractProductA = factory.createProductA();\n            this.abstractProductB = factory.createProductB();\n        }\n\n        public test(): void {\n            console.log(this.abstractProductA.methodA());\n            console.log(this.abstractProductB.methodB());\n        }\n    }\n\n }\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"AbstractFactory","published":1,"updated":"2017-07-08T08:04:09.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52nth6a0006e0mwhvzng9em","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"抽象工厂模式的定义\"><a href=\"#抽象工厂模式的定义\" class=\"headerlink\" title=\"抽象工厂模式的定义\"></a>抽象工厂模式的定义</h3><ul>\n<li>抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。</li>\n<li>抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构</li>\n</ul>\n<h3 id=\"抽象工厂模式包含四个角色：\"><a href=\"#抽象工厂模式包含四个角色：\" class=\"headerlink\" title=\"抽象工厂模式包含四个角色：\"></a>抽象工厂模式包含四个角色：</h3><ul>\n<li>ConcreteFactory-具体工厂实现了抽象工厂声明的生成抽象产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中；</li>\n<li>AbstractProduct-抽象产品为每种产品声明接口，在抽象产品中定义了产品的抽象业务方法；</li>\n<li>AbstractFactory-抽象工厂用于明生成抽象产品的方法；</li>\n<li>Product-具体产品定义具体工厂生产的具体产品对象，实现抽象产品接口中定义的业务方法。</li>\n</ul>\n<h3 id=\"抽象工厂模式适用情况包括：\"><a href=\"#抽象工厂模式适用情况包括：\" class=\"headerlink\" title=\"抽象工厂模式适用情况包括：\"></a>抽象工厂模式适用情况包括：</h3><ul>\n<li>一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节；</li>\n<li>系统中有多于一个的产品族，而每次只使用其中某一产品族；</li>\n<li>属于同一个产品族的产品将在一起使用；</li>\n<li>系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"AbstractFactory class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createProductA(product) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"AbstractFactory.createProductA created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createProductB(product) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"AbstractFactory.createProductB created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFactory1</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcreteFactory1 class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createProductA(product) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteFactory1 createProductA'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductA1();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createProductB(product) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteFactory1 createProductB'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductB1();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFactory2</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcreteFactory2 class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createProductA(product) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteFactory2 createProductA'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductA2();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createProductB(product) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteFactory2 createProductB'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductB2();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractProductA</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractProductA class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractProductB</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractProductB class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductA1</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProductA</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ProductA1 class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductA2</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProductA</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ProductA2 class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductB1</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProductB</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ProductB1 class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductB2</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProductB</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ProductB2 class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> factory1 = <span class=\"keyword\">new</span> ConcreteFactory1();</div><div class=\"line\"><span class=\"keyword\">var</span> productB1 = factory1.createProductB();</div><div class=\"line\"><span class=\"keyword\">var</span> productA1 = factory1.createProductA();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> factory2 = <span class=\"keyword\">new</span> ConcreteFactory2();</div><div class=\"line\"><span class=\"keyword\">var</span> productA2 = factory2.createProductA();</div><div class=\"line\"><span class=\"keyword\">var</span> productB2 = factory2.createProductB();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> AbstractFactoryPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> AbstractProductA &#123;</div><div class=\"line\">        methodA(): <span class=\"built_in\">string</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> AbstractProductB &#123;</div><div class=\"line\">        methodB(): <span class=\"built_in\">number</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> AbstractFactory &#123;</div><div class=\"line\">        createProductA(param?: <span class=\"built_in\">any</span>) : AbstractProductA;</div><div class=\"line\">        createProductB() : AbstractProductB;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ProductA1 <span class=\"keyword\">implements</span> AbstractProductA &#123;</div><div class=\"line\">        methodA = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"This is methodA of ProductA1\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ProductB1 <span class=\"keyword\">implements</span> AbstractProductB &#123;</div><div class=\"line\">        methodB = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ProductA2 <span class=\"keyword\">implements</span> AbstractProductA &#123;</div><div class=\"line\">        methodA = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"This is methodA of ProductA2\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ProductB2 <span class=\"keyword\">implements</span> AbstractProductB &#123;</div><div class=\"line\">        methodB = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteFactory1 <span class=\"keyword\">implements</span> AbstractFactory &#123;</div><div class=\"line\">        createProductA(param?: <span class=\"built_in\">any</span>) : AbstractProductA &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductA1();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        createProductB(param?: <span class=\"built_in\">any</span>) : AbstractProductB &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductB1();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteFactory2 <span class=\"keyword\">implements</span> AbstractFactory &#123;</div><div class=\"line\">        createProductA(param?: <span class=\"built_in\">any</span>) : AbstractProductA &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductA2();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        createProductB(param?: <span class=\"built_in\">any</span>) : AbstractProductB &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductB2();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Tester &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> abstractProductA: AbstractProductA;</div><div class=\"line\">        <span class=\"keyword\">private</span> abstractProductB: AbstractProductB;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">factory: AbstractFactory</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.abstractProductA = factory.createProductA();</div><div class=\"line\">            <span class=\"keyword\">this</span>.abstractProductB = factory.createProductB();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> test(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.abstractProductA.methodA());</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.abstractProductB.methodB());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><p><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></p>\n</li>\n<li><p><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></p>\n</li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"抽象工厂模式的定义\"><a href=\"#抽象工厂模式的定义\" class=\"headerlink\" title=\"抽象工厂模式的定义\"></a>抽象工厂模式的定义</h3><ul>\n<li>抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。</li>\n<li>抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构</li>\n</ul>\n<h3 id=\"抽象工厂模式包含四个角色：\"><a href=\"#抽象工厂模式包含四个角色：\" class=\"headerlink\" title=\"抽象工厂模式包含四个角色：\"></a>抽象工厂模式包含四个角色：</h3><ul>\n<li>ConcreteFactory-具体工厂实现了抽象工厂声明的生成抽象产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中；</li>\n<li>AbstractProduct-抽象产品为每种产品声明接口，在抽象产品中定义了产品的抽象业务方法；</li>\n<li>AbstractFactory-抽象工厂用于明生成抽象产品的方法；</li>\n<li>Product-具体产品定义具体工厂生产的具体产品对象，实现抽象产品接口中定义的业务方法。</li>\n</ul>\n<h3 id=\"抽象工厂模式适用情况包括：\"><a href=\"#抽象工厂模式适用情况包括：\" class=\"headerlink\" title=\"抽象工厂模式适用情况包括：\"></a>抽象工厂模式适用情况包括：</h3><ul>\n<li>一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节；</li>\n<li>系统中有多于一个的产品族，而每次只使用其中某一产品族；</li>\n<li>属于同一个产品族的产品将在一起使用；</li>\n<li>系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"AbstractFactory class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createProductA(product) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"AbstractFactory.createProductA created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createProductB(product) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"AbstractFactory.createProductB created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFactory1</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcreteFactory1 class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createProductA(product) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteFactory1 createProductA'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductA1();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createProductB(product) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteFactory1 createProductB'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductB1();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFactory2</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcreteFactory2 class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createProductA(product) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteFactory2 createProductA'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductA2();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createProductB(product) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteFactory2 createProductB'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductB2();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractProductA</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractProductA class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractProductB</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractProductB class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductA1</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProductA</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ProductA1 class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductA2</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProductA</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ProductA2 class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductB1</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProductB</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ProductB1 class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductB2</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProductB</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ProductB2 class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> factory1 = <span class=\"keyword\">new</span> ConcreteFactory1();</div><div class=\"line\"><span class=\"keyword\">var</span> productB1 = factory1.createProductB();</div><div class=\"line\"><span class=\"keyword\">var</span> productA1 = factory1.createProductA();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> factory2 = <span class=\"keyword\">new</span> ConcreteFactory2();</div><div class=\"line\"><span class=\"keyword\">var</span> productA2 = factory2.createProductA();</div><div class=\"line\"><span class=\"keyword\">var</span> productB2 = factory2.createProductB();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> AbstractFactoryPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> AbstractProductA &#123;</div><div class=\"line\">        methodA(): <span class=\"built_in\">string</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> AbstractProductB &#123;</div><div class=\"line\">        methodB(): <span class=\"built_in\">number</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> AbstractFactory &#123;</div><div class=\"line\">        createProductA(param?: <span class=\"built_in\">any</span>) : AbstractProductA;</div><div class=\"line\">        createProductB() : AbstractProductB;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ProductA1 <span class=\"keyword\">implements</span> AbstractProductA &#123;</div><div class=\"line\">        methodA = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"This is methodA of ProductA1\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ProductB1 <span class=\"keyword\">implements</span> AbstractProductB &#123;</div><div class=\"line\">        methodB = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ProductA2 <span class=\"keyword\">implements</span> AbstractProductA &#123;</div><div class=\"line\">        methodA = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"This is methodA of ProductA2\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ProductB2 <span class=\"keyword\">implements</span> AbstractProductB &#123;</div><div class=\"line\">        methodB = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteFactory1 <span class=\"keyword\">implements</span> AbstractFactory &#123;</div><div class=\"line\">        createProductA(param?: <span class=\"built_in\">any</span>) : AbstractProductA &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductA1();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        createProductB(param?: <span class=\"built_in\">any</span>) : AbstractProductB &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductB1();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteFactory2 <span class=\"keyword\">implements</span> AbstractFactory &#123;</div><div class=\"line\">        createProductA(param?: <span class=\"built_in\">any</span>) : AbstractProductA &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductA2();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        createProductB(param?: <span class=\"built_in\">any</span>) : AbstractProductB &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductB2();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Tester &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> abstractProductA: AbstractProductA;</div><div class=\"line\">        <span class=\"keyword\">private</span> abstractProductB: AbstractProductB;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">factory: AbstractFactory</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.abstractProductA = factory.createProductA();</div><div class=\"line\">            <span class=\"keyword\">this</span>.abstractProductB = factory.createProductB();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> test(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.abstractProductA.methodA());</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.abstractProductB.methodB());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><p><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></p>\n</li>\n<li><p><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></p>\n</li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"建造者模式(Builder)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n###  建造者模式包含如下四个角色：\n- Builder-抽象建造者为创建一个产品对象的各个部件指定抽象接口；\n- ConcreteBuilder-具体建造者实现了抽象建造者接口，实现各个部件的构造和装配方法，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象；\n- Product-产品角色是被构建的复杂对象，包含多个组成部件；\n- Director-指挥者负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在关联关系，可以在其construct()建造方法中调用建造者对象的部件构造与装配方法，完成复杂对象的建造\n\n### 建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：\n- 一方面它隔离了客户与生产过程；\n- 另一方面它负责控制产品的生成过程。指挥者针对抽象建造者编程，客户端只需要知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对象。\n\n---\n\n### ES6实现\n``` js\nclass Builder {\n    constructor() {\n        console.log('Builder Class created!');\n    }\n\n    buildPart(partName) {\n        console.log('Builder.buildPart invoked!');\n    }\n}\n\nclass ConcreteBuilder extends Builder {\n    constructor() {\n        super();\n        console.log('ConcreteBuilder Class created!');\n    }\n\n    buildPart(partName) {\n        super.buildPart(partName);\n        console.log('ConcreteBuilder.buildPart invoked!');\n        this.product = new Product(partName);\n    }\n    getResult() {\n        console.log('ConcreteBuilder.getResult invoked!');\n        return this.product;\n    }\n}\n\nclass Product {\n    constructor(material) {\n        console.log(\"Product class created\");\n        this.data = material\n    }\n}\n\nclass Director {\n    constructor() {\n        this.structure = ['Prod1', 'Prod2', 'Prod3'];\n        console.log(\"Director class created\");\n    }\n\n    construct() {\n        console.log(\"Director.Construct created\");\n        for (var prodName in this.structure) {\n            let builder = new ConcreteBuilder();\n            builder.buildPart(this.structure[prodName]);\n            builder.getResult();\n        }\n    }\n}\n\nlet director = new Director();\ndirector.construct();\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace BuilderPattern {\n    export class UserBuilder {\n        private name: string;\n        private age: number;\n        private phone: string;\n        private address: string;\n\n        constructor(name: string) {\n            this.name = name;\n        }\n\n        get Name() {\n            return this.name;\n        }\n        setAge(value: number): UserBuilder {\n            this.age = value;\n            return this;\n        }\n        get Age() {\n            return this.age;\n        }\n        setPhone(value: string): UserBuilder {\n            this.phone = value;\n            return this;\n        }\n        get Phone() {\n            return this.phone;\n        }\n        setAddress(value: string): UserBuilder {\n            this.address = value;\n            return this;\n        }\n        get Address() {\n            return this.address;\n        }\n\n        build(): User {\n            return new User(this);\n        }\n    }\n\n    export class User {\n        private name: string;\n        private age: number;\n        private phone: string;\n        private address: string;\n\n        constructor(builder: UserBuilder) {\n            this.name = builder.Name;\n            this.age = builder.Age;\n            this.phone = builder.Phone;\n            this.address = builder.Address\n        }\n\n        get Name() {\n            return this.name;\n        }\n        get Age() {\n            return this.age;\n        }\n        get Phone() {\n            return this.phone;\n        }\n        get Address() {\n            return this.address;\n        }\n    }\n\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Builder.md","raw":"---\ntitle:  建造者模式(Builder)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Creational Patterns]\ntags: [javasctipt,  建造者模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n###  建造者模式包含如下四个角色：\n- Builder-抽象建造者为创建一个产品对象的各个部件指定抽象接口；\n- ConcreteBuilder-具体建造者实现了抽象建造者接口，实现各个部件的构造和装配方法，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象；\n- Product-产品角色是被构建的复杂对象，包含多个组成部件；\n- Director-指挥者负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在关联关系，可以在其construct()建造方法中调用建造者对象的部件构造与装配方法，完成复杂对象的建造\n\n### 建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：\n- 一方面它隔离了客户与生产过程；\n- 另一方面它负责控制产品的生成过程。指挥者针对抽象建造者编程，客户端只需要知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对象。\n\n---\n\n### ES6实现\n``` js\nclass Builder {\n    constructor() {\n        console.log('Builder Class created!');\n    }\n\n    buildPart(partName) {\n        console.log('Builder.buildPart invoked!');\n    }\n}\n\nclass ConcreteBuilder extends Builder {\n    constructor() {\n        super();\n        console.log('ConcreteBuilder Class created!');\n    }\n\n    buildPart(partName) {\n        super.buildPart(partName);\n        console.log('ConcreteBuilder.buildPart invoked!');\n        this.product = new Product(partName);\n    }\n    getResult() {\n        console.log('ConcreteBuilder.getResult invoked!');\n        return this.product;\n    }\n}\n\nclass Product {\n    constructor(material) {\n        console.log(\"Product class created\");\n        this.data = material\n    }\n}\n\nclass Director {\n    constructor() {\n        this.structure = ['Prod1', 'Prod2', 'Prod3'];\n        console.log(\"Director class created\");\n    }\n\n    construct() {\n        console.log(\"Director.Construct created\");\n        for (var prodName in this.structure) {\n            let builder = new ConcreteBuilder();\n            builder.buildPart(this.structure[prodName]);\n            builder.getResult();\n        }\n    }\n}\n\nlet director = new Director();\ndirector.construct();\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace BuilderPattern {\n    export class UserBuilder {\n        private name: string;\n        private age: number;\n        private phone: string;\n        private address: string;\n\n        constructor(name: string) {\n            this.name = name;\n        }\n\n        get Name() {\n            return this.name;\n        }\n        setAge(value: number): UserBuilder {\n            this.age = value;\n            return this;\n        }\n        get Age() {\n            return this.age;\n        }\n        setPhone(value: string): UserBuilder {\n            this.phone = value;\n            return this;\n        }\n        get Phone() {\n            return this.phone;\n        }\n        setAddress(value: string): UserBuilder {\n            this.address = value;\n            return this;\n        }\n        get Address() {\n            return this.address;\n        }\n\n        build(): User {\n            return new User(this);\n        }\n    }\n\n    export class User {\n        private name: string;\n        private age: number;\n        private phone: string;\n        private address: string;\n\n        constructor(builder: UserBuilder) {\n            this.name = builder.Name;\n            this.age = builder.Age;\n            this.phone = builder.Phone;\n            this.address = builder.Address\n        }\n\n        get Name() {\n            return this.name;\n        }\n        get Age() {\n            return this.age;\n        }\n        get Phone() {\n            return this.phone;\n        }\n        get Address() {\n            return this.address;\n        }\n    }\n\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Builder","published":1,"updated":"2017-07-08T08:04:09.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52nth6d0008e0mwhx2p54sh","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"建造者模式包含如下四个角色：\"><a href=\"#建造者模式包含如下四个角色：\" class=\"headerlink\" title=\"建造者模式包含如下四个角色：\"></a>建造者模式包含如下四个角色：</h3><ul>\n<li>Builder-抽象建造者为创建一个产品对象的各个部件指定抽象接口；</li>\n<li>ConcreteBuilder-具体建造者实现了抽象建造者接口，实现各个部件的构造和装配方法，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象；</li>\n<li>Product-产品角色是被构建的复杂对象，包含多个组成部件；</li>\n<li>Director-指挥者负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在关联关系，可以在其construct()建造方法中调用建造者对象的部件构造与装配方法，完成复杂对象的建造</li>\n</ul>\n<h3 id=\"建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：\"><a href=\"#建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：\" class=\"headerlink\" title=\"建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：\"></a>建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：</h3><ul>\n<li>一方面它隔离了客户与生产过程；</li>\n<li>另一方面它负责控制产品的生成过程。指挥者针对抽象建造者编程，客户端只需要知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对象。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Builder Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    buildPart(partName) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Builder.buildPart invoked!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title\">Builder</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteBuilder Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    buildPart(partName) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.buildPart(partName);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteBuilder.buildPart invoked!'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.product = <span class=\"keyword\">new</span> Product(partName);</div><div class=\"line\">    &#125;</div><div class=\"line\">    getResult() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteBuilder.getResult invoked!'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.product;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(material) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Product class created\"</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.data = material</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Director</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.structure = [<span class=\"string\">'Prod1'</span>, <span class=\"string\">'Prod2'</span>, <span class=\"string\">'Prod3'</span>];</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Director class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    construct() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Director.Construct created\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> prodName <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.structure) &#123;</div><div class=\"line\">            <span class=\"keyword\">let</span> builder = <span class=\"keyword\">new</span> ConcreteBuilder();</div><div class=\"line\">            builder.buildPart(<span class=\"keyword\">this</span>.structure[prodName]);</div><div class=\"line\">            builder.getResult();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> director = <span class=\"keyword\">new</span> Director();</div><div class=\"line\">director.construct();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> BuilderPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> UserBuilder &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> name: <span class=\"built_in\">string</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> age: <span class=\"built_in\">number</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> phone: <span class=\"built_in\">string</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> address: <span class=\"built_in\">string</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">get</span> Name() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">        &#125;</div><div class=\"line\">        setAge(value: <span class=\"built_in\">number</span>): UserBuilder &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.age = value;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">get</span> Age() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</div><div class=\"line\">        &#125;</div><div class=\"line\">        setPhone(value: <span class=\"built_in\">string</span>): UserBuilder &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.phone = value;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">get</span> Phone() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.phone;</div><div class=\"line\">        &#125;</div><div class=\"line\">        setAddress(value: <span class=\"built_in\">string</span>): UserBuilder &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.address = value;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">get</span> Address() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.address;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        build(): User &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> User &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> name: <span class=\"built_in\">string</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> age: <span class=\"built_in\">number</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> phone: <span class=\"built_in\">string</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> address: <span class=\"built_in\">string</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">builder: UserBuilder</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name = builder.Name;</div><div class=\"line\">            <span class=\"keyword\">this</span>.age = builder.Age;</div><div class=\"line\">            <span class=\"keyword\">this</span>.phone = builder.Phone;</div><div class=\"line\">            <span class=\"keyword\">this</span>.address = builder.Address</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">get</span> Name() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">get</span> Age() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">get</span> Phone() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.phone;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">get</span> Address() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.address;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><p><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></p>\n</li>\n<li><p><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></p>\n</li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"建造者模式包含如下四个角色：\"><a href=\"#建造者模式包含如下四个角色：\" class=\"headerlink\" title=\"建造者模式包含如下四个角色：\"></a>建造者模式包含如下四个角色：</h3><ul>\n<li>Builder-抽象建造者为创建一个产品对象的各个部件指定抽象接口；</li>\n<li>ConcreteBuilder-具体建造者实现了抽象建造者接口，实现各个部件的构造和装配方法，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象；</li>\n<li>Product-产品角色是被构建的复杂对象，包含多个组成部件；</li>\n<li>Director-指挥者负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在关联关系，可以在其construct()建造方法中调用建造者对象的部件构造与装配方法，完成复杂对象的建造</li>\n</ul>\n<h3 id=\"建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：\"><a href=\"#建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：\" class=\"headerlink\" title=\"建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：\"></a>建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：</h3><ul>\n<li>一方面它隔离了客户与生产过程；</li>\n<li>另一方面它负责控制产品的生成过程。指挥者针对抽象建造者编程，客户端只需要知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对象。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Builder Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    buildPart(partName) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Builder.buildPart invoked!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title\">Builder</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteBuilder Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    buildPart(partName) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.buildPart(partName);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteBuilder.buildPart invoked!'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.product = <span class=\"keyword\">new</span> Product(partName);</div><div class=\"line\">    &#125;</div><div class=\"line\">    getResult() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteBuilder.getResult invoked!'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.product;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(material) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Product class created\"</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.data = material</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Director</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.structure = [<span class=\"string\">'Prod1'</span>, <span class=\"string\">'Prod2'</span>, <span class=\"string\">'Prod3'</span>];</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Director class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    construct() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Director.Construct created\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> prodName <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.structure) &#123;</div><div class=\"line\">            <span class=\"keyword\">let</span> builder = <span class=\"keyword\">new</span> ConcreteBuilder();</div><div class=\"line\">            builder.buildPart(<span class=\"keyword\">this</span>.structure[prodName]);</div><div class=\"line\">            builder.getResult();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> director = <span class=\"keyword\">new</span> Director();</div><div class=\"line\">director.construct();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> BuilderPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> UserBuilder &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> name: <span class=\"built_in\">string</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> age: <span class=\"built_in\">number</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> phone: <span class=\"built_in\">string</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> address: <span class=\"built_in\">string</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">get</span> Name() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">        &#125;</div><div class=\"line\">        setAge(value: <span class=\"built_in\">number</span>): UserBuilder &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.age = value;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">get</span> Age() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</div><div class=\"line\">        &#125;</div><div class=\"line\">        setPhone(value: <span class=\"built_in\">string</span>): UserBuilder &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.phone = value;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">get</span> Phone() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.phone;</div><div class=\"line\">        &#125;</div><div class=\"line\">        setAddress(value: <span class=\"built_in\">string</span>): UserBuilder &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.address = value;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">get</span> Address() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.address;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        build(): User &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> User &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> name: <span class=\"built_in\">string</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> age: <span class=\"built_in\">number</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> phone: <span class=\"built_in\">string</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> address: <span class=\"built_in\">string</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">builder: UserBuilder</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name = builder.Name;</div><div class=\"line\">            <span class=\"keyword\">this</span>.age = builder.Age;</div><div class=\"line\">            <span class=\"keyword\">this</span>.phone = builder.Phone;</div><div class=\"line\">            <span class=\"keyword\">this</span>.address = builder.Address</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">get</span> Name() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">get</span> Age() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">get</span> Phone() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.phone;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">get</span> Address() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.address;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><p><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></p>\n</li>\n<li><p><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></p>\n</li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"命令模式(Command)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 命令模式的定义\n- 命令模式：将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；\n- 对请求排队或者记录请求日志，以及支持可撤销的操作。\n- 命令模式是一种对象行为型模式，其别名为动作模式或事务模式。\n\n### 命令模式包含四个角色：\n- Command-抽象命令类中声明了用于执行请求等方法，通过这些方法可以调用请求接收者的相关操作；\n- ConcreteCommand-具体命令类是抽象命令类的子类，实现了在抽象命令类中声明的方法，它对应具体的接收者对象，将接收者对象的动作绑定其中；\n- Invoker-调用者即请求的发送者，又称为请求者，它通过命令对象来执行请求；\n- Receiver-接收者执行与请求相关的操作，它具体实现对请求的业务处理。\n\n### ES6实现\n``` js\nclass Invoker {\n    constructor() {\n        console.log('Invoker Class created');\n    }\n\n    storeCommand(command) {\n        this.command = command;\n        console.log('Invoker.storeCommand invoked');\n    }\n}\n\nclass Command {\n    constructor() {\n        console.log('Command Class created');\n    }\n\n    execute() {\n        console.log('Command.execute invoked');\n    }\n}\n\nclass ConcreteCommand extends Command {\n    constructor(receiver, state) {\n        super();\n        this.receiver = receiver;\n        console.log('ConcreteCommand Class created');\n    }\n\n    execute() {\n        console.log('ConcreteCommand.execute invoked');\n        this.receiver.action();\n    }\n}\n\nclass Receiver {\n    constructor() {\n        console.log('Receiver Class created');\n    }\n\n    action() {\n        console.log('Receiver.action invoked');\n    }\n}\n\nvar invoker = new Invoker();\nvar receiver = new Receiver();\nvar command = new ConcreteCommand(receiver);\ninvoker.storeCommand(command);\ninvoker.command.execute();\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace CommandPattern {\n    export class Command {\n        public execute(): void {\n            throw new Error(\"Abstract method!\");\n        }\n    }\n\n    export class ConcreteCommand1 extends Command {\n        private receiver: Receiver;\n\n        constructor(receiver: Receiver) {\n            super();\n            this.receiver = receiver;\n        }\n\n        public execute(): void {\n            console.log(\"`execute` method of ConcreteCommand1 is being called!\");\n            this.receiver.action();\n        }\n    }\n\n    export class ConcreteCommand2 extends Command {\n        private receiver: Receiver;\n\n        constructor(receiver: Receiver) {\n            super();\n            this.receiver = receiver;\n        }\n\n        public execute(): void {\n            console.log(\"`execute` method of ConcreteCommand2 is being called!\");\n            this.receiver.action();\n        }\n    }\n\n    export class Invoker {\n        private commands: Command[];\n\n        constructor() {\n            this.commands = [];\n        }\n\n        public storeAndExecute(cmd: Command) {\n            this.commands.push(cmd);\n            cmd.execute();\n        }\n    }\n\n    export class Receiver {\n        public action(): void {\n            console.log(\"action is being called!\");\n        }\n    }\n}\n\n(function main() {\n    var receiver: CommandPattern.Receiver = new CommandPattern.Receiver(),\n        command1: CommandPattern.Command  = new CommandPattern.ConcreteCommand1(receiver),\n        command2: CommandPattern.Command  = new CommandPattern.ConcreteCommand2(receiver),\n        invoker : CommandPattern.Invoker  = new CommandPattern.Invoker();\n\n    invoker.storeAndExecute(command1);\n    invoker.storeAndExecute(command2);\n\n}());\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Command.md","raw":"---\ntitle: 命令模式(Command)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Behavioral Patterns]\ntags: [javasctipt, 命令模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 命令模式的定义\n- 命令模式：将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；\n- 对请求排队或者记录请求日志，以及支持可撤销的操作。\n- 命令模式是一种对象行为型模式，其别名为动作模式或事务模式。\n\n### 命令模式包含四个角色：\n- Command-抽象命令类中声明了用于执行请求等方法，通过这些方法可以调用请求接收者的相关操作；\n- ConcreteCommand-具体命令类是抽象命令类的子类，实现了在抽象命令类中声明的方法，它对应具体的接收者对象，将接收者对象的动作绑定其中；\n- Invoker-调用者即请求的发送者，又称为请求者，它通过命令对象来执行请求；\n- Receiver-接收者执行与请求相关的操作，它具体实现对请求的业务处理。\n\n### ES6实现\n``` js\nclass Invoker {\n    constructor() {\n        console.log('Invoker Class created');\n    }\n\n    storeCommand(command) {\n        this.command = command;\n        console.log('Invoker.storeCommand invoked');\n    }\n}\n\nclass Command {\n    constructor() {\n        console.log('Command Class created');\n    }\n\n    execute() {\n        console.log('Command.execute invoked');\n    }\n}\n\nclass ConcreteCommand extends Command {\n    constructor(receiver, state) {\n        super();\n        this.receiver = receiver;\n        console.log('ConcreteCommand Class created');\n    }\n\n    execute() {\n        console.log('ConcreteCommand.execute invoked');\n        this.receiver.action();\n    }\n}\n\nclass Receiver {\n    constructor() {\n        console.log('Receiver Class created');\n    }\n\n    action() {\n        console.log('Receiver.action invoked');\n    }\n}\n\nvar invoker = new Invoker();\nvar receiver = new Receiver();\nvar command = new ConcreteCommand(receiver);\ninvoker.storeCommand(command);\ninvoker.command.execute();\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace CommandPattern {\n    export class Command {\n        public execute(): void {\n            throw new Error(\"Abstract method!\");\n        }\n    }\n\n    export class ConcreteCommand1 extends Command {\n        private receiver: Receiver;\n\n        constructor(receiver: Receiver) {\n            super();\n            this.receiver = receiver;\n        }\n\n        public execute(): void {\n            console.log(\"`execute` method of ConcreteCommand1 is being called!\");\n            this.receiver.action();\n        }\n    }\n\n    export class ConcreteCommand2 extends Command {\n        private receiver: Receiver;\n\n        constructor(receiver: Receiver) {\n            super();\n            this.receiver = receiver;\n        }\n\n        public execute(): void {\n            console.log(\"`execute` method of ConcreteCommand2 is being called!\");\n            this.receiver.action();\n        }\n    }\n\n    export class Invoker {\n        private commands: Command[];\n\n        constructor() {\n            this.commands = [];\n        }\n\n        public storeAndExecute(cmd: Command) {\n            this.commands.push(cmd);\n            cmd.execute();\n        }\n    }\n\n    export class Receiver {\n        public action(): void {\n            console.log(\"action is being called!\");\n        }\n    }\n}\n\n(function main() {\n    var receiver: CommandPattern.Receiver = new CommandPattern.Receiver(),\n        command1: CommandPattern.Command  = new CommandPattern.ConcreteCommand1(receiver),\n        command2: CommandPattern.Command  = new CommandPattern.ConcreteCommand2(receiver),\n        invoker : CommandPattern.Invoker  = new CommandPattern.Invoker();\n\n    invoker.storeAndExecute(command1);\n    invoker.storeAndExecute(command2);\n\n}());\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Command","published":1,"updated":"2017-07-08T08:04:09.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52nth6g0009e0mw0tfiegpu","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"命令模式的定义\"><a href=\"#命令模式的定义\" class=\"headerlink\" title=\"命令模式的定义\"></a>命令模式的定义</h3><ul>\n<li>命令模式：将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；</li>\n<li>对请求排队或者记录请求日志，以及支持可撤销的操作。</li>\n<li>命令模式是一种对象行为型模式，其别名为动作模式或事务模式。</li>\n</ul>\n<h3 id=\"命令模式包含四个角色：\"><a href=\"#命令模式包含四个角色：\" class=\"headerlink\" title=\"命令模式包含四个角色：\"></a>命令模式包含四个角色：</h3><ul>\n<li>Command-抽象命令类中声明了用于执行请求等方法，通过这些方法可以调用请求接收者的相关操作；</li>\n<li>ConcreteCommand-具体命令类是抽象命令类的子类，实现了在抽象命令类中声明的方法，它对应具体的接收者对象，将接收者对象的动作绑定其中；</li>\n<li>Invoker-调用者即请求的发送者，又称为请求者，它通过命令对象来执行请求；</li>\n<li>Receiver-接收者执行与请求相关的操作，它具体实现对请求的业务处理。</li>\n</ul>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Invoker</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Invoker Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    storeCommand(command) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.command = command;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Invoker.storeCommand invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Command</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Command Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    execute() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Command.execute invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteCommand</span> <span class=\"keyword\">extends</span> <span class=\"title\">Command</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(receiver, state) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.receiver = receiver;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteCommand Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    execute() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteCommand.execute invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.receiver.action();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Receiver</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Receiver Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    action() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Receiver.action invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> invoker = <span class=\"keyword\">new</span> Invoker();</div><div class=\"line\"><span class=\"keyword\">var</span> receiver = <span class=\"keyword\">new</span> Receiver();</div><div class=\"line\"><span class=\"keyword\">var</span> command = <span class=\"keyword\">new</span> ConcreteCommand(receiver);</div><div class=\"line\">invoker.storeCommand(command);</div><div class=\"line\">invoker.command.execute();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> CommandPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Command &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> execute(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract method!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteCommand1 <span class=\"keyword\">extends</span> Command &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> receiver: Receiver;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">receiver: Receiver</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>();</div><div class=\"line\">            <span class=\"keyword\">this</span>.receiver = receiver;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> execute(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`execute` method of ConcreteCommand1 is being called!\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.receiver.action();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteCommand2 <span class=\"keyword\">extends</span> Command &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> receiver: Receiver;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">receiver: Receiver</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>();</div><div class=\"line\">            <span class=\"keyword\">this</span>.receiver = receiver;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> execute(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`execute` method of ConcreteCommand2 is being called!\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.receiver.action();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Invoker &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> commands: Command[];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.commands = [];</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> storeAndExecute(cmd: Command) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.commands.push(cmd);</div><div class=\"line\">            cmd.execute();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Receiver &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> action(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"action is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> receiver: CommandPattern.Receiver = <span class=\"keyword\">new</span> CommandPattern.Receiver(),</div><div class=\"line\">        command1: CommandPattern.Command  = <span class=\"keyword\">new</span> CommandPattern.ConcreteCommand1(receiver),</div><div class=\"line\">        command2: CommandPattern.Command  = <span class=\"keyword\">new</span> CommandPattern.ConcreteCommand2(receiver),</div><div class=\"line\">        invoker : CommandPattern.Invoker  = <span class=\"keyword\">new</span> CommandPattern.Invoker();</div><div class=\"line\"></div><div class=\"line\">    invoker.storeAndExecute(command1);</div><div class=\"line\">    invoker.storeAndExecute(command2);</div><div class=\"line\"></div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"命令模式的定义\"><a href=\"#命令模式的定义\" class=\"headerlink\" title=\"命令模式的定义\"></a>命令模式的定义</h3><ul>\n<li>命令模式：将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；</li>\n<li>对请求排队或者记录请求日志，以及支持可撤销的操作。</li>\n<li>命令模式是一种对象行为型模式，其别名为动作模式或事务模式。</li>\n</ul>\n<h3 id=\"命令模式包含四个角色：\"><a href=\"#命令模式包含四个角色：\" class=\"headerlink\" title=\"命令模式包含四个角色：\"></a>命令模式包含四个角色：</h3><ul>\n<li>Command-抽象命令类中声明了用于执行请求等方法，通过这些方法可以调用请求接收者的相关操作；</li>\n<li>ConcreteCommand-具体命令类是抽象命令类的子类，实现了在抽象命令类中声明的方法，它对应具体的接收者对象，将接收者对象的动作绑定其中；</li>\n<li>Invoker-调用者即请求的发送者，又称为请求者，它通过命令对象来执行请求；</li>\n<li>Receiver-接收者执行与请求相关的操作，它具体实现对请求的业务处理。</li>\n</ul>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Invoker</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Invoker Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    storeCommand(command) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.command = command;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Invoker.storeCommand invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Command</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Command Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    execute() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Command.execute invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteCommand</span> <span class=\"keyword\">extends</span> <span class=\"title\">Command</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(receiver, state) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.receiver = receiver;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteCommand Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    execute() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteCommand.execute invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.receiver.action();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Receiver</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Receiver Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    action() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Receiver.action invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> invoker = <span class=\"keyword\">new</span> Invoker();</div><div class=\"line\"><span class=\"keyword\">var</span> receiver = <span class=\"keyword\">new</span> Receiver();</div><div class=\"line\"><span class=\"keyword\">var</span> command = <span class=\"keyword\">new</span> ConcreteCommand(receiver);</div><div class=\"line\">invoker.storeCommand(command);</div><div class=\"line\">invoker.command.execute();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> CommandPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Command &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> execute(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract method!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteCommand1 <span class=\"keyword\">extends</span> Command &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> receiver: Receiver;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">receiver: Receiver</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>();</div><div class=\"line\">            <span class=\"keyword\">this</span>.receiver = receiver;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> execute(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`execute` method of ConcreteCommand1 is being called!\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.receiver.action();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteCommand2 <span class=\"keyword\">extends</span> Command &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> receiver: Receiver;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">receiver: Receiver</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>();</div><div class=\"line\">            <span class=\"keyword\">this</span>.receiver = receiver;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> execute(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`execute` method of ConcreteCommand2 is being called!\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.receiver.action();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Invoker &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> commands: Command[];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.commands = [];</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> storeAndExecute(cmd: Command) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.commands.push(cmd);</div><div class=\"line\">            cmd.execute();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Receiver &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> action(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"action is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> receiver: CommandPattern.Receiver = <span class=\"keyword\">new</span> CommandPattern.Receiver(),</div><div class=\"line\">        command1: CommandPattern.Command  = <span class=\"keyword\">new</span> CommandPattern.ConcreteCommand1(receiver),</div><div class=\"line\">        command2: CommandPattern.Command  = <span class=\"keyword\">new</span> CommandPattern.ConcreteCommand2(receiver),</div><div class=\"line\">        invoker : CommandPattern.Invoker  = <span class=\"keyword\">new</span> CommandPattern.Invoker();</div><div class=\"line\"></div><div class=\"line\">    invoker.storeAndExecute(command1);</div><div class=\"line\">    invoker.storeAndExecute(command2);</div><div class=\"line\"></div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"class","date":"2017-07-13T02:33:42.000Z","_content":"> ECMAScript 2015 中引入的 JavaScript **class** 主要是 JavaScript 现有的基于原型的继承的语法糖。 类语法不是向JavaScript引入一个新的面向对象的继承模型。JavaScript类提供了一个更简单和更清晰的语法来创建对象并处理继承。\n\n## 定义\n类实际上是个“特殊的函数”，就像你能够定义的函数表达式和函数声明一样，类语法有两个组成部分：类表达式和类声明。\n\n### 类声明\n定义一个类的一种方法是使用一个类声明。要声明一个类，你可以使用带有class关键字的类名（这里是“Rectangle”）。\n```js\nclass Rectangle {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n```\n\n\n#### 提升\n函数声明和类声明之间的一个重要区别是函数声明会声明提升，类声明不会。你首先需要声明你的类，然后访问它，\n```js\nlet p = new Rectangle(); \n\n// ReferenceError\n\nclass Rectangle {}\n```\n### 类表达式\n一个类表达式是定义一个类的另一种方式。类表达式可以是被命名的或匿名的。赋予一个命名类表达式的名称是类的主体的本地名称。\n```js\n/* 匿名类 */ \nlet Rectangle = class {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n};\n\n/* 命名的类 */ \nlet Rectangle = class Rectangle {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n};\n```\n## 类体和方法定义\n一个类的类体是一对花括号/大括号 {} 中的部分。这是你定义类成员的位置，如方法或构造函数。\n\n### 严格模式\n类声明和类表达式的主体都执行在严格模式下。\n\n### 构造函数\n[构造函数](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/constructor)方法是一个特殊的方法，其用于创建和初始化使用一个类创建的一个对象。一个类只能拥有一个名为 “constructor”的特殊方法。如果类包含多个构造函数的方法，则将抛出 一个SyntaxError 。\n\n一个构造函数可以使用 super 关键字来调用一个父类的构造函数。\n\n### 原型方法  \n### 静态方法\nstatic 关键字用来定义一个类的一个静态方法。调用静态方法而不实例化其类，不能通过一个类实例调用静态方法。静态方法通常用于为一个应用程序创建工具函数。\n\n## 使用 extends 创建子类\n[extends](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/extends) 关键字在类声明或类表达式中用于创建一个类作为另一个类的一个子类。\n```js\nclass Animal { \n  constructor(name) {\n    this.name = name;\n  }\n  \n  speak() {\n    console.log(this.name + ' makes a noise.');\n  }\n}\n\nclass Dog extends Animal {\n  speak() {\n    console.log(this.name + ' barks.');\n  }\n}\n\nvar d = new Dog('Mitzie');\n// 'Mitzie barks.'\nd.speak();\n\n```\n如果子类中存在构造函数，则需要在使用“this”之前首先调用super（）。\n也可以扩展传统的基于函数的“类”：\n\n```js\nfunction Animal (name) {\n  this.name = name;  \n}\nAnimal.prototype.speak = function () {\n  console.log(this.name + ' makes a noise.');\n}\n\nclass Dog extends Animal {\n  speak() {\n    super.speak();\n    console.log(this.name + ' barks.');\n  }\n}\n\nvar d = new Dog('Mitzie');\nd.speak();\n```\n请注意，类不能扩展常规（不可构造/非构造的）对象。如果要继承常规对象，可以改用[Object.setPrototypeOf()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf)\n```js\n\nvar Animal = {\n  speak() {\n    console.log(this.name + ' makes a noise.');\n  }\n};\n\nclass Dog {\n  constructor(name) {\n    this.name = name;\n  }\n  speak() {\n    super.speak();\n    console.log(this.name + ' barks.');\n  }\n}\nObject.setPrototypeOf(Dog.prototype, Animal);\n\nvar d = new Dog('Mitzie');\nd.speak();\n```\n## Species\n你可能希望在派生数组类 MyArray 中返回 Array对象。这种类/种类模式允许你覆盖默认的构造函数。\n\n例如，当使用像map()返回默认构造函数的方法时，您希望这些方法返回一个父Array对象，而不是MyArray对象。Symbol.species 符号可以让你这样做：\n```js \nclass MyArray extends Array {\n  // Overwrite species to the parent Array constructor\n  static get [Symbol.species]() { return Array; }\n}\nvar a = new MyArray(1,2,3);\nvar mapped = a.map(x => x * x);\n\nconsole.log(mapped instanceof MyArray); \n// false\nconsole.log(mapped instanceof Array);   \n// true\n```\n## 使用 super 调用超类\nsuper 关键字用于调用对象的父对象上的函数。\n```js\nclass Cat { \n  constructor(name) {\n    this.name = name;\n  }\n  \n  speak() {\n    console.log(this.name + ' makes a noise.');\n  }\n}\n\nclass Lion extends Cat {\n  speak() {\n    super.speak();\n    console.log(this.name + ' roars.');\n  }\n}\n```\n\n## Mix-ins 混合\n抽象子类或者 mix-ins 是类的模板。 一个 ECMAScript 类只能有一个单超类，所以想要从工具类来多重继承的行为是不可能的。子类继承的只能是父类提供的功能性。因此，例如，从工具类的多重继承是不可能的。该功能必须由超类提供。\n\n一个以超类作为输入的函数和一个继承该超类的子类作为输出可以用于在ECMAScript中实现混合\n```js\nvar calculatorMixin = Base => class extends Base {\n  calc() { }\n};\n\nvar randomizerMixin = Base => class extends Base {\n  randomize() { }\n};\n```\n使用 mix-ins 的类可以像下面这样写：\n```js\n使用 mix-ins 的类可以像下面这样写：\n```\n## [example](https://googlechrome.github.io/samples/classes-es6/index.html)运用class super, static extend...\n```js\n// Example 1: Creating a new class (declaration-form)\n// ===============================================================\n\n// A base class is defined using the new reserved 'class' keyword\nclass Polygon {\n  // ..and an (optional) custom class constructor. If one is\n  // not supplied, a default constructor is used instead:\n  // constructor() { }\n  constructor(height, width) {\n    this.name = 'Polygon';\n    this.height = height;\n    this.width = width;\n  }\n\n  // Simple class instance methods using short-hand method\n  // declaration\n  sayName() {\n    console.log('Hi, I am a ', this.name + '.');\n  }\n\n  sayHistory() {\n    console.log('\"Polygon\" is derived from the Greek polus (many) ' +\n      'and gonia (angle).');\n  }\n\n  // We will look at static and subclassed methods shortly\n}\n\n// Classes are used just like ES5 constructor functions:\nlet p = new Polygon(300, 400);\np.sayName();\nconsole.log('The width of this polygon is ' + p.width);\n\n// Example 2: Creating a new class (expression-form)\n// ===============================================================\n\n// Our Polygon class above is an example of a Class declaration.\n// ES6 classes also support Class expressions - just another way\n// of defining a new class. For example:\nconst MyPoly = class Poly {\n  getPolyName() {\n    console.log('Hi. I was created with a Class expression. My name is ' +\n      Poly.name);\n  }\n};\n\nlet inst = new MyPoly();\ninst.getPolyName();\n\n// Example 3: Extending an existing class\n// ===============================================================\n\n// Classes support extending other classes, but can also extend\n// other objects. Whatever you extend must be a constructor.\n//\n// Let's extend the Polygon class to create a new derived class\n// called Square.\nclass Square extends Polygon {\n  constructor(length) {\n    // The reserved 'super' keyword is for making super-constructor\n    // calls and allows access to parent methods.\n    //\n    // Here, it will call the parent class' constructor with lengths\n    // provided for the Polygon's width and height\n    super(length, length);\n    // Note: In derived classes, super() must be called before you\n    // can use 'this'. Leaving this out will cause a reference error.\n    this.name = 'Square';\n  }\n\n  // Getter/setter methods are supported in classes,\n  // similar to their ES5 equivalents\n  get area() {\n    return this.height * this.width;\n  }\n\n  set area(value) {\n    this.area = value;\n  }\n}\n\nlet s = new Square(5);\n\ns.sayName();\nconsole.log('The area of this square is ' + s.area);\n\n// Example 4: Subclassing methods of a parent class\n// ===============================================================\n\nclass Rectangle extends Polygon {\n  constructor(height, width) {\n    super(height, width);\n    this.name = 'Rectangle';\n  }\n  // Here, sayName() is a subclassed method which\n  // overrides their superclass method of the same name.\n  sayName() {\n    console.log('Sup! My name is ', this.name + '.');\n    super.sayHistory();\n  }\n}\n\nlet r = new Rectangle(50, 60);\nr.sayName();\n\n// Example 5: Defining static methods\n// ===============================================================\n\n// Classes support static members which can be accessed without an\n// instance being present.\nclass Triple {\n  // Using the 'static' keyword creates a method which is associated\n  // with a class, but not with an instance of the class.\n  static triple(n) {\n    n = n || 1;\n    return n * 3;\n  }\n}\n\n// super.prop in this example is used for accessing super-properties from\n// a parent class. This works fine in static methods too:\nclass BiggerTriple extends Triple {\n  static triple(n) {\n    return super.triple(n) * super.triple(n);\n  }\n}\n\nconsole.log(Triple.triple());\nconsole.log(Triple.triple(6));\nconsole.log(BiggerTriple.triple(3));\n// var tp = new Triple();\n// console.log(tp.triple()); tp.triple is not a function\n\n// Example 6: Subclassing built-in classes and DOM\n// ===============================================================\n\n// Extend Date built-in\nclass MyDate extends Date {\n  constructor() {\n    super();\n  }\n\n  getFormattedDate() {\n    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n      'Oct', 'Nov', 'Dec'];\n    return this.getDate() + '-' + months[this.getMonth()] + '-' +\n      this.getFullYear();\n  }\n}\n\nvar aDate = new MyDate();\nconsole.log(aDate.getTime());\nconsole.log(aDate.getFormattedDate());\n\n// Extend Uint8Array\nclass ExtendedUint8Array extends Uint8Array {\n  constructor() {\n    super(10);\n    this[0] = 255;\n    this[1] = 0xFFA;\n  }\n}\n\nvar eua = new ExtendedUint8Array();\nconsole.log(eua.byteLength);\n\n// Extend DOM Audio element\nclass MyAudio extends Audio {\n  constructor() {\n    super();\n    this._lyrics = '';\n  }\n\n  get lyrics() {\n    return this._lyrics;\n  }\n\n  set lyrics(str) {\n    this._lyrics = str;\n  }\n}\n\nvar player = new MyAudio();\nplayer.controls = true;\nplayer.lyrics = 'Never gonna give you up';\ndocument.querySelector('body').appendChild(player);\nconsole.log(player.lyrics);\n\n// Note: The V8 in Chrome 42 supports subclassing built-ins but Arrays.\n// Subclassing arrays supported in Chrome 43.\n\nclass Stack extends Array {\n  constructor() {\n    super();\n  }\n\n  top() {\n    return this[this.length - 1];\n  }\n}\n\nvar stack = new Stack();\nstack.push('world');\nstack.push('hello');\nconsole.log(stack.top());\nconsole.log(stack.length);\n```","source":"_posts/Class.md","raw":"---\ntitle: class\ndate: 2017-07-13 10:33:42\ncategories: [javascript, MDN]\ntags: [class]\n---\n> ECMAScript 2015 中引入的 JavaScript **class** 主要是 JavaScript 现有的基于原型的继承的语法糖。 类语法不是向JavaScript引入一个新的面向对象的继承模型。JavaScript类提供了一个更简单和更清晰的语法来创建对象并处理继承。\n\n## 定义\n类实际上是个“特殊的函数”，就像你能够定义的函数表达式和函数声明一样，类语法有两个组成部分：类表达式和类声明。\n\n### 类声明\n定义一个类的一种方法是使用一个类声明。要声明一个类，你可以使用带有class关键字的类名（这里是“Rectangle”）。\n```js\nclass Rectangle {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n```\n\n\n#### 提升\n函数声明和类声明之间的一个重要区别是函数声明会声明提升，类声明不会。你首先需要声明你的类，然后访问它，\n```js\nlet p = new Rectangle(); \n\n// ReferenceError\n\nclass Rectangle {}\n```\n### 类表达式\n一个类表达式是定义一个类的另一种方式。类表达式可以是被命名的或匿名的。赋予一个命名类表达式的名称是类的主体的本地名称。\n```js\n/* 匿名类 */ \nlet Rectangle = class {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n};\n\n/* 命名的类 */ \nlet Rectangle = class Rectangle {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n};\n```\n## 类体和方法定义\n一个类的类体是一对花括号/大括号 {} 中的部分。这是你定义类成员的位置，如方法或构造函数。\n\n### 严格模式\n类声明和类表达式的主体都执行在严格模式下。\n\n### 构造函数\n[构造函数](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/constructor)方法是一个特殊的方法，其用于创建和初始化使用一个类创建的一个对象。一个类只能拥有一个名为 “constructor”的特殊方法。如果类包含多个构造函数的方法，则将抛出 一个SyntaxError 。\n\n一个构造函数可以使用 super 关键字来调用一个父类的构造函数。\n\n### 原型方法  \n### 静态方法\nstatic 关键字用来定义一个类的一个静态方法。调用静态方法而不实例化其类，不能通过一个类实例调用静态方法。静态方法通常用于为一个应用程序创建工具函数。\n\n## 使用 extends 创建子类\n[extends](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/extends) 关键字在类声明或类表达式中用于创建一个类作为另一个类的一个子类。\n```js\nclass Animal { \n  constructor(name) {\n    this.name = name;\n  }\n  \n  speak() {\n    console.log(this.name + ' makes a noise.');\n  }\n}\n\nclass Dog extends Animal {\n  speak() {\n    console.log(this.name + ' barks.');\n  }\n}\n\nvar d = new Dog('Mitzie');\n// 'Mitzie barks.'\nd.speak();\n\n```\n如果子类中存在构造函数，则需要在使用“this”之前首先调用super（）。\n也可以扩展传统的基于函数的“类”：\n\n```js\nfunction Animal (name) {\n  this.name = name;  \n}\nAnimal.prototype.speak = function () {\n  console.log(this.name + ' makes a noise.');\n}\n\nclass Dog extends Animal {\n  speak() {\n    super.speak();\n    console.log(this.name + ' barks.');\n  }\n}\n\nvar d = new Dog('Mitzie');\nd.speak();\n```\n请注意，类不能扩展常规（不可构造/非构造的）对象。如果要继承常规对象，可以改用[Object.setPrototypeOf()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf)\n```js\n\nvar Animal = {\n  speak() {\n    console.log(this.name + ' makes a noise.');\n  }\n};\n\nclass Dog {\n  constructor(name) {\n    this.name = name;\n  }\n  speak() {\n    super.speak();\n    console.log(this.name + ' barks.');\n  }\n}\nObject.setPrototypeOf(Dog.prototype, Animal);\n\nvar d = new Dog('Mitzie');\nd.speak();\n```\n## Species\n你可能希望在派生数组类 MyArray 中返回 Array对象。这种类/种类模式允许你覆盖默认的构造函数。\n\n例如，当使用像map()返回默认构造函数的方法时，您希望这些方法返回一个父Array对象，而不是MyArray对象。Symbol.species 符号可以让你这样做：\n```js \nclass MyArray extends Array {\n  // Overwrite species to the parent Array constructor\n  static get [Symbol.species]() { return Array; }\n}\nvar a = new MyArray(1,2,3);\nvar mapped = a.map(x => x * x);\n\nconsole.log(mapped instanceof MyArray); \n// false\nconsole.log(mapped instanceof Array);   \n// true\n```\n## 使用 super 调用超类\nsuper 关键字用于调用对象的父对象上的函数。\n```js\nclass Cat { \n  constructor(name) {\n    this.name = name;\n  }\n  \n  speak() {\n    console.log(this.name + ' makes a noise.');\n  }\n}\n\nclass Lion extends Cat {\n  speak() {\n    super.speak();\n    console.log(this.name + ' roars.');\n  }\n}\n```\n\n## Mix-ins 混合\n抽象子类或者 mix-ins 是类的模板。 一个 ECMAScript 类只能有一个单超类，所以想要从工具类来多重继承的行为是不可能的。子类继承的只能是父类提供的功能性。因此，例如，从工具类的多重继承是不可能的。该功能必须由超类提供。\n\n一个以超类作为输入的函数和一个继承该超类的子类作为输出可以用于在ECMAScript中实现混合\n```js\nvar calculatorMixin = Base => class extends Base {\n  calc() { }\n};\n\nvar randomizerMixin = Base => class extends Base {\n  randomize() { }\n};\n```\n使用 mix-ins 的类可以像下面这样写：\n```js\n使用 mix-ins 的类可以像下面这样写：\n```\n## [example](https://googlechrome.github.io/samples/classes-es6/index.html)运用class super, static extend...\n```js\n// Example 1: Creating a new class (declaration-form)\n// ===============================================================\n\n// A base class is defined using the new reserved 'class' keyword\nclass Polygon {\n  // ..and an (optional) custom class constructor. If one is\n  // not supplied, a default constructor is used instead:\n  // constructor() { }\n  constructor(height, width) {\n    this.name = 'Polygon';\n    this.height = height;\n    this.width = width;\n  }\n\n  // Simple class instance methods using short-hand method\n  // declaration\n  sayName() {\n    console.log('Hi, I am a ', this.name + '.');\n  }\n\n  sayHistory() {\n    console.log('\"Polygon\" is derived from the Greek polus (many) ' +\n      'and gonia (angle).');\n  }\n\n  // We will look at static and subclassed methods shortly\n}\n\n// Classes are used just like ES5 constructor functions:\nlet p = new Polygon(300, 400);\np.sayName();\nconsole.log('The width of this polygon is ' + p.width);\n\n// Example 2: Creating a new class (expression-form)\n// ===============================================================\n\n// Our Polygon class above is an example of a Class declaration.\n// ES6 classes also support Class expressions - just another way\n// of defining a new class. For example:\nconst MyPoly = class Poly {\n  getPolyName() {\n    console.log('Hi. I was created with a Class expression. My name is ' +\n      Poly.name);\n  }\n};\n\nlet inst = new MyPoly();\ninst.getPolyName();\n\n// Example 3: Extending an existing class\n// ===============================================================\n\n// Classes support extending other classes, but can also extend\n// other objects. Whatever you extend must be a constructor.\n//\n// Let's extend the Polygon class to create a new derived class\n// called Square.\nclass Square extends Polygon {\n  constructor(length) {\n    // The reserved 'super' keyword is for making super-constructor\n    // calls and allows access to parent methods.\n    //\n    // Here, it will call the parent class' constructor with lengths\n    // provided for the Polygon's width and height\n    super(length, length);\n    // Note: In derived classes, super() must be called before you\n    // can use 'this'. Leaving this out will cause a reference error.\n    this.name = 'Square';\n  }\n\n  // Getter/setter methods are supported in classes,\n  // similar to their ES5 equivalents\n  get area() {\n    return this.height * this.width;\n  }\n\n  set area(value) {\n    this.area = value;\n  }\n}\n\nlet s = new Square(5);\n\ns.sayName();\nconsole.log('The area of this square is ' + s.area);\n\n// Example 4: Subclassing methods of a parent class\n// ===============================================================\n\nclass Rectangle extends Polygon {\n  constructor(height, width) {\n    super(height, width);\n    this.name = 'Rectangle';\n  }\n  // Here, sayName() is a subclassed method which\n  // overrides their superclass method of the same name.\n  sayName() {\n    console.log('Sup! My name is ', this.name + '.');\n    super.sayHistory();\n  }\n}\n\nlet r = new Rectangle(50, 60);\nr.sayName();\n\n// Example 5: Defining static methods\n// ===============================================================\n\n// Classes support static members which can be accessed without an\n// instance being present.\nclass Triple {\n  // Using the 'static' keyword creates a method which is associated\n  // with a class, but not with an instance of the class.\n  static triple(n) {\n    n = n || 1;\n    return n * 3;\n  }\n}\n\n// super.prop in this example is used for accessing super-properties from\n// a parent class. This works fine in static methods too:\nclass BiggerTriple extends Triple {\n  static triple(n) {\n    return super.triple(n) * super.triple(n);\n  }\n}\n\nconsole.log(Triple.triple());\nconsole.log(Triple.triple(6));\nconsole.log(BiggerTriple.triple(3));\n// var tp = new Triple();\n// console.log(tp.triple()); tp.triple is not a function\n\n// Example 6: Subclassing built-in classes and DOM\n// ===============================================================\n\n// Extend Date built-in\nclass MyDate extends Date {\n  constructor() {\n    super();\n  }\n\n  getFormattedDate() {\n    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n      'Oct', 'Nov', 'Dec'];\n    return this.getDate() + '-' + months[this.getMonth()] + '-' +\n      this.getFullYear();\n  }\n}\n\nvar aDate = new MyDate();\nconsole.log(aDate.getTime());\nconsole.log(aDate.getFormattedDate());\n\n// Extend Uint8Array\nclass ExtendedUint8Array extends Uint8Array {\n  constructor() {\n    super(10);\n    this[0] = 255;\n    this[1] = 0xFFA;\n  }\n}\n\nvar eua = new ExtendedUint8Array();\nconsole.log(eua.byteLength);\n\n// Extend DOM Audio element\nclass MyAudio extends Audio {\n  constructor() {\n    super();\n    this._lyrics = '';\n  }\n\n  get lyrics() {\n    return this._lyrics;\n  }\n\n  set lyrics(str) {\n    this._lyrics = str;\n  }\n}\n\nvar player = new MyAudio();\nplayer.controls = true;\nplayer.lyrics = 'Never gonna give you up';\ndocument.querySelector('body').appendChild(player);\nconsole.log(player.lyrics);\n\n// Note: The V8 in Chrome 42 supports subclassing built-ins but Arrays.\n// Subclassing arrays supported in Chrome 43.\n\nclass Stack extends Array {\n  constructor() {\n    super();\n  }\n\n  top() {\n    return this[this.length - 1];\n  }\n}\n\nvar stack = new Stack();\nstack.push('world');\nstack.push('hello');\nconsole.log(stack.top());\nconsole.log(stack.length);\n```","slug":"Class","published":1,"updated":"2017-07-13T06:04:00.140Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52nth6m000ce0mwwbjxk9l1","content":"<blockquote>\n<p>ECMAScript 2015 中引入的 JavaScript <strong>class</strong> 主要是 JavaScript 现有的基于原型的继承的语法糖。 类语法不是向JavaScript引入一个新的面向对象的继承模型。JavaScript类提供了一个更简单和更清晰的语法来创建对象并处理继承。</p>\n</blockquote>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>类实际上是个“特殊的函数”，就像你能够定义的函数表达式和函数声明一样，类语法有两个组成部分：类表达式和类声明。</p>\n<h3 id=\"类声明\"><a href=\"#类声明\" class=\"headerlink\" title=\"类声明\"></a>类声明</h3><p>定义一个类的一种方法是使用一个类声明。要声明一个类，你可以使用带有class关键字的类名（这里是“Rectangle”）。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(height, width) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.height = height;</div><div class=\"line\">    <span class=\"keyword\">this</span>.width = width;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"提升\"><a href=\"#提升\" class=\"headerlink\" title=\"提升\"></a>提升</h4><p>函数声明和类声明之间的一个重要区别是函数声明会声明提升，类声明不会。你首先需要声明你的类，然后访问它，<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> Rectangle(); </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ReferenceError</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"类表达式\"><a href=\"#类表达式\" class=\"headerlink\" title=\"类表达式\"></a>类表达式</h3><p>一个类表达式是定义一个类的另一种方式。类表达式可以是被命名的或匿名的。赋予一个命名类表达式的名称是类的主体的本地名称。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* 匿名类 */</span> </div><div class=\"line\"><span class=\"keyword\">let</span> Rectangle = <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(height, width) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.height = height;</div><div class=\"line\">    <span class=\"keyword\">this</span>.width = width;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 命名的类 */</span> </div><div class=\"line\"><span class=\"keyword\">let</span> Rectangle = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(height, width) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.height = height;</div><div class=\"line\">    <span class=\"keyword\">this</span>.width = width;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"类体和方法定义\"><a href=\"#类体和方法定义\" class=\"headerlink\" title=\"类体和方法定义\"></a>类体和方法定义</h2><p>一个类的类体是一对花括号/大括号 {} 中的部分。这是你定义类成员的位置，如方法或构造函数。</p>\n<h3 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h3><p>类声明和类表达式的主体都执行在严格模式下。</p>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/constructor\" target=\"_blank\" rel=\"external\">构造函数</a>方法是一个特殊的方法，其用于创建和初始化使用一个类创建的一个对象。一个类只能拥有一个名为 “constructor”的特殊方法。如果类包含多个构造函数的方法，则将抛出 一个SyntaxError 。</p>\n<p>一个构造函数可以使用 super 关键字来调用一个父类的构造函数。</p>\n<h3 id=\"原型方法\"><a href=\"#原型方法\" class=\"headerlink\" title=\"原型方法\"></a>原型方法</h3><h3 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h3><p>static 关键字用来定义一个类的一个静态方法。调用静态方法而不实例化其类，不能通过一个类实例调用静态方法。静态方法通常用于为一个应用程序创建工具函数。</p>\n<h2 id=\"使用-extends-创建子类\"><a href=\"#使用-extends-创建子类\" class=\"headerlink\" title=\"使用 extends 创建子类\"></a>使用 extends 创建子类</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/extends\" target=\"_blank\" rel=\"external\">extends</a> 关键字在类声明或类表达式中用于创建一个类作为另一个类的一个子类。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123; </div><div class=\"line\">  <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  speak() &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' makes a noise.'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</div><div class=\"line\">  speak() &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' barks.'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'Mitzie'</span>);</div><div class=\"line\"><span class=\"comment\">// 'Mitzie barks.'</span></div><div class=\"line\">d.speak();</div></pre></td></tr></table></figure></p>\n<p>如果子类中存在构造函数，则需要在使用“this”之前首先调用super（）。<br>也可以扩展传统的基于函数的“类”：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span> (<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name;  </div><div class=\"line\">&#125;</div><div class=\"line\">Animal.prototype.speak = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' makes a noise.'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</div><div class=\"line\">  speak() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.speak();</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' barks.'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'Mitzie'</span>);</div><div class=\"line\">d.speak();</div></pre></td></tr></table></figure>\n<p>请注意，类不能扩展常规（不可构造/非构造的）对象。如果要继承常规对象，可以改用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\" target=\"_blank\" rel=\"external\">Object.setPrototypeOf()</a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Animal = &#123;</div><div class=\"line\">  speak() &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' makes a noise.'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">  &#125;</div><div class=\"line\">  speak() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.speak();</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' barks.'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(Dog.prototype, Animal);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'Mitzie'</span>);</div><div class=\"line\">d.speak();</div></pre></td></tr></table></figure></p>\n<h2 id=\"Species\"><a href=\"#Species\" class=\"headerlink\" title=\"Species\"></a>Species</h2><p>你可能希望在派生数组类 MyArray 中返回 Array对象。这种类/种类模式允许你覆盖默认的构造函数。</p>\n<p>例如，当使用像map()返回默认构造函数的方法时，您希望这些方法返回一个父Array对象，而不是MyArray对象。Symbol.species 符号可以让你这样做：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyArray</span> <span class=\"keyword\">extends</span> <span class=\"title\">Array</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Overwrite species to the parent Array constructor</span></div><div class=\"line\">  <span class=\"keyword\">static</span> get [<span class=\"built_in\">Symbol</span>.species]() &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> MyArray(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> mapped = a.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * x);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(mapped <span class=\"keyword\">instanceof</span> MyArray); </div><div class=\"line\"><span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(mapped <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>);   </div><div class=\"line\"><span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"使用-super-调用超类\"><a href=\"#使用-super-调用超类\" class=\"headerlink\" title=\"使用 super 调用超类\"></a>使用 super 调用超类</h2><p>super 关键字用于调用对象的父对象上的函数。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> </span>&#123; </div><div class=\"line\">  <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  speak() &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' makes a noise.'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lion</span> <span class=\"keyword\">extends</span> <span class=\"title\">Cat</span> </span>&#123;</div><div class=\"line\">  speak() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.speak();</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' roars.'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Mix-ins-混合\"><a href=\"#Mix-ins-混合\" class=\"headerlink\" title=\"Mix-ins 混合\"></a>Mix-ins 混合</h2><p>抽象子类或者 mix-ins 是类的模板。 一个 ECMAScript 类只能有一个单超类，所以想要从工具类来多重继承的行为是不可能的。子类继承的只能是父类提供的功能性。因此，例如，从工具类的多重继承是不可能的。该功能必须由超类提供。</p>\n<p>一个以超类作为输入的函数和一个继承该超类的子类作为输出可以用于在ECMAScript中实现混合<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> calculatorMixin = <span class=\"function\"><span class=\"params\">Base</span> =&gt;</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">Base</span> </span>&#123;</div><div class=\"line\">  calc() &#123; &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> randomizerMixin = <span class=\"function\"><span class=\"params\">Base</span> =&gt;</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">Base</span> </span>&#123;</div><div class=\"line\">  randomize() &#123; &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>使用 mix-ins 的类可以像下面这样写：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用 mix-ins 的类可以像下面这样写：</div></pre></td></tr></table></figure></p>\n<h2 id=\"example运用class-super-static-extend…\"><a href=\"#example运用class-super-static-extend…\" class=\"headerlink\" title=\"example运用class super, static extend…\"></a><a href=\"https://googlechrome.github.io/samples/classes-es6/index.html\" target=\"_blank\" rel=\"external\">example</a>运用class super, static extend…</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Example 1: Creating a new class (declaration-form)</span></div><div class=\"line\"><span class=\"comment\">// ===============================================================</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// A base class is defined using the new reserved 'class' keyword</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Polygon</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ..and an (optional) custom class constructor. If one is</span></div><div class=\"line\">  <span class=\"comment\">// not supplied, a default constructor is used instead:</span></div><div class=\"line\">  <span class=\"comment\">// constructor() &#123; &#125;</span></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(height, width) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'Polygon'</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.height = height;</div><div class=\"line\">    <span class=\"keyword\">this</span>.width = width;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Simple class instance methods using short-hand method</span></div><div class=\"line\">  <span class=\"comment\">// declaration</span></div><div class=\"line\">  sayName() &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hi, I am a '</span>, <span class=\"keyword\">this</span>.name + <span class=\"string\">'.'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  sayHistory() &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'\"Polygon\" is derived from the Greek polus (many) '</span> +</div><div class=\"line\">      <span class=\"string\">'and gonia (angle).'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// We will look at static and subclassed methods shortly</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Classes are used just like ES5 constructor functions:</span></div><div class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> Polygon(<span class=\"number\">300</span>, <span class=\"number\">400</span>);</div><div class=\"line\">p.sayName();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'The width of this polygon is '</span> + p.width);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Example 2: Creating a new class (expression-form)</span></div><div class=\"line\"><span class=\"comment\">// ===============================================================</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Our Polygon class above is an example of a Class declaration.</span></div><div class=\"line\"><span class=\"comment\">// ES6 classes also support Class expressions - just another way</span></div><div class=\"line\"><span class=\"comment\">// of defining a new class. For example:</span></div><div class=\"line\"><span class=\"keyword\">const</span> MyPoly = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Poly</span> </span>&#123;</div><div class=\"line\">  getPolyName() &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hi. I was created with a Class expression. My name is '</span> +</div><div class=\"line\">      Poly.name);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> inst = <span class=\"keyword\">new</span> MyPoly();</div><div class=\"line\">inst.getPolyName();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Example 3: Extending an existing class</span></div><div class=\"line\"><span class=\"comment\">// ===============================================================</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Classes support extending other classes, but can also extend</span></div><div class=\"line\"><span class=\"comment\">// other objects. Whatever you extend must be a constructor.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// Let's extend the Polygon class to create a new derived class</span></div><div class=\"line\"><span class=\"comment\">// called Square.</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Polygon</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(length) &#123;</div><div class=\"line\">    <span class=\"comment\">// The reserved 'super' keyword is for making super-constructor</span></div><div class=\"line\">    <span class=\"comment\">// calls and allows access to parent methods.</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"comment\">// Here, it will call the parent class' constructor with lengths</span></div><div class=\"line\">    <span class=\"comment\">// provided for the Polygon's width and height</span></div><div class=\"line\">    <span class=\"keyword\">super</span>(length, length);</div><div class=\"line\">    <span class=\"comment\">// Note: In derived classes, super() must be called before you</span></div><div class=\"line\">    <span class=\"comment\">// can use 'this'. Leaving this out will cause a reference error.</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'Square'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Getter/setter methods are supported in classes,</span></div><div class=\"line\">  <span class=\"comment\">// similar to their ES5 equivalents</span></div><div class=\"line\">  get area() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.height * <span class=\"keyword\">this</span>.width;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  set area(value) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.area = value;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"keyword\">new</span> Square(<span class=\"number\">5</span>);</div><div class=\"line\"></div><div class=\"line\">s.sayName();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'The area of this square is '</span> + s.area);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Example 4: Subclassing methods of a parent class</span></div><div class=\"line\"><span class=\"comment\">// ===============================================================</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Polygon</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(height, width) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(height, width);</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'Rectangle'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// Here, sayName() is a subclassed method which</span></div><div class=\"line\">  <span class=\"comment\">// overrides their superclass method of the same name.</span></div><div class=\"line\">  sayName() &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Sup! My name is '</span>, <span class=\"keyword\">this</span>.name + <span class=\"string\">'.'</span>);</div><div class=\"line\">    <span class=\"keyword\">super</span>.sayHistory();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> r = <span class=\"keyword\">new</span> Rectangle(<span class=\"number\">50</span>, <span class=\"number\">60</span>);</div><div class=\"line\">r.sayName();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Example 5: Defining static methods</span></div><div class=\"line\"><span class=\"comment\">// ===============================================================</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Classes support static members which can be accessed without an</span></div><div class=\"line\"><span class=\"comment\">// instance being present.</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Triple</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Using the 'static' keyword creates a method which is associated</span></div><div class=\"line\">  <span class=\"comment\">// with a class, but not with an instance of the class.</span></div><div class=\"line\">  <span class=\"keyword\">static</span> triple(n) &#123;</div><div class=\"line\">    n = n || <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> n * <span class=\"number\">3</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// super.prop in this example is used for accessing super-properties from</span></div><div class=\"line\"><span class=\"comment\">// a parent class. This works fine in static methods too:</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BiggerTriple</span> <span class=\"keyword\">extends</span> <span class=\"title\">Triple</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">static</span> triple(n) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.triple(n) * <span class=\"keyword\">super</span>.triple(n);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(Triple.triple());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(Triple.triple(<span class=\"number\">6</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(BiggerTriple.triple(<span class=\"number\">3</span>));</div><div class=\"line\"><span class=\"comment\">// var tp = new Triple();</span></div><div class=\"line\"><span class=\"comment\">// console.log(tp.triple()); tp.triple is not a function</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Example 6: Subclassing built-in classes and DOM</span></div><div class=\"line\"><span class=\"comment\">// ===============================================================</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Extend Date built-in</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDate</span> <span class=\"keyword\">extends</span> <span class=\"title\">Date</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  getFormattedDate() &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> months = [<span class=\"string\">'Jan'</span>, <span class=\"string\">'Feb'</span>, <span class=\"string\">'Mar'</span>, <span class=\"string\">'Apr'</span>, <span class=\"string\">'May'</span>, <span class=\"string\">'Jun'</span>, <span class=\"string\">'Jul'</span>, <span class=\"string\">'Aug'</span>, <span class=\"string\">'Sep'</span>,</div><div class=\"line\">      <span class=\"string\">'Oct'</span>, <span class=\"string\">'Nov'</span>, <span class=\"string\">'Dec'</span>];</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getDate() + <span class=\"string\">'-'</span> + months[<span class=\"keyword\">this</span>.getMonth()] + <span class=\"string\">'-'</span> +</div><div class=\"line\">      <span class=\"keyword\">this</span>.getFullYear();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> aDate = <span class=\"keyword\">new</span> MyDate();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(aDate.getTime());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(aDate.getFormattedDate());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Extend Uint8Array</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExtendedUint8Array</span> <span class=\"keyword\">extends</span> <span class=\"title\">Uint8Array</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(<span class=\"number\">10</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>[<span class=\"number\">0</span>] = <span class=\"number\">255</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>[<span class=\"number\">1</span>] = <span class=\"number\">0xFFA</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> eua = <span class=\"keyword\">new</span> ExtendedUint8Array();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(eua.byteLength);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Extend DOM Audio element</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAudio</span> <span class=\"keyword\">extends</span> <span class=\"title\">Audio</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>();</div><div class=\"line\">    <span class=\"keyword\">this</span>._lyrics = <span class=\"string\">''</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  get lyrics() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._lyrics;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  set lyrics(str) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._lyrics = str;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> player = <span class=\"keyword\">new</span> MyAudio();</div><div class=\"line\">player.controls = <span class=\"literal\">true</span>;</div><div class=\"line\">player.lyrics = <span class=\"string\">'Never gonna give you up'</span>;</div><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'body'</span>).appendChild(player);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(player.lyrics);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Note: The V8 in Chrome 42 supports subclassing built-ins but Arrays.</span></div><div class=\"line\"><span class=\"comment\">// Subclassing arrays supported in Chrome 43.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span> <span class=\"keyword\">extends</span> <span class=\"title\">Array</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  top() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[<span class=\"keyword\">this</span>.length - <span class=\"number\">1</span>];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> stack = <span class=\"keyword\">new</span> Stack();</div><div class=\"line\">stack.push(<span class=\"string\">'world'</span>);</div><div class=\"line\">stack.push(<span class=\"string\">'hello'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(stack.top());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(stack.length);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>ECMAScript 2015 中引入的 JavaScript <strong>class</strong> 主要是 JavaScript 现有的基于原型的继承的语法糖。 类语法不是向JavaScript引入一个新的面向对象的继承模型。JavaScript类提供了一个更简单和更清晰的语法来创建对象并处理继承。</p>\n</blockquote>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>类实际上是个“特殊的函数”，就像你能够定义的函数表达式和函数声明一样，类语法有两个组成部分：类表达式和类声明。</p>\n<h3 id=\"类声明\"><a href=\"#类声明\" class=\"headerlink\" title=\"类声明\"></a>类声明</h3><p>定义一个类的一种方法是使用一个类声明。要声明一个类，你可以使用带有class关键字的类名（这里是“Rectangle”）。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(height, width) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.height = height;</div><div class=\"line\">    <span class=\"keyword\">this</span>.width = width;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"提升\"><a href=\"#提升\" class=\"headerlink\" title=\"提升\"></a>提升</h4><p>函数声明和类声明之间的一个重要区别是函数声明会声明提升，类声明不会。你首先需要声明你的类，然后访问它，<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> Rectangle(); </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ReferenceError</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"类表达式\"><a href=\"#类表达式\" class=\"headerlink\" title=\"类表达式\"></a>类表达式</h3><p>一个类表达式是定义一个类的另一种方式。类表达式可以是被命名的或匿名的。赋予一个命名类表达式的名称是类的主体的本地名称。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* 匿名类 */</span> </div><div class=\"line\"><span class=\"keyword\">let</span> Rectangle = <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(height, width) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.height = height;</div><div class=\"line\">    <span class=\"keyword\">this</span>.width = width;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 命名的类 */</span> </div><div class=\"line\"><span class=\"keyword\">let</span> Rectangle = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(height, width) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.height = height;</div><div class=\"line\">    <span class=\"keyword\">this</span>.width = width;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"类体和方法定义\"><a href=\"#类体和方法定义\" class=\"headerlink\" title=\"类体和方法定义\"></a>类体和方法定义</h2><p>一个类的类体是一对花括号/大括号 {} 中的部分。这是你定义类成员的位置，如方法或构造函数。</p>\n<h3 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h3><p>类声明和类表达式的主体都执行在严格模式下。</p>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/constructor\" target=\"_blank\" rel=\"external\">构造函数</a>方法是一个特殊的方法，其用于创建和初始化使用一个类创建的一个对象。一个类只能拥有一个名为 “constructor”的特殊方法。如果类包含多个构造函数的方法，则将抛出 一个SyntaxError 。</p>\n<p>一个构造函数可以使用 super 关键字来调用一个父类的构造函数。</p>\n<h3 id=\"原型方法\"><a href=\"#原型方法\" class=\"headerlink\" title=\"原型方法\"></a>原型方法</h3><h3 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h3><p>static 关键字用来定义一个类的一个静态方法。调用静态方法而不实例化其类，不能通过一个类实例调用静态方法。静态方法通常用于为一个应用程序创建工具函数。</p>\n<h2 id=\"使用-extends-创建子类\"><a href=\"#使用-extends-创建子类\" class=\"headerlink\" title=\"使用 extends 创建子类\"></a>使用 extends 创建子类</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/extends\" target=\"_blank\" rel=\"external\">extends</a> 关键字在类声明或类表达式中用于创建一个类作为另一个类的一个子类。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123; </div><div class=\"line\">  <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  speak() &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' makes a noise.'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</div><div class=\"line\">  speak() &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' barks.'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'Mitzie'</span>);</div><div class=\"line\"><span class=\"comment\">// 'Mitzie barks.'</span></div><div class=\"line\">d.speak();</div></pre></td></tr></table></figure></p>\n<p>如果子类中存在构造函数，则需要在使用“this”之前首先调用super（）。<br>也可以扩展传统的基于函数的“类”：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span> (<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name;  </div><div class=\"line\">&#125;</div><div class=\"line\">Animal.prototype.speak = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' makes a noise.'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</div><div class=\"line\">  speak() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.speak();</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' barks.'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'Mitzie'</span>);</div><div class=\"line\">d.speak();</div></pre></td></tr></table></figure>\n<p>请注意，类不能扩展常规（不可构造/非构造的）对象。如果要继承常规对象，可以改用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\" target=\"_blank\" rel=\"external\">Object.setPrototypeOf()</a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Animal = &#123;</div><div class=\"line\">  speak() &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' makes a noise.'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">  &#125;</div><div class=\"line\">  speak() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.speak();</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' barks.'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(Dog.prototype, Animal);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'Mitzie'</span>);</div><div class=\"line\">d.speak();</div></pre></td></tr></table></figure></p>\n<h2 id=\"Species\"><a href=\"#Species\" class=\"headerlink\" title=\"Species\"></a>Species</h2><p>你可能希望在派生数组类 MyArray 中返回 Array对象。这种类/种类模式允许你覆盖默认的构造函数。</p>\n<p>例如，当使用像map()返回默认构造函数的方法时，您希望这些方法返回一个父Array对象，而不是MyArray对象。Symbol.species 符号可以让你这样做：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyArray</span> <span class=\"keyword\">extends</span> <span class=\"title\">Array</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Overwrite species to the parent Array constructor</span></div><div class=\"line\">  <span class=\"keyword\">static</span> get [<span class=\"built_in\">Symbol</span>.species]() &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> MyArray(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> mapped = a.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * x);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(mapped <span class=\"keyword\">instanceof</span> MyArray); </div><div class=\"line\"><span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(mapped <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>);   </div><div class=\"line\"><span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"使用-super-调用超类\"><a href=\"#使用-super-调用超类\" class=\"headerlink\" title=\"使用 super 调用超类\"></a>使用 super 调用超类</h2><p>super 关键字用于调用对象的父对象上的函数。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> </span>&#123; </div><div class=\"line\">  <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  speak() &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' makes a noise.'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lion</span> <span class=\"keyword\">extends</span> <span class=\"title\">Cat</span> </span>&#123;</div><div class=\"line\">  speak() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.speak();</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">' roars.'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Mix-ins-混合\"><a href=\"#Mix-ins-混合\" class=\"headerlink\" title=\"Mix-ins 混合\"></a>Mix-ins 混合</h2><p>抽象子类或者 mix-ins 是类的模板。 一个 ECMAScript 类只能有一个单超类，所以想要从工具类来多重继承的行为是不可能的。子类继承的只能是父类提供的功能性。因此，例如，从工具类的多重继承是不可能的。该功能必须由超类提供。</p>\n<p>一个以超类作为输入的函数和一个继承该超类的子类作为输出可以用于在ECMAScript中实现混合<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> calculatorMixin = <span class=\"function\"><span class=\"params\">Base</span> =&gt;</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">Base</span> </span>&#123;</div><div class=\"line\">  calc() &#123; &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> randomizerMixin = <span class=\"function\"><span class=\"params\">Base</span> =&gt;</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">Base</span> </span>&#123;</div><div class=\"line\">  randomize() &#123; &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>使用 mix-ins 的类可以像下面这样写：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用 mix-ins 的类可以像下面这样写：</div></pre></td></tr></table></figure></p>\n<h2 id=\"example运用class-super-static-extend…\"><a href=\"#example运用class-super-static-extend…\" class=\"headerlink\" title=\"example运用class super, static extend…\"></a><a href=\"https://googlechrome.github.io/samples/classes-es6/index.html\" target=\"_blank\" rel=\"external\">example</a>运用class super, static extend…</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Example 1: Creating a new class (declaration-form)</span></div><div class=\"line\"><span class=\"comment\">// ===============================================================</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// A base class is defined using the new reserved 'class' keyword</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Polygon</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ..and an (optional) custom class constructor. If one is</span></div><div class=\"line\">  <span class=\"comment\">// not supplied, a default constructor is used instead:</span></div><div class=\"line\">  <span class=\"comment\">// constructor() &#123; &#125;</span></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(height, width) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'Polygon'</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.height = height;</div><div class=\"line\">    <span class=\"keyword\">this</span>.width = width;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Simple class instance methods using short-hand method</span></div><div class=\"line\">  <span class=\"comment\">// declaration</span></div><div class=\"line\">  sayName() &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hi, I am a '</span>, <span class=\"keyword\">this</span>.name + <span class=\"string\">'.'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  sayHistory() &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'\"Polygon\" is derived from the Greek polus (many) '</span> +</div><div class=\"line\">      <span class=\"string\">'and gonia (angle).'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// We will look at static and subclassed methods shortly</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Classes are used just like ES5 constructor functions:</span></div><div class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> Polygon(<span class=\"number\">300</span>, <span class=\"number\">400</span>);</div><div class=\"line\">p.sayName();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'The width of this polygon is '</span> + p.width);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Example 2: Creating a new class (expression-form)</span></div><div class=\"line\"><span class=\"comment\">// ===============================================================</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Our Polygon class above is an example of a Class declaration.</span></div><div class=\"line\"><span class=\"comment\">// ES6 classes also support Class expressions - just another way</span></div><div class=\"line\"><span class=\"comment\">// of defining a new class. For example:</span></div><div class=\"line\"><span class=\"keyword\">const</span> MyPoly = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Poly</span> </span>&#123;</div><div class=\"line\">  getPolyName() &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hi. I was created with a Class expression. My name is '</span> +</div><div class=\"line\">      Poly.name);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> inst = <span class=\"keyword\">new</span> MyPoly();</div><div class=\"line\">inst.getPolyName();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Example 3: Extending an existing class</span></div><div class=\"line\"><span class=\"comment\">// ===============================================================</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Classes support extending other classes, but can also extend</span></div><div class=\"line\"><span class=\"comment\">// other objects. Whatever you extend must be a constructor.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// Let's extend the Polygon class to create a new derived class</span></div><div class=\"line\"><span class=\"comment\">// called Square.</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Polygon</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(length) &#123;</div><div class=\"line\">    <span class=\"comment\">// The reserved 'super' keyword is for making super-constructor</span></div><div class=\"line\">    <span class=\"comment\">// calls and allows access to parent methods.</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"comment\">// Here, it will call the parent class' constructor with lengths</span></div><div class=\"line\">    <span class=\"comment\">// provided for the Polygon's width and height</span></div><div class=\"line\">    <span class=\"keyword\">super</span>(length, length);</div><div class=\"line\">    <span class=\"comment\">// Note: In derived classes, super() must be called before you</span></div><div class=\"line\">    <span class=\"comment\">// can use 'this'. Leaving this out will cause a reference error.</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'Square'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Getter/setter methods are supported in classes,</span></div><div class=\"line\">  <span class=\"comment\">// similar to their ES5 equivalents</span></div><div class=\"line\">  get area() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.height * <span class=\"keyword\">this</span>.width;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  set area(value) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.area = value;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"keyword\">new</span> Square(<span class=\"number\">5</span>);</div><div class=\"line\"></div><div class=\"line\">s.sayName();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'The area of this square is '</span> + s.area);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Example 4: Subclassing methods of a parent class</span></div><div class=\"line\"><span class=\"comment\">// ===============================================================</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> <span class=\"keyword\">extends</span> <span class=\"title\">Polygon</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(height, width) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(height, width);</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'Rectangle'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// Here, sayName() is a subclassed method which</span></div><div class=\"line\">  <span class=\"comment\">// overrides their superclass method of the same name.</span></div><div class=\"line\">  sayName() &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Sup! My name is '</span>, <span class=\"keyword\">this</span>.name + <span class=\"string\">'.'</span>);</div><div class=\"line\">    <span class=\"keyword\">super</span>.sayHistory();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> r = <span class=\"keyword\">new</span> Rectangle(<span class=\"number\">50</span>, <span class=\"number\">60</span>);</div><div class=\"line\">r.sayName();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Example 5: Defining static methods</span></div><div class=\"line\"><span class=\"comment\">// ===============================================================</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Classes support static members which can be accessed without an</span></div><div class=\"line\"><span class=\"comment\">// instance being present.</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Triple</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Using the 'static' keyword creates a method which is associated</span></div><div class=\"line\">  <span class=\"comment\">// with a class, but not with an instance of the class.</span></div><div class=\"line\">  <span class=\"keyword\">static</span> triple(n) &#123;</div><div class=\"line\">    n = n || <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> n * <span class=\"number\">3</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// super.prop in this example is used for accessing super-properties from</span></div><div class=\"line\"><span class=\"comment\">// a parent class. This works fine in static methods too:</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BiggerTriple</span> <span class=\"keyword\">extends</span> <span class=\"title\">Triple</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">static</span> triple(n) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.triple(n) * <span class=\"keyword\">super</span>.triple(n);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(Triple.triple());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(Triple.triple(<span class=\"number\">6</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(BiggerTriple.triple(<span class=\"number\">3</span>));</div><div class=\"line\"><span class=\"comment\">// var tp = new Triple();</span></div><div class=\"line\"><span class=\"comment\">// console.log(tp.triple()); tp.triple is not a function</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Example 6: Subclassing built-in classes and DOM</span></div><div class=\"line\"><span class=\"comment\">// ===============================================================</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Extend Date built-in</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDate</span> <span class=\"keyword\">extends</span> <span class=\"title\">Date</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  getFormattedDate() &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> months = [<span class=\"string\">'Jan'</span>, <span class=\"string\">'Feb'</span>, <span class=\"string\">'Mar'</span>, <span class=\"string\">'Apr'</span>, <span class=\"string\">'May'</span>, <span class=\"string\">'Jun'</span>, <span class=\"string\">'Jul'</span>, <span class=\"string\">'Aug'</span>, <span class=\"string\">'Sep'</span>,</div><div class=\"line\">      <span class=\"string\">'Oct'</span>, <span class=\"string\">'Nov'</span>, <span class=\"string\">'Dec'</span>];</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getDate() + <span class=\"string\">'-'</span> + months[<span class=\"keyword\">this</span>.getMonth()] + <span class=\"string\">'-'</span> +</div><div class=\"line\">      <span class=\"keyword\">this</span>.getFullYear();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> aDate = <span class=\"keyword\">new</span> MyDate();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(aDate.getTime());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(aDate.getFormattedDate());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Extend Uint8Array</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExtendedUint8Array</span> <span class=\"keyword\">extends</span> <span class=\"title\">Uint8Array</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(<span class=\"number\">10</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>[<span class=\"number\">0</span>] = <span class=\"number\">255</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>[<span class=\"number\">1</span>] = <span class=\"number\">0xFFA</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> eua = <span class=\"keyword\">new</span> ExtendedUint8Array();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(eua.byteLength);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Extend DOM Audio element</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAudio</span> <span class=\"keyword\">extends</span> <span class=\"title\">Audio</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>();</div><div class=\"line\">    <span class=\"keyword\">this</span>._lyrics = <span class=\"string\">''</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  get lyrics() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._lyrics;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  set lyrics(str) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>._lyrics = str;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> player = <span class=\"keyword\">new</span> MyAudio();</div><div class=\"line\">player.controls = <span class=\"literal\">true</span>;</div><div class=\"line\">player.lyrics = <span class=\"string\">'Never gonna give you up'</span>;</div><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'body'</span>).appendChild(player);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(player.lyrics);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Note: The V8 in Chrome 42 supports subclassing built-ins but Arrays.</span></div><div class=\"line\"><span class=\"comment\">// Subclassing arrays supported in Chrome 43.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span> <span class=\"keyword\">extends</span> <span class=\"title\">Array</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  top() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[<span class=\"keyword\">this</span>.length - <span class=\"number\">1</span>];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> stack = <span class=\"keyword\">new</span> Stack();</div><div class=\"line\">stack.push(<span class=\"string\">'world'</span>);</div><div class=\"line\">stack.push(<span class=\"string\">'hello'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(stack.top());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(stack.length);</div></pre></td></tr></table></figure>"},{"title":"组合模式(Composite)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n---\n\n### ES6实现\n``` js\nclass Component {\n    constructor() {\n        console.log('Component Class created');\n    }\n\n    operation() {\n        console.log('Component.operation invoked');\n    }\n\n    add(Component) {\n        console.log('Component.add invoked');\n    }\n\n    remove(Component) {\n        console.log('Component.remove invoked');\n    }\n\n    getChild(key) {\n        console.log('Component.getChild invoked');\n    }\n}\n\nclass Leaf extends Component {\n    constructor(name) {\n        super();\n        this.name = name;\n        console.log('Leaf Class created');\n    }\n\n    operation() {\n        console.log('Leaf.operation invoked');\n        console.log(this.name);\n    }\n}\n\nclass Composite extends Component {\n    constructor(name) {\n        super();\n        this.name = name;\n        this.children = [];\n        console.log('Composite Class created');\n    }\n\n    operation() {\n        console.log('Composite operation for: ' + this.name)\n        for (var i in this.children) {\n            this.children[i].operation();\n        }\n    }\n\n    add(Component) {\n        console.log('Composite.add invoked');\n        this.children.push(Component);\n    }\n\n    remove(Component) {\n        console.log('Composite.remove invoked');\n        for (var i in this.children) {\n            if (this.children[i] === Component) {\n                this.children.splice(i, 1);\n            }\n        }\n    }\n\n    getChild(key) {\n        console.log('Composite.getChild invoked');\n        return this.children[key];\n    }\n}\n\nvar composite1 = new Composite('C1');\ncomposite1.add(new Leaf('L1'));\ncomposite1.add(new Leaf('L2'));\nvar composite2 = new Composite('C2');\ncomposite2.add(composite1);\ncomposite1.getChild(1).operation();\ncomposite2.operation();\n```\n---\n\n### Typescript实现\n``` ts\nnamespace CompositePattern {\n    export interface Component {\n        operation(): void;\n    }\n\n    export class Composite implements Component {\n\n        private list: Component[];\n        private s: String;\n\n        constructor(s: String) {\n            this.list = [];\n            this.s = s;\n        }\n\n        public operation(): void {\n            console.log(\"`operation of `\", this.s)\n            for (var i = 0; i < this.list.length; i += 1) {\n                this.list[i].operation();\n            }\n        }\n\n        public add(c: Component): void {\n            this.list.push(c);\n        }\n\n        public remove(i: number): void {\n            if (this.list.length <= i) {\n                throw new Error(\"index out of bound!\");\n            }\n            this.list.splice(i, 1);\n        }\n    }\n\n    export class Leaf implements Component {\n        private s: String;\n        constructor(s: String) {\n            this.s = s;\n        }\n        public operation(): void {\n            console.log(\"`operation` of Leaf\", this.s, \" is called.\");\n        }\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Composite.md","raw":"---\ntitle: 组合模式(Composite)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Structural Patterns]\ntags: [javasctipt, 组合模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n---\n\n### ES6实现\n``` js\nclass Component {\n    constructor() {\n        console.log('Component Class created');\n    }\n\n    operation() {\n        console.log('Component.operation invoked');\n    }\n\n    add(Component) {\n        console.log('Component.add invoked');\n    }\n\n    remove(Component) {\n        console.log('Component.remove invoked');\n    }\n\n    getChild(key) {\n        console.log('Component.getChild invoked');\n    }\n}\n\nclass Leaf extends Component {\n    constructor(name) {\n        super();\n        this.name = name;\n        console.log('Leaf Class created');\n    }\n\n    operation() {\n        console.log('Leaf.operation invoked');\n        console.log(this.name);\n    }\n}\n\nclass Composite extends Component {\n    constructor(name) {\n        super();\n        this.name = name;\n        this.children = [];\n        console.log('Composite Class created');\n    }\n\n    operation() {\n        console.log('Composite operation for: ' + this.name)\n        for (var i in this.children) {\n            this.children[i].operation();\n        }\n    }\n\n    add(Component) {\n        console.log('Composite.add invoked');\n        this.children.push(Component);\n    }\n\n    remove(Component) {\n        console.log('Composite.remove invoked');\n        for (var i in this.children) {\n            if (this.children[i] === Component) {\n                this.children.splice(i, 1);\n            }\n        }\n    }\n\n    getChild(key) {\n        console.log('Composite.getChild invoked');\n        return this.children[key];\n    }\n}\n\nvar composite1 = new Composite('C1');\ncomposite1.add(new Leaf('L1'));\ncomposite1.add(new Leaf('L2'));\nvar composite2 = new Composite('C2');\ncomposite2.add(composite1);\ncomposite1.getChild(1).operation();\ncomposite2.operation();\n```\n---\n\n### Typescript实现\n``` ts\nnamespace CompositePattern {\n    export interface Component {\n        operation(): void;\n    }\n\n    export class Composite implements Component {\n\n        private list: Component[];\n        private s: String;\n\n        constructor(s: String) {\n            this.list = [];\n            this.s = s;\n        }\n\n        public operation(): void {\n            console.log(\"`operation of `\", this.s)\n            for (var i = 0; i < this.list.length; i += 1) {\n                this.list[i].operation();\n            }\n        }\n\n        public add(c: Component): void {\n            this.list.push(c);\n        }\n\n        public remove(i: number): void {\n            if (this.list.length <= i) {\n                throw new Error(\"index out of bound!\");\n            }\n            this.list.splice(i, 1);\n        }\n    }\n\n    export class Leaf implements Component {\n        private s: String;\n        constructor(s: String) {\n            this.s = s;\n        }\n        public operation(): void {\n            console.log(\"`operation` of Leaf\", this.s, \" is called.\");\n        }\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Composite","published":1,"updated":"2017-07-08T08:04:09.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52nth6n000de0mwjehcihm2","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component.operation invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    add(Component) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component.add invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    remove(Component) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component.remove invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    getChild(key) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component.getChild invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Leaf</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Leaf Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Leaf.operation invoked'</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Composite</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.children = [];</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Composite Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Composite operation for: '</span> + <span class=\"keyword\">this</span>.name)</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.children) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.children[i].operation();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    add(Component) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Composite.add invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.children.push(Component);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    remove(Component) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Composite.remove invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.children) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.children[i] === Component) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.children.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    getChild(key) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Composite.getChild invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.children[key];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> composite1 = <span class=\"keyword\">new</span> Composite(<span class=\"string\">'C1'</span>);</div><div class=\"line\">composite1.add(<span class=\"keyword\">new</span> Leaf(<span class=\"string\">'L1'</span>));</div><div class=\"line\">composite1.add(<span class=\"keyword\">new</span> Leaf(<span class=\"string\">'L2'</span>));</div><div class=\"line\"><span class=\"keyword\">var</span> composite2 = <span class=\"keyword\">new</span> Composite(<span class=\"string\">'C2'</span>);</div><div class=\"line\">composite2.add(composite1);</div><div class=\"line\">composite1.getChild(<span class=\"number\">1</span>).operation();</div><div class=\"line\">composite2.operation();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> CompositePattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Component &#123;</div><div class=\"line\">        operation(): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Composite <span class=\"keyword\">implements</span> Component &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> list: Component[];</div><div class=\"line\">        <span class=\"keyword\">private</span> s: <span class=\"built_in\">String</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">s: <span class=\"built_in\">String</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.list = [];</div><div class=\"line\">            <span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation of `\"</span>, <span class=\"keyword\">this</span>.s)</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.list.length; i += <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.list[i].operation();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> add(c: Component): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.list.push(c);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> remove(i: <span class=\"built_in\">number</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.list.length &lt;= i) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"index out of bound!\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">this</span>.list.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Leaf <span class=\"keyword\">implements</span> Component &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> s: <span class=\"built_in\">String</span>;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">s: <span class=\"built_in\">String</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">public</span> operation(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation` of Leaf\"</span>, <span class=\"keyword\">this</span>.s, <span class=\"string\">\" is called.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component.operation invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    add(Component) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component.add invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    remove(Component) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component.remove invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    getChild(key) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component.getChild invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Leaf</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Leaf Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Leaf.operation invoked'</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Composite</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.children = [];</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Composite Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Composite operation for: '</span> + <span class=\"keyword\">this</span>.name)</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.children) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.children[i].operation();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    add(Component) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Composite.add invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.children.push(Component);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    remove(Component) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Composite.remove invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.children) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.children[i] === Component) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.children.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    getChild(key) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Composite.getChild invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.children[key];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> composite1 = <span class=\"keyword\">new</span> Composite(<span class=\"string\">'C1'</span>);</div><div class=\"line\">composite1.add(<span class=\"keyword\">new</span> Leaf(<span class=\"string\">'L1'</span>));</div><div class=\"line\">composite1.add(<span class=\"keyword\">new</span> Leaf(<span class=\"string\">'L2'</span>));</div><div class=\"line\"><span class=\"keyword\">var</span> composite2 = <span class=\"keyword\">new</span> Composite(<span class=\"string\">'C2'</span>);</div><div class=\"line\">composite2.add(composite1);</div><div class=\"line\">composite1.getChild(<span class=\"number\">1</span>).operation();</div><div class=\"line\">composite2.operation();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> CompositePattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Component &#123;</div><div class=\"line\">        operation(): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Composite <span class=\"keyword\">implements</span> Component &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> list: Component[];</div><div class=\"line\">        <span class=\"keyword\">private</span> s: <span class=\"built_in\">String</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">s: <span class=\"built_in\">String</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.list = [];</div><div class=\"line\">            <span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation of `\"</span>, <span class=\"keyword\">this</span>.s)</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.list.length; i += <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.list[i].operation();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> add(c: Component): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.list.push(c);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> remove(i: <span class=\"built_in\">number</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.list.length &lt;= i) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"index out of bound!\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">this</span>.list.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Leaf <span class=\"keyword\">implements</span> Component &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> s: <span class=\"built_in\">String</span>;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">s: <span class=\"built_in\">String</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">public</span> operation(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation` of Leaf\"</span>, <span class=\"keyword\">this</span>.s, <span class=\"string\">\" is called.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"装饰模式(Decorator)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 装饰模式的定义\n- 装饰模式：装饰模式用于动态地给一个对象增加一些额外的职责，就增加对象功 能来说，装饰模式比生成子类实现更为灵活。它是一种对象结构型模 式。\n\n### 装饰模式包含四个角色：\n- Component-抽象构件定义了对象的接口，可以给这些对 象动态增加职责（方法）；\n- ConcreteComponent-具体构件定义了具体的构件对象，实现了 在抽象构件中声明的方法，装饰器可以给它增加额外的职责（方法）；\n- Decorator-抽象装饰类是抽象构件类的子类，用于给具体构件增加职责，但是具 体职责在其子类中实现；\n- ConcreteDecorator-具体装饰类是抽象装饰类的子类，负责向构 件添加新的职责。\n\n---\n\n### ES6实现\n``` js\nclass Component {\n    constructor() {\n        console.log('Component Class created');\n    }\n\n    operation() {\n        console.log('Component.operation invoked');\n    }\n}\n\nclass ConcreteComponent extends Component {\n    constructor() {\n        super();\n        console.log('ConcreteComponent Class created');\n    }\n\n    operation() {\n        console.log('ConcreteComponent.operation invoked');\n    }\n}\n\nclass Decorator extends Component {\n    constructor(component) {\n        super();\n        this.component = component;\n        console.log('Decorator Class created');\n    }\n\n    operation() {\n        console.log('Decorator.operation invoked');\n        this.component.operation()\n    }\n}\n\nclass ConcreteDecoratorA extends Decorator {\n    constructor(component, sign) {\n        super(component);\n        this.addedState = sign;\n        console.log('ConcreteDecoratorA Class created');\n    }\n\n    operation() {\n        super.operation();\n        console.log('ConcreteDecoratorA.operation invoked');\n        console.log(this.addedState)\n    }\n}\n\nclass ConcreteDecoratorB extends Decorator {\n    constructor(component, sign) {\n        super(component);\n        this.addedState = sign;\n        console.log('ConcreteDecoratorB Class created');\n    }\n\n    operation() {\n        super.operation();\n        console.log('ConcreteDecoratorB.operation invoked');\n        console.log(this.addedState + this.addedState + this.addedState + this.addedState + this.addedState);\n    }\n\n    addedBehavior() {\n        this.operation();\n        console.log('ConcreteDecoratorB.operation invoked');\n    }\n}\n\nvar component = new ConcreteComponent();\nvar decoratorA = new ConcreteDecoratorA(component, 'decoratorA');\nvar decoratorB = new ConcreteDecoratorB(component, 'decoratorB');\nconsole.log('component: ');\ncomponent.operation();\nconsole.log('decoratorA: ');\ndecoratorA.operation();\nconsole.log('decoratorB: ');\ndecoratorB.addedBehavior();\n```\n---\n\n### Typescript实现\n``` ts\nnamespace DecoratorPattern {\n\n    export interface Component {\n        operation(): void;\n    }\n\n    export class ConcreteComponent implements Component {\n        private s: String;\n\n        constructor(s: String) {\n            this.s = s;\n        }\n\n        public operation(): void {\n            console.log(\"`operation` of ConcreteComponent\", this.s, \" is being called!\");\n        }\n    }\n\n    export class Decorator implements Component {\n        private component: Component;\n        private id: Number;\n\n        constructor(id: Number, component: Component) {\n            this.id = id;\n            this.component = component;\n        }\n\n        public get Id(): Number {\n            return this.id;\n        }\n\n        public operation(): void {\n            console.log(\"`operation` of Decorator\", this.id, \" is being called!\");\n            this.component.operation();\n        }\n    }\n\n    export class ConcreteDecorator extends Decorator {\n        constructor(id: Number, component: Component) {\n            super(id, component);\n        }\n\n        public operation(): void {\n            super.operation();\n            console.log(\"`operation` of ConcreteDecorator\", this.Id, \" is being called!\");\n        }\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Decorator.md","raw":"---\ntitle: 装饰模式(Decorator)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Structural Patterns]\ntags: [javasctipt, 装饰模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 装饰模式的定义\n- 装饰模式：装饰模式用于动态地给一个对象增加一些额外的职责，就增加对象功 能来说，装饰模式比生成子类实现更为灵活。它是一种对象结构型模 式。\n\n### 装饰模式包含四个角色：\n- Component-抽象构件定义了对象的接口，可以给这些对 象动态增加职责（方法）；\n- ConcreteComponent-具体构件定义了具体的构件对象，实现了 在抽象构件中声明的方法，装饰器可以给它增加额外的职责（方法）；\n- Decorator-抽象装饰类是抽象构件类的子类，用于给具体构件增加职责，但是具 体职责在其子类中实现；\n- ConcreteDecorator-具体装饰类是抽象装饰类的子类，负责向构 件添加新的职责。\n\n---\n\n### ES6实现\n``` js\nclass Component {\n    constructor() {\n        console.log('Component Class created');\n    }\n\n    operation() {\n        console.log('Component.operation invoked');\n    }\n}\n\nclass ConcreteComponent extends Component {\n    constructor() {\n        super();\n        console.log('ConcreteComponent Class created');\n    }\n\n    operation() {\n        console.log('ConcreteComponent.operation invoked');\n    }\n}\n\nclass Decorator extends Component {\n    constructor(component) {\n        super();\n        this.component = component;\n        console.log('Decorator Class created');\n    }\n\n    operation() {\n        console.log('Decorator.operation invoked');\n        this.component.operation()\n    }\n}\n\nclass ConcreteDecoratorA extends Decorator {\n    constructor(component, sign) {\n        super(component);\n        this.addedState = sign;\n        console.log('ConcreteDecoratorA Class created');\n    }\n\n    operation() {\n        super.operation();\n        console.log('ConcreteDecoratorA.operation invoked');\n        console.log(this.addedState)\n    }\n}\n\nclass ConcreteDecoratorB extends Decorator {\n    constructor(component, sign) {\n        super(component);\n        this.addedState = sign;\n        console.log('ConcreteDecoratorB Class created');\n    }\n\n    operation() {\n        super.operation();\n        console.log('ConcreteDecoratorB.operation invoked');\n        console.log(this.addedState + this.addedState + this.addedState + this.addedState + this.addedState);\n    }\n\n    addedBehavior() {\n        this.operation();\n        console.log('ConcreteDecoratorB.operation invoked');\n    }\n}\n\nvar component = new ConcreteComponent();\nvar decoratorA = new ConcreteDecoratorA(component, 'decoratorA');\nvar decoratorB = new ConcreteDecoratorB(component, 'decoratorB');\nconsole.log('component: ');\ncomponent.operation();\nconsole.log('decoratorA: ');\ndecoratorA.operation();\nconsole.log('decoratorB: ');\ndecoratorB.addedBehavior();\n```\n---\n\n### Typescript实现\n``` ts\nnamespace DecoratorPattern {\n\n    export interface Component {\n        operation(): void;\n    }\n\n    export class ConcreteComponent implements Component {\n        private s: String;\n\n        constructor(s: String) {\n            this.s = s;\n        }\n\n        public operation(): void {\n            console.log(\"`operation` of ConcreteComponent\", this.s, \" is being called!\");\n        }\n    }\n\n    export class Decorator implements Component {\n        private component: Component;\n        private id: Number;\n\n        constructor(id: Number, component: Component) {\n            this.id = id;\n            this.component = component;\n        }\n\n        public get Id(): Number {\n            return this.id;\n        }\n\n        public operation(): void {\n            console.log(\"`operation` of Decorator\", this.id, \" is being called!\");\n            this.component.operation();\n        }\n    }\n\n    export class ConcreteDecorator extends Decorator {\n        constructor(id: Number, component: Component) {\n            super(id, component);\n        }\n\n        public operation(): void {\n            super.operation();\n            console.log(\"`operation` of ConcreteDecorator\", this.Id, \" is being called!\");\n        }\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Decorator","published":1,"updated":"2017-07-08T08:04:09.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52nth6q000ge0mwx8lb8286","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"装饰模式的定义\"><a href=\"#装饰模式的定义\" class=\"headerlink\" title=\"装饰模式的定义\"></a>装饰模式的定义</h3><ul>\n<li>装饰模式：装饰模式用于动态地给一个对象增加一些额外的职责，就增加对象功 能来说，装饰模式比生成子类实现更为灵活。它是一种对象结构型模 式。</li>\n</ul>\n<h3 id=\"装饰模式包含四个角色：\"><a href=\"#装饰模式包含四个角色：\" class=\"headerlink\" title=\"装饰模式包含四个角色：\"></a>装饰模式包含四个角色：</h3><ul>\n<li>Component-抽象构件定义了对象的接口，可以给这些对 象动态增加职责（方法）；</li>\n<li>ConcreteComponent-具体构件定义了具体的构件对象，实现了 在抽象构件中声明的方法，装饰器可以给它增加额外的职责（方法）；</li>\n<li>Decorator-抽象装饰类是抽象构件类的子类，用于给具体构件增加职责，但是具 体职责在其子类中实现；</li>\n<li>ConcreteDecorator-具体装饰类是抽象装饰类的子类，负责向构 件添加新的职责。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component.operation invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteComponent Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteComponent.operation invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Decorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(component) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.component = component;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Decorator Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Decorator.operation invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.component.operation()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteDecoratorA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Decorator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(component, sign) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(component);</div><div class=\"line\">        <span class=\"keyword\">this</span>.addedState = sign;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteDecoratorA Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.operation();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteDecoratorA.operation invoked'</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.addedState)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteDecoratorB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Decorator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(component, sign) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(component);</div><div class=\"line\">        <span class=\"keyword\">this</span>.addedState = sign;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteDecoratorB Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.operation();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteDecoratorB.operation invoked'</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.addedState + <span class=\"keyword\">this</span>.addedState + <span class=\"keyword\">this</span>.addedState + <span class=\"keyword\">this</span>.addedState + <span class=\"keyword\">this</span>.addedState);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    addedBehavior() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.operation();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteDecoratorB.operation invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> component = <span class=\"keyword\">new</span> ConcreteComponent();</div><div class=\"line\"><span class=\"keyword\">var</span> decoratorA = <span class=\"keyword\">new</span> ConcreteDecoratorA(component, <span class=\"string\">'decoratorA'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> decoratorB = <span class=\"keyword\">new</span> ConcreteDecoratorB(component, <span class=\"string\">'decoratorB'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'component: '</span>);</div><div class=\"line\">component.operation();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'decoratorA: '</span>);</div><div class=\"line\">decoratorA.operation();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'decoratorB: '</span>);</div><div class=\"line\">decoratorB.addedBehavior();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> DecoratorPattern &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Component &#123;</div><div class=\"line\">        operation(): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteComponent <span class=\"keyword\">implements</span> Component &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> s: <span class=\"built_in\">String</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">s: <span class=\"built_in\">String</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation` of ConcreteComponent\"</span>, <span class=\"keyword\">this</span>.s, <span class=\"string\">\" is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Decorator <span class=\"keyword\">implements</span> Component &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> component: Component;</div><div class=\"line\">        <span class=\"keyword\">private</span> id: <span class=\"built_in\">Number</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">id: <span class=\"built_in\">Number</span>, component: Component</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">            <span class=\"keyword\">this</span>.component = component;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">get</span> Id(): <span class=\"built_in\">Number</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.id;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation` of Decorator\"</span>, <span class=\"keyword\">this</span>.id, <span class=\"string\">\" is being called!\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.component.operation();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteDecorator <span class=\"keyword\">extends</span> Decorator &#123;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">id: <span class=\"built_in\">Number</span>, component: Component</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(id, component);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.operation();</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation` of ConcreteDecorator\"</span>, <span class=\"keyword\">this</span>.Id, <span class=\"string\">\" is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"装饰模式的定义\"><a href=\"#装饰模式的定义\" class=\"headerlink\" title=\"装饰模式的定义\"></a>装饰模式的定义</h3><ul>\n<li>装饰模式：装饰模式用于动态地给一个对象增加一些额外的职责，就增加对象功 能来说，装饰模式比生成子类实现更为灵活。它是一种对象结构型模 式。</li>\n</ul>\n<h3 id=\"装饰模式包含四个角色：\"><a href=\"#装饰模式包含四个角色：\" class=\"headerlink\" title=\"装饰模式包含四个角色：\"></a>装饰模式包含四个角色：</h3><ul>\n<li>Component-抽象构件定义了对象的接口，可以给这些对 象动态增加职责（方法）；</li>\n<li>ConcreteComponent-具体构件定义了具体的构件对象，实现了 在抽象构件中声明的方法，装饰器可以给它增加额外的职责（方法）；</li>\n<li>Decorator-抽象装饰类是抽象构件类的子类，用于给具体构件增加职责，但是具 体职责在其子类中实现；</li>\n<li>ConcreteDecorator-具体装饰类是抽象装饰类的子类，负责向构 件添加新的职责。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component.operation invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteComponent Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteComponent.operation invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Decorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(component) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.component = component;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Decorator Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Decorator.operation invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.component.operation()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteDecoratorA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Decorator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(component, sign) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(component);</div><div class=\"line\">        <span class=\"keyword\">this</span>.addedState = sign;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteDecoratorA Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.operation();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteDecoratorA.operation invoked'</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.addedState)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteDecoratorB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Decorator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(component, sign) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(component);</div><div class=\"line\">        <span class=\"keyword\">this</span>.addedState = sign;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteDecoratorB Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.operation();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteDecoratorB.operation invoked'</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.addedState + <span class=\"keyword\">this</span>.addedState + <span class=\"keyword\">this</span>.addedState + <span class=\"keyword\">this</span>.addedState + <span class=\"keyword\">this</span>.addedState);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    addedBehavior() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.operation();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteDecoratorB.operation invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> component = <span class=\"keyword\">new</span> ConcreteComponent();</div><div class=\"line\"><span class=\"keyword\">var</span> decoratorA = <span class=\"keyword\">new</span> ConcreteDecoratorA(component, <span class=\"string\">'decoratorA'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> decoratorB = <span class=\"keyword\">new</span> ConcreteDecoratorB(component, <span class=\"string\">'decoratorB'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'component: '</span>);</div><div class=\"line\">component.operation();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'decoratorA: '</span>);</div><div class=\"line\">decoratorA.operation();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'decoratorB: '</span>);</div><div class=\"line\">decoratorB.addedBehavior();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> DecoratorPattern &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Component &#123;</div><div class=\"line\">        operation(): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteComponent <span class=\"keyword\">implements</span> Component &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> s: <span class=\"built_in\">String</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">s: <span class=\"built_in\">String</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation` of ConcreteComponent\"</span>, <span class=\"keyword\">this</span>.s, <span class=\"string\">\" is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Decorator <span class=\"keyword\">implements</span> Component &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> component: Component;</div><div class=\"line\">        <span class=\"keyword\">private</span> id: <span class=\"built_in\">Number</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">id: <span class=\"built_in\">Number</span>, component: Component</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">            <span class=\"keyword\">this</span>.component = component;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">get</span> Id(): <span class=\"built_in\">Number</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.id;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation` of Decorator\"</span>, <span class=\"keyword\">this</span>.id, <span class=\"string\">\" is being called!\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.component.operation();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteDecorator <span class=\"keyword\">extends</span> Decorator &#123;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">id: <span class=\"built_in\">Number</span>, component: Component</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(id, component);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.operation();</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation` of ConcreteDecorator\"</span>, <span class=\"keyword\">this</span>.Id, <span class=\"string\">\" is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"外观模式(Facade)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 外观模式的定义\n- 外观模式：在外观模式中，外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，\n- 外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。\n\n### 外观模式包含二个角色：\n- Facade-外观角色是在客户端直接调用的角色，在外观角色中可以知道相关的(一个或者多个)子系统的功能和责任，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；\n- SubSystem-在软件系统中可以同时有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能\n\n---\n\n### ES6实现\n``` js\nclass Facade {\n    constructor() {\n        console.log(\"Facade class created\");\n    }\n\n    gotoPage(dp) {\n        switch (dp) {\n            case \"Facade\":\n                console.log(\"This is the Facade\");\n                break;\n            case \"AbstractFactory\":\n                console.log(\"This is the AbstractFactory\");\n                break;\n            default:\n                console.log(\"nothing to be matched\");\n        }\n    }\n}\n\nlet facade = new Facade();\nfacade.gotoPage('Facade');\nfacade.gotoPage('AbstractFactory');\n```\n---\n\n### Typescript实现\n``` ts\nnamespace FacadePattern {\n\n    export class Part1 {\n        public method1(): void {\n            console.log(\"`method1` of Part1\");\n        }\n    }\n\n    export class Part2 {\n        public method2(): void {\n            console.log(\"`method2` of Part2\");\n        }\n    }\n\n    export class Part3 {\n        public method3(): void {\n            console.log(\"`method3` of Part3\");\n        }\n    }\n\n    export class Facade {\n        private part1: Part1 = new Part1();\n        private part2: Part2 = new Part2();\n        private part3: Part3 = new Part3();\n\n        public operation1(): void {\n            console.log(\"`operation1` is called ===\");\n            this.part1.method1();\n            this.part2.method2();\n            console.log(\"==========================\");\n        }\n\n        public operation2(): void {\n            console.log(\"`operation2` is called ===\");\n            this.part1.method1();\n            this.part3.method3();\n            console.log(\"==========================\");\n        }\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Facade.md","raw":"---\ntitle: 外观模式(Facade)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Structural Patterns]\ntags: [javasctipt, 外观模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 外观模式的定义\n- 外观模式：在外观模式中，外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，\n- 外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。\n\n### 外观模式包含二个角色：\n- Facade-外观角色是在客户端直接调用的角色，在外观角色中可以知道相关的(一个或者多个)子系统的功能和责任，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；\n- SubSystem-在软件系统中可以同时有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能\n\n---\n\n### ES6实现\n``` js\nclass Facade {\n    constructor() {\n        console.log(\"Facade class created\");\n    }\n\n    gotoPage(dp) {\n        switch (dp) {\n            case \"Facade\":\n                console.log(\"This is the Facade\");\n                break;\n            case \"AbstractFactory\":\n                console.log(\"This is the AbstractFactory\");\n                break;\n            default:\n                console.log(\"nothing to be matched\");\n        }\n    }\n}\n\nlet facade = new Facade();\nfacade.gotoPage('Facade');\nfacade.gotoPage('AbstractFactory');\n```\n---\n\n### Typescript实现\n``` ts\nnamespace FacadePattern {\n\n    export class Part1 {\n        public method1(): void {\n            console.log(\"`method1` of Part1\");\n        }\n    }\n\n    export class Part2 {\n        public method2(): void {\n            console.log(\"`method2` of Part2\");\n        }\n    }\n\n    export class Part3 {\n        public method3(): void {\n            console.log(\"`method3` of Part3\");\n        }\n    }\n\n    export class Facade {\n        private part1: Part1 = new Part1();\n        private part2: Part2 = new Part2();\n        private part3: Part3 = new Part3();\n\n        public operation1(): void {\n            console.log(\"`operation1` is called ===\");\n            this.part1.method1();\n            this.part2.method2();\n            console.log(\"==========================\");\n        }\n\n        public operation2(): void {\n            console.log(\"`operation2` is called ===\");\n            this.part1.method1();\n            this.part3.method3();\n            console.log(\"==========================\");\n        }\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Facade","published":1,"updated":"2017-07-08T08:04:09.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52nth6r000ie0mwpmze6qip","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"外观模式的定义\"><a href=\"#外观模式的定义\" class=\"headerlink\" title=\"外观模式的定义\"></a>外观模式的定义</h3><ul>\n<li>外观模式：在外观模式中，外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，</li>\n<li>外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。</li>\n</ul>\n<h3 id=\"外观模式包含二个角色：\"><a href=\"#外观模式包含二个角色：\" class=\"headerlink\" title=\"外观模式包含二个角色：\"></a>外观模式包含二个角色：</h3><ul>\n<li>Facade-外观角色是在客户端直接调用的角色，在外观角色中可以知道相关的(一个或者多个)子系统的功能和责任，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；</li>\n<li>SubSystem-在软件系统中可以同时有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Facade</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Facade class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    gotoPage(dp) &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (dp) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"Facade\"</span>:</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"This is the Facade\"</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"AbstractFactory\"</span>:</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"This is the AbstractFactory\"</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"nothing to be matched\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> facade = <span class=\"keyword\">new</span> Facade();</div><div class=\"line\">facade.gotoPage(<span class=\"string\">'Facade'</span>);</div><div class=\"line\">facade.gotoPage(<span class=\"string\">'AbstractFactory'</span>);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> FacadePattern &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Part1 &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> method1(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`method1` of Part1\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Part2 &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> method2(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`method2` of Part2\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Part3 &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> method3(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`method3` of Part3\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Facade &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> part1: Part1 = <span class=\"keyword\">new</span> Part1();</div><div class=\"line\">        <span class=\"keyword\">private</span> part2: Part2 = <span class=\"keyword\">new</span> Part2();</div><div class=\"line\">        <span class=\"keyword\">private</span> part3: Part3 = <span class=\"keyword\">new</span> Part3();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation1(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation1` is called ===\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.part1.method1();</div><div class=\"line\">            <span class=\"keyword\">this</span>.part2.method2();</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"==========================\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation2(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation2` is called ===\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.part1.method1();</div><div class=\"line\">            <span class=\"keyword\">this</span>.part3.method3();</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"==========================\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"外观模式的定义\"><a href=\"#外观模式的定义\" class=\"headerlink\" title=\"外观模式的定义\"></a>外观模式的定义</h3><ul>\n<li>外观模式：在外观模式中，外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，</li>\n<li>外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。</li>\n</ul>\n<h3 id=\"外观模式包含二个角色：\"><a href=\"#外观模式包含二个角色：\" class=\"headerlink\" title=\"外观模式包含二个角色：\"></a>外观模式包含二个角色：</h3><ul>\n<li>Facade-外观角色是在客户端直接调用的角色，在外观角色中可以知道相关的(一个或者多个)子系统的功能和责任，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；</li>\n<li>SubSystem-在软件系统中可以同时有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Facade</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Facade class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    gotoPage(dp) &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (dp) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"Facade\"</span>:</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"This is the Facade\"</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"AbstractFactory\"</span>:</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"This is the AbstractFactory\"</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"nothing to be matched\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> facade = <span class=\"keyword\">new</span> Facade();</div><div class=\"line\">facade.gotoPage(<span class=\"string\">'Facade'</span>);</div><div class=\"line\">facade.gotoPage(<span class=\"string\">'AbstractFactory'</span>);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> FacadePattern &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Part1 &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> method1(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`method1` of Part1\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Part2 &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> method2(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`method2` of Part2\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Part3 &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> method3(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`method3` of Part3\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Facade &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> part1: Part1 = <span class=\"keyword\">new</span> Part1();</div><div class=\"line\">        <span class=\"keyword\">private</span> part2: Part2 = <span class=\"keyword\">new</span> Part2();</div><div class=\"line\">        <span class=\"keyword\">private</span> part3: Part3 = <span class=\"keyword\">new</span> Part3();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation1(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation1` is called ===\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.part1.method1();</div><div class=\"line\">            <span class=\"keyword\">this</span>.part2.method2();</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"==========================\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation2(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation2` is called ===\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.part1.method1();</div><div class=\"line\">            <span class=\"keyword\">this</span>.part3.method3();</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"==========================\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"解构赋值","date":"2017-07-09T05:08:27.000Z","_content":"\n## [解构赋值](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\n> 解构赋值 语法是一个Javascript表达式，这使得可以将值从数组或属性从对象提取到不同的变量中。\n\n### 作用\n - 交换变量\n ```js\nvar a = 1;\nvar b = 3;\n\n[a, b] = [b, a];\nconsole.log(a); // 3\nconsole.log(b); // 1\n ```\n - 解构数组\n\n ```js\n let a, b, rest;\n\n/* array 解构赋值 */\n[a, b] = [1, 2];\nconsole.log(a); // 1\nconsole.log(b); // 2\n\n[a, b, ...rest] = [1, 2, 3, 4, 5];\nconsole.log(a); // 1\nconsole.log(b); // 2\nconsole.log(rest); // [3, 4, 5]\n\n/* object 解构赋值 */\n({a, b} = {a:1, b:2});\nconsole.log(a); // 1\nconsole.log(b); // 2\n ```\n - 解构对象\n \n ```js\n var o = {p: 42, q: true};\nvar {p, q} = o;\n\nconsole.log(p); // 42\nconsole.log(q); // true \n\n// 用新变量名赋值\nvar {p: foo, q: bar} = o;\n\nconsole.log(foo); // 42\nconsole.log(bar); // true \n ```\n - 解析一个从函数返回的数组(函数现在可以返回多个值了)\n ```js\n function f() {\n  return [1, 2];\n}\n\nvar a, b; \n[a, b] = f(); \nconsole.log(a); // 1\nconsole.log(b); // 2\n ```\n - 忽略某些返回值\n ```js\nfunction f() {\n  return [1, 2, 3];\n}\n\nvar [a, , b] = f();\nconsole.log(a); // 1\nconsole.log(b); // 3\n ```\n - 将剩余数组赋值给一个变量\n ```js\n var [a, ...b] = [1, 2, 3];\nconsole.log(a); // 1\nconsole.log(b); // [2, 3]\n```\n\n- 用正则表达式匹配提取值\n```js\nvar url = \"https://developer.mozilla.org/en-US/Web/JavaScript\";\n\nvar parsedURL = /^(\\w+)\\:\\/\\/([^\\/]+)\\/(.*)$/.exec(url);\nconsole.log(parsedURL); // [\"https://developer.mozilla.org/en-US/Web/JavaScript\", \"https\", \"developer.mozilla.org\", \"en-US/Web/JavaScript\"]\n\nvar [, protocol, fullhost, fullpath] = parsedURL;\n\nconsole.log(protocol); // \"https\"\n```\n- 函数参数默认值\n```js\nfunction drawES6Chart({size = 'big', cords = { x: 0, y: 0 }, radius = 25} = {}) \n{\n  console.log(size, cords, radius);\n  // do some chart drawing\n}\n\ndrawES6Chart({\n  cords: { x: 18, y: 30 },\n  radius: 30\n});\n```\n- 加载模块\n```js\nconst { Loader, main } = require('toolkit/loader');\n```\n- 解构嵌套对象和数组\n```js\nvar metadata = {\n    title: \"Scratchpad\",\n    translations: [\n       {\n        locale: \"de\",\n        localization_tags: [ ],\n        last_edit: \"2014-04-14T08:43:37\",\n        url: \"/de/docs/Tools/Scratchpad\",\n        title: \"JavaScript-Umgebung\"\n       }\n    ],\n    url: \"/en-US/docs/Tools/Scratchpad\"\n};\n\nvar { title: englishTitle, translations: [{ title: localeTitle }] } = metadata;\n\nconsole.log(englishTitle); // \"Scratchpad\"\nconsole.log(localeTitle);  // \"JavaScript-Umgebung\"\n```\n- For of 迭代和解构\n```js\nvar people = [\n  {\n    name: \"Mike Smith\",\n    family: {\n      mother: \"Jane Smith\",\n      father: \"Harry Smith\",\n      sister: \"Samantha Smith\"\n    },\n    age: 35\n  },\n  {\n    name: \"Tom Jones\",\n    family: {\n      mother: \"Norah Jones\",\n      father: \"Richard Jones\",\n      brother: \"Howard Jones\"\n    },\n    age: 25\n  }\n];\n\nfor (var {name: n, family: { father: f } } of people) {\n  console.log(\"Name: \" + n + \", Father: \" + f);\n}\n\n// \"Name: Mike Smith, Father: Harry Smith\"\n// \"Name: Tom Jones, Father: Richard Jones\"\n```\n\n- 从作为函数实参的对象中提取数据、\n```js\nfunction userId({id}) {\n  return id;\n}\n\nfunction whois({displayName: displayName, fullName: {firstName: name}}){\n  console.log(displayName + \" is \" + name);\n}\n\nvar user = { \n  id: 42, \n  displayName: \"jdoe\",\n  fullName: { \n      firstName: \"John\",\n      lastName: \"Doe\"\n  }\n};\n\nconsole.log(\"userId: \" + userId(user)); // \"userId: 42\"\nwhois(user); // \"jdoe is John\"\n```\n- 对象属性计算名和解构\n```js\nlet key = \"z\";\nlet { [key]: foo } = { z: \"bar\" };\n\nconsole.log(foo); // \"bar\n```\n\n","source":"_posts/DestructuringAssignment.md","raw":"---\ntitle: 解构赋值\ndate: 2017-07-09 13:08:27\ncategories: [javascript, MDN]\ntags: [解构赋值]\n---\n\n## [解构赋值](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\n> 解构赋值 语法是一个Javascript表达式，这使得可以将值从数组或属性从对象提取到不同的变量中。\n\n### 作用\n - 交换变量\n ```js\nvar a = 1;\nvar b = 3;\n\n[a, b] = [b, a];\nconsole.log(a); // 3\nconsole.log(b); // 1\n ```\n - 解构数组\n\n ```js\n let a, b, rest;\n\n/* array 解构赋值 */\n[a, b] = [1, 2];\nconsole.log(a); // 1\nconsole.log(b); // 2\n\n[a, b, ...rest] = [1, 2, 3, 4, 5];\nconsole.log(a); // 1\nconsole.log(b); // 2\nconsole.log(rest); // [3, 4, 5]\n\n/* object 解构赋值 */\n({a, b} = {a:1, b:2});\nconsole.log(a); // 1\nconsole.log(b); // 2\n ```\n - 解构对象\n \n ```js\n var o = {p: 42, q: true};\nvar {p, q} = o;\n\nconsole.log(p); // 42\nconsole.log(q); // true \n\n// 用新变量名赋值\nvar {p: foo, q: bar} = o;\n\nconsole.log(foo); // 42\nconsole.log(bar); // true \n ```\n - 解析一个从函数返回的数组(函数现在可以返回多个值了)\n ```js\n function f() {\n  return [1, 2];\n}\n\nvar a, b; \n[a, b] = f(); \nconsole.log(a); // 1\nconsole.log(b); // 2\n ```\n - 忽略某些返回值\n ```js\nfunction f() {\n  return [1, 2, 3];\n}\n\nvar [a, , b] = f();\nconsole.log(a); // 1\nconsole.log(b); // 3\n ```\n - 将剩余数组赋值给一个变量\n ```js\n var [a, ...b] = [1, 2, 3];\nconsole.log(a); // 1\nconsole.log(b); // [2, 3]\n```\n\n- 用正则表达式匹配提取值\n```js\nvar url = \"https://developer.mozilla.org/en-US/Web/JavaScript\";\n\nvar parsedURL = /^(\\w+)\\:\\/\\/([^\\/]+)\\/(.*)$/.exec(url);\nconsole.log(parsedURL); // [\"https://developer.mozilla.org/en-US/Web/JavaScript\", \"https\", \"developer.mozilla.org\", \"en-US/Web/JavaScript\"]\n\nvar [, protocol, fullhost, fullpath] = parsedURL;\n\nconsole.log(protocol); // \"https\"\n```\n- 函数参数默认值\n```js\nfunction drawES6Chart({size = 'big', cords = { x: 0, y: 0 }, radius = 25} = {}) \n{\n  console.log(size, cords, radius);\n  // do some chart drawing\n}\n\ndrawES6Chart({\n  cords: { x: 18, y: 30 },\n  radius: 30\n});\n```\n- 加载模块\n```js\nconst { Loader, main } = require('toolkit/loader');\n```\n- 解构嵌套对象和数组\n```js\nvar metadata = {\n    title: \"Scratchpad\",\n    translations: [\n       {\n        locale: \"de\",\n        localization_tags: [ ],\n        last_edit: \"2014-04-14T08:43:37\",\n        url: \"/de/docs/Tools/Scratchpad\",\n        title: \"JavaScript-Umgebung\"\n       }\n    ],\n    url: \"/en-US/docs/Tools/Scratchpad\"\n};\n\nvar { title: englishTitle, translations: [{ title: localeTitle }] } = metadata;\n\nconsole.log(englishTitle); // \"Scratchpad\"\nconsole.log(localeTitle);  // \"JavaScript-Umgebung\"\n```\n- For of 迭代和解构\n```js\nvar people = [\n  {\n    name: \"Mike Smith\",\n    family: {\n      mother: \"Jane Smith\",\n      father: \"Harry Smith\",\n      sister: \"Samantha Smith\"\n    },\n    age: 35\n  },\n  {\n    name: \"Tom Jones\",\n    family: {\n      mother: \"Norah Jones\",\n      father: \"Richard Jones\",\n      brother: \"Howard Jones\"\n    },\n    age: 25\n  }\n];\n\nfor (var {name: n, family: { father: f } } of people) {\n  console.log(\"Name: \" + n + \", Father: \" + f);\n}\n\n// \"Name: Mike Smith, Father: Harry Smith\"\n// \"Name: Tom Jones, Father: Richard Jones\"\n```\n\n- 从作为函数实参的对象中提取数据、\n```js\nfunction userId({id}) {\n  return id;\n}\n\nfunction whois({displayName: displayName, fullName: {firstName: name}}){\n  console.log(displayName + \" is \" + name);\n}\n\nvar user = { \n  id: 42, \n  displayName: \"jdoe\",\n  fullName: { \n      firstName: \"John\",\n      lastName: \"Doe\"\n  }\n};\n\nconsole.log(\"userId: \" + userId(user)); // \"userId: 42\"\nwhois(user); // \"jdoe is John\"\n```\n- 对象属性计算名和解构\n```js\nlet key = \"z\";\nlet { [key]: foo } = { z: \"bar\" };\n\nconsole.log(foo); // \"bar\n```\n\n","slug":"DestructuringAssignment","published":1,"updated":"2017-07-13T04:01:30.305Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52nth6t000me0mwwjka6l1r","content":"<h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\" target=\"_blank\" rel=\"external\">解构赋值</a></h2><blockquote>\n<p>解构赋值 语法是一个Javascript表达式，这使得可以将值从数组或属性从对象提取到不同的变量中。</p>\n</blockquote>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ul>\n<li><p>交换变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">3</span>;</div><div class=\"line\"></div><div class=\"line\">[a, b] = [b, a];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 3</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>解构数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">let</span> a, b, rest;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* array 解构赋值 */</span></div><div class=\"line\">[a, b] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></div><div class=\"line\"></div><div class=\"line\">[a, b, ...rest] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(rest); <span class=\"comment\">// [3, 4, 5]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* object 解构赋值 */</span></div><div class=\"line\">(&#123;a, b&#125; = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>解构对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">var</span> o = &#123;<span class=\"attr\">p</span>: <span class=\"number\">42</span>, <span class=\"attr\">q</span>: <span class=\"literal\">true</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> &#123;p, q&#125; = o;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p); <span class=\"comment\">// 42</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(q); <span class=\"comment\">// true </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 用新变量名赋值</span></div><div class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">p</span>: foo, <span class=\"attr\">q</span>: bar&#125; = o;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">// 42</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(bar); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>解析一个从函数返回的数组(函数现在可以返回多个值了)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a, b; </div><div class=\"line\">[a, b] = f(); </div><div class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>忽略某些返回值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> [a, , b] = f();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 3</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>将剩余数组赋值给一个变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">var</span> [a, ...b] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// [2, 3]</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>用正则表达式匹配提取值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"https://developer.mozilla.org/en-US/Web/JavaScript\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> parsedURL = <span class=\"regexp\">/^(\\w+)\\:\\/\\/([^\\/]+)\\/(.*)$/</span>.exec(url);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(parsedURL); <span class=\"comment\">// [\"https://developer.mozilla.org/en-US/Web/JavaScript\", \"https\", \"developer.mozilla.org\", \"en-US/Web/JavaScript\"]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> [, protocol, fullhost, fullpath] = parsedURL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(protocol); <span class=\"comment\">// \"https\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>函数参数默认值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawES6Chart</span>(<span class=\"params\">&#123;size = <span class=\"string\">'big'</span>, cords = &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125;, radius = <span class=\"number\">25</span>&#125; = &#123;&#125;</span>) </span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(size, cords, radius);</div><div class=\"line\">  <span class=\"comment\">// do some chart drawing</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">drawES6Chart(&#123;</div><div class=\"line\">  <span class=\"attr\">cords</span>: &#123; <span class=\"attr\">x</span>: <span class=\"number\">18</span>, <span class=\"attr\">y</span>: <span class=\"number\">30</span> &#125;,</div><div class=\"line\">  <span class=\"attr\">radius</span>: <span class=\"number\">30</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>加载模块</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123; Loader, main &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'toolkit/loader'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>解构嵌套对象和数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> metadata = &#123;</div><div class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">\"Scratchpad\"</span>,</div><div class=\"line\">    <span class=\"attr\">translations</span>: [</div><div class=\"line\">       &#123;</div><div class=\"line\">        <span class=\"attr\">locale</span>: <span class=\"string\">\"de\"</span>,</div><div class=\"line\">        <span class=\"attr\">localization_tags</span>: [ ],</div><div class=\"line\">        <span class=\"attr\">last_edit</span>: <span class=\"string\">\"2014-04-14T08:43:37\"</span>,</div><div class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">\"/de/docs/Tools/Scratchpad\"</span>,</div><div class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">\"JavaScript-Umgebung\"</span></div><div class=\"line\">       &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">\"/en-US/docs/Tools/Scratchpad\"</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">title</span>: englishTitle, <span class=\"attr\">translations</span>: [&#123; <span class=\"attr\">title</span>: localeTitle &#125;] &#125; = metadata;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(englishTitle); <span class=\"comment\">// \"Scratchpad\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(localeTitle);  <span class=\"comment\">// \"JavaScript-Umgebung\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>For of 迭代和解构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> people = [</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"Mike Smith\"</span>,</div><div class=\"line\">    <span class=\"attr\">family</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">mother</span>: <span class=\"string\">\"Jane Smith\"</span>,</div><div class=\"line\">      <span class=\"attr\">father</span>: <span class=\"string\">\"Harry Smith\"</span>,</div><div class=\"line\">      <span class=\"attr\">sister</span>: <span class=\"string\">\"Samantha Smith\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">35</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"Tom Jones\"</span>,</div><div class=\"line\">    <span class=\"attr\">family</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">mother</span>: <span class=\"string\">\"Norah Jones\"</span>,</div><div class=\"line\">      <span class=\"attr\">father</span>: <span class=\"string\">\"Richard Jones\"</span>,</div><div class=\"line\">      <span class=\"attr\">brother</span>: <span class=\"string\">\"Howard Jones\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">25</span></div><div class=\"line\">  &#125;</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> &#123;<span class=\"attr\">name</span>: n, <span class=\"attr\">family</span>: &#123; <span class=\"attr\">father</span>: f &#125; &#125; <span class=\"keyword\">of</span> people) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Name: \"</span> + n + <span class=\"string\">\", Father: \"</span> + f);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// \"Name: Mike Smith, Father: Harry Smith\"</span></div><div class=\"line\"><span class=\"comment\">// \"Name: Tom Jones, Father: Richard Jones\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>从作为函数实参的对象中提取数据、</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">userId</span>(<span class=\"params\">&#123;id&#125;</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> id;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">whois</span>(<span class=\"params\">&#123;displayName: displayName, fullName: &#123;firstName: name&#125;&#125;</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(displayName + <span class=\"string\">\" is \"</span> + name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> user = &#123; </div><div class=\"line\">  <span class=\"attr\">id</span>: <span class=\"number\">42</span>, </div><div class=\"line\">  <span class=\"attr\">displayName</span>: <span class=\"string\">\"jdoe\"</span>,</div><div class=\"line\">  <span class=\"attr\">fullName</span>: &#123; </div><div class=\"line\">      <span class=\"attr\">firstName</span>: <span class=\"string\">\"John\"</span>,</div><div class=\"line\">      <span class=\"attr\">lastName</span>: <span class=\"string\">\"Doe\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"userId: \"</span> + userId(user)); <span class=\"comment\">// \"userId: 42\"</span></div><div class=\"line\">whois(user); <span class=\"comment\">// \"jdoe is John\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>对象属性计算名和解构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> key = <span class=\"string\">\"z\"</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> &#123; [key]: foo &#125; = &#123; <span class=\"attr\">z</span>: <span class=\"string\">\"bar\"</span> &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">// \"bar</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\" target=\"_blank\" rel=\"external\">解构赋值</a></h2><blockquote>\n<p>解构赋值 语法是一个Javascript表达式，这使得可以将值从数组或属性从对象提取到不同的变量中。</p>\n</blockquote>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ul>\n<li><p>交换变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">3</span>;</div><div class=\"line\"></div><div class=\"line\">[a, b] = [b, a];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 3</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>解构数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">let</span> a, b, rest;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* array 解构赋值 */</span></div><div class=\"line\">[a, b] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></div><div class=\"line\"></div><div class=\"line\">[a, b, ...rest] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(rest); <span class=\"comment\">// [3, 4, 5]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* object 解构赋值 */</span></div><div class=\"line\">(&#123;a, b&#125; = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>解构对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">var</span> o = &#123;<span class=\"attr\">p</span>: <span class=\"number\">42</span>, <span class=\"attr\">q</span>: <span class=\"literal\">true</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> &#123;p, q&#125; = o;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(p); <span class=\"comment\">// 42</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(q); <span class=\"comment\">// true </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 用新变量名赋值</span></div><div class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">p</span>: foo, <span class=\"attr\">q</span>: bar&#125; = o;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">// 42</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(bar); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>解析一个从函数返回的数组(函数现在可以返回多个值了)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a, b; </div><div class=\"line\">[a, b] = f(); </div><div class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>忽略某些返回值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> [a, , b] = f();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 3</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>将剩余数组赋值给一个变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">var</span> [a, ...b] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// [2, 3]</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>用正则表达式匹配提取值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"https://developer.mozilla.org/en-US/Web/JavaScript\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> parsedURL = <span class=\"regexp\">/^(\\w+)\\:\\/\\/([^\\/]+)\\/(.*)$/</span>.exec(url);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(parsedURL); <span class=\"comment\">// [\"https://developer.mozilla.org/en-US/Web/JavaScript\", \"https\", \"developer.mozilla.org\", \"en-US/Web/JavaScript\"]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> [, protocol, fullhost, fullpath] = parsedURL;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(protocol); <span class=\"comment\">// \"https\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>函数参数默认值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawES6Chart</span>(<span class=\"params\">&#123;size = <span class=\"string\">'big'</span>, cords = &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125;, radius = <span class=\"number\">25</span>&#125; = &#123;&#125;</span>) </span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(size, cords, radius);</div><div class=\"line\">  <span class=\"comment\">// do some chart drawing</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">drawES6Chart(&#123;</div><div class=\"line\">  <span class=\"attr\">cords</span>: &#123; <span class=\"attr\">x</span>: <span class=\"number\">18</span>, <span class=\"attr\">y</span>: <span class=\"number\">30</span> &#125;,</div><div class=\"line\">  <span class=\"attr\">radius</span>: <span class=\"number\">30</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>加载模块</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> &#123; Loader, main &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'toolkit/loader'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>解构嵌套对象和数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> metadata = &#123;</div><div class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">\"Scratchpad\"</span>,</div><div class=\"line\">    <span class=\"attr\">translations</span>: [</div><div class=\"line\">       &#123;</div><div class=\"line\">        <span class=\"attr\">locale</span>: <span class=\"string\">\"de\"</span>,</div><div class=\"line\">        <span class=\"attr\">localization_tags</span>: [ ],</div><div class=\"line\">        <span class=\"attr\">last_edit</span>: <span class=\"string\">\"2014-04-14T08:43:37\"</span>,</div><div class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">\"/de/docs/Tools/Scratchpad\"</span>,</div><div class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">\"JavaScript-Umgebung\"</span></div><div class=\"line\">       &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">\"/en-US/docs/Tools/Scratchpad\"</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">title</span>: englishTitle, <span class=\"attr\">translations</span>: [&#123; <span class=\"attr\">title</span>: localeTitle &#125;] &#125; = metadata;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(englishTitle); <span class=\"comment\">// \"Scratchpad\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(localeTitle);  <span class=\"comment\">// \"JavaScript-Umgebung\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>For of 迭代和解构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> people = [</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"Mike Smith\"</span>,</div><div class=\"line\">    <span class=\"attr\">family</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">mother</span>: <span class=\"string\">\"Jane Smith\"</span>,</div><div class=\"line\">      <span class=\"attr\">father</span>: <span class=\"string\">\"Harry Smith\"</span>,</div><div class=\"line\">      <span class=\"attr\">sister</span>: <span class=\"string\">\"Samantha Smith\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">35</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"Tom Jones\"</span>,</div><div class=\"line\">    <span class=\"attr\">family</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">mother</span>: <span class=\"string\">\"Norah Jones\"</span>,</div><div class=\"line\">      <span class=\"attr\">father</span>: <span class=\"string\">\"Richard Jones\"</span>,</div><div class=\"line\">      <span class=\"attr\">brother</span>: <span class=\"string\">\"Howard Jones\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">25</span></div><div class=\"line\">  &#125;</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> &#123;<span class=\"attr\">name</span>: n, <span class=\"attr\">family</span>: &#123; <span class=\"attr\">father</span>: f &#125; &#125; <span class=\"keyword\">of</span> people) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Name: \"</span> + n + <span class=\"string\">\", Father: \"</span> + f);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// \"Name: Mike Smith, Father: Harry Smith\"</span></div><div class=\"line\"><span class=\"comment\">// \"Name: Tom Jones, Father: Richard Jones\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>从作为函数实参的对象中提取数据、</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">userId</span>(<span class=\"params\">&#123;id&#125;</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> id;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">whois</span>(<span class=\"params\">&#123;displayName: displayName, fullName: &#123;firstName: name&#125;&#125;</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(displayName + <span class=\"string\">\" is \"</span> + name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> user = &#123; </div><div class=\"line\">  <span class=\"attr\">id</span>: <span class=\"number\">42</span>, </div><div class=\"line\">  <span class=\"attr\">displayName</span>: <span class=\"string\">\"jdoe\"</span>,</div><div class=\"line\">  <span class=\"attr\">fullName</span>: &#123; </div><div class=\"line\">      <span class=\"attr\">firstName</span>: <span class=\"string\">\"John\"</span>,</div><div class=\"line\">      <span class=\"attr\">lastName</span>: <span class=\"string\">\"Doe\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"userId: \"</span> + userId(user)); <span class=\"comment\">// \"userId: 42\"</span></div><div class=\"line\">whois(user); <span class=\"comment\">// \"jdoe is John\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>对象属性计算名和解构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> key = <span class=\"string\">\"z\"</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> &#123; [key]: foo &#125; = &#123; <span class=\"attr\">z</span>: <span class=\"string\">\"bar\"</span> &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">// \"bar</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"享元模式(Flyweight)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 享元模式的定义\n- 享元模式：享元模式运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用，它是一种对象结构型模式。\n\n### 享元模式包含四个角色：\n- Flyweight-抽象享元类声明一个接口，通过它可以接受并作用于外部状态；\n- ConcreteFlyweight-具体享元类实现了抽象享元接口，其实例称为享元对象；\n- UnsharedConcreteFlyweight-非共享具体享元是不能被共享的抽象享元类的子类；\n- FlyweightFactory-享元工厂类用于创建并管理享元对象，它针对抽象享元类编程，将各种类型的具体享元对象存储在一个享元池中。\n---\n\n### ES6实现\n``` js\nclass FlyweightFactory {\n    constructor() {\n        this.flyweights = {};\n        console.log('FlyweightFactory Class created');\n    }\n\n    getFlyweight(key) {\n        console.log('FlyweightFactory.getFlyweight invoked');\n        if (this.flyweights[key]) {\n            return this.flyweights[key];\n        } else {\n            this.flyweights[key] = new ConcreteFlyweight(key);\n            return this.flyweights[key];\n        }\n    }\n\n    createGibberish(keys) {\n        console.log('FlyweightFactory.createGibberish invoked');\n        return new UnsharedConcreteFlyweight(keys, this);\n    }\n}\n\nclass Flyweight {\n    constructor() {\n        console.log('Flyweight Class created');\n    }\n\n    operation(extrinsicState) {\n        console.log('Flyweight.operation invoked');\n    }\n}\n\nclass ConcreteFlyweight extends Flyweight {\n    constructor(key) {\n        super();\n        this.intrinsicState = key;\n        console.log('ConcreteFlyweight Class created');\n    }\n\n    operation(extrinsicState) {\n        console.log('ConcreteFlyweight.operation invoked');\n        return extrinsicState + this.intrinsicState;\n    }\n}\n\nclass UnsharedConcreteFlyweight extends Flyweight {\n    constructor(keys, flyweights) {\n        super();\n        this.flyweights = flyweights;\n        this.keys = keys;\n        console.log('UnsharedConcreteFlyweight Class created');\n    }\n\n    operation(extrinsicState) {\n        console.log('UnsharedConcreteFlyweight.operation invoked');\n        var key, word = '';\n        for (var i = 0; i < extrinsicState; i++) {\n            key = this.keys[Math.floor(Math.random() * (this.keys.length))];\n            word = this.flyweights.getFlyweight(key).operation(word);\n        }\n        console.log('UnsharedConcreteFlyweight Operation: ');\n        console.log(word);\n    }\n}\n\n\nvar flyweights = new FlyweightFactory();\nvar gibberish = flyweights.createGibberish(['-', '+', '*']);\ngibberish.operation(5);\n\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace FlyweightPattern {\n\n    export interface Flyweight {\n        operation(s: String): void;\n    }\n\n    export class ConcreteFlyweight implements Flyweight {\n        private instrinsicState: String;\n\n        constructor(instrinsicState: String) {\n            this.instrinsicState = instrinsicState;\n        }\n\n        public operation(s: String): void {\n            console.log(\"`operation` of ConcreteFlyweight\", s, \" is being called!\");\n        }\n    }\n\n    export class UnsharedConcreteFlyweight implements Flyweight {\n        private allState: number;\n\n        constructor(allState: number) {\n            this.allState = allState;\n        }\n\n        public operation(s: String): void {\n            console.log(\"`operation` of UnsharedConcreteFlyweight\", s, \" is being called!\");\n        }\n    }\n\n    export class FlyweightFactory {\n\n        private fliesMap: { [s: string]: Flyweight; } = <any>{};\n\n        constructor() { }\n\n        public getFlyweight(key: string): Flyweight {\n\n            if (this.fliesMap[key] === undefined || null) {\n                this.fliesMap[key] = new ConcreteFlyweight(key);\n            }\n            return this.fliesMap[key];\n        }\n    }\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Flyweight.md","raw":"---\ntitle: 享元模式(Flyweight)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Structural Patterns]\ntags: [javasctipt, 享元模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 享元模式的定义\n- 享元模式：享元模式运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用，它是一种对象结构型模式。\n\n### 享元模式包含四个角色：\n- Flyweight-抽象享元类声明一个接口，通过它可以接受并作用于外部状态；\n- ConcreteFlyweight-具体享元类实现了抽象享元接口，其实例称为享元对象；\n- UnsharedConcreteFlyweight-非共享具体享元是不能被共享的抽象享元类的子类；\n- FlyweightFactory-享元工厂类用于创建并管理享元对象，它针对抽象享元类编程，将各种类型的具体享元对象存储在一个享元池中。\n---\n\n### ES6实现\n``` js\nclass FlyweightFactory {\n    constructor() {\n        this.flyweights = {};\n        console.log('FlyweightFactory Class created');\n    }\n\n    getFlyweight(key) {\n        console.log('FlyweightFactory.getFlyweight invoked');\n        if (this.flyweights[key]) {\n            return this.flyweights[key];\n        } else {\n            this.flyweights[key] = new ConcreteFlyweight(key);\n            return this.flyweights[key];\n        }\n    }\n\n    createGibberish(keys) {\n        console.log('FlyweightFactory.createGibberish invoked');\n        return new UnsharedConcreteFlyweight(keys, this);\n    }\n}\n\nclass Flyweight {\n    constructor() {\n        console.log('Flyweight Class created');\n    }\n\n    operation(extrinsicState) {\n        console.log('Flyweight.operation invoked');\n    }\n}\n\nclass ConcreteFlyweight extends Flyweight {\n    constructor(key) {\n        super();\n        this.intrinsicState = key;\n        console.log('ConcreteFlyweight Class created');\n    }\n\n    operation(extrinsicState) {\n        console.log('ConcreteFlyweight.operation invoked');\n        return extrinsicState + this.intrinsicState;\n    }\n}\n\nclass UnsharedConcreteFlyweight extends Flyweight {\n    constructor(keys, flyweights) {\n        super();\n        this.flyweights = flyweights;\n        this.keys = keys;\n        console.log('UnsharedConcreteFlyweight Class created');\n    }\n\n    operation(extrinsicState) {\n        console.log('UnsharedConcreteFlyweight.operation invoked');\n        var key, word = '';\n        for (var i = 0; i < extrinsicState; i++) {\n            key = this.keys[Math.floor(Math.random() * (this.keys.length))];\n            word = this.flyweights.getFlyweight(key).operation(word);\n        }\n        console.log('UnsharedConcreteFlyweight Operation: ');\n        console.log(word);\n    }\n}\n\n\nvar flyweights = new FlyweightFactory();\nvar gibberish = flyweights.createGibberish(['-', '+', '*']);\ngibberish.operation(5);\n\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace FlyweightPattern {\n\n    export interface Flyweight {\n        operation(s: String): void;\n    }\n\n    export class ConcreteFlyweight implements Flyweight {\n        private instrinsicState: String;\n\n        constructor(instrinsicState: String) {\n            this.instrinsicState = instrinsicState;\n        }\n\n        public operation(s: String): void {\n            console.log(\"`operation` of ConcreteFlyweight\", s, \" is being called!\");\n        }\n    }\n\n    export class UnsharedConcreteFlyweight implements Flyweight {\n        private allState: number;\n\n        constructor(allState: number) {\n            this.allState = allState;\n        }\n\n        public operation(s: String): void {\n            console.log(\"`operation` of UnsharedConcreteFlyweight\", s, \" is being called!\");\n        }\n    }\n\n    export class FlyweightFactory {\n\n        private fliesMap: { [s: string]: Flyweight; } = <any>{};\n\n        constructor() { }\n\n        public getFlyweight(key: string): Flyweight {\n\n            if (this.fliesMap[key] === undefined || null) {\n                this.fliesMap[key] = new ConcreteFlyweight(key);\n            }\n            return this.fliesMap[key];\n        }\n    }\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Flyweight","published":1,"updated":"2017-07-08T08:04:09.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52nth6u000ne0mwrvrbc5gy","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"享元模式的定义\"><a href=\"#享元模式的定义\" class=\"headerlink\" title=\"享元模式的定义\"></a>享元模式的定义</h3><ul>\n<li>享元模式：享元模式运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用，它是一种对象结构型模式。</li>\n</ul>\n<h3 id=\"享元模式包含四个角色：\"><a href=\"#享元模式包含四个角色：\" class=\"headerlink\" title=\"享元模式包含四个角色：\"></a>享元模式包含四个角色：</h3><ul>\n<li>Flyweight-抽象享元类声明一个接口，通过它可以接受并作用于外部状态；</li>\n<li>ConcreteFlyweight-具体享元类实现了抽象享元接口，其实例称为享元对象；</li>\n<li>UnsharedConcreteFlyweight-非共享具体享元是不能被共享的抽象享元类的子类；</li>\n<li>FlyweightFactory-享元工厂类用于创建并管理享元对象，它针对抽象享元类编程，将各种类型的具体享元对象存储在一个享元池中。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyweightFactory</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.flyweights = &#123;&#125;;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'FlyweightFactory Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    getFlyweight(key) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'FlyweightFactory.getFlyweight invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.flyweights[key]) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.flyweights[key];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.flyweights[key] = <span class=\"keyword\">new</span> ConcreteFlyweight(key);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.flyweights[key];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createGibberish(keys) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'FlyweightFactory.createGibberish invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> UnsharedConcreteFlyweight(keys, <span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flyweight</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Flyweight Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation(extrinsicState) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Flyweight.operation invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFlyweight</span> <span class=\"keyword\">extends</span> <span class=\"title\">Flyweight</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(key) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.intrinsicState = key;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteFlyweight Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation(extrinsicState) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteFlyweight.operation invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> extrinsicState + <span class=\"keyword\">this</span>.intrinsicState;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnsharedConcreteFlyweight</span> <span class=\"keyword\">extends</span> <span class=\"title\">Flyweight</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(keys, flyweights) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.flyweights = flyweights;</div><div class=\"line\">        <span class=\"keyword\">this</span>.keys = keys;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'UnsharedConcreteFlyweight Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation(extrinsicState) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'UnsharedConcreteFlyweight.operation invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">var</span> key, word = <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; extrinsicState; i++) &#123;</div><div class=\"line\">            key = <span class=\"keyword\">this</span>.keys[<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (<span class=\"keyword\">this</span>.keys.length))];</div><div class=\"line\">            word = <span class=\"keyword\">this</span>.flyweights.getFlyweight(key).operation(word);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'UnsharedConcreteFlyweight Operation: '</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(word);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> flyweights = <span class=\"keyword\">new</span> FlyweightFactory();</div><div class=\"line\"><span class=\"keyword\">var</span> gibberish = flyweights.createGibberish([<span class=\"string\">'-'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'*'</span>]);</div><div class=\"line\">gibberish.operation(<span class=\"number\">5</span>);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> FlyweightPattern &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Flyweight &#123;</div><div class=\"line\">        operation(s: <span class=\"built_in\">String</span>): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteFlyweight <span class=\"keyword\">implements</span> Flyweight &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> instrinsicState: <span class=\"built_in\">String</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">instrinsicState: <span class=\"built_in\">String</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.instrinsicState = instrinsicState;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(s: <span class=\"built_in\">String</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation` of ConcreteFlyweight\"</span>, s, <span class=\"string\">\" is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> UnsharedConcreteFlyweight <span class=\"keyword\">implements</span> Flyweight &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> allState: <span class=\"built_in\">number</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">allState: <span class=\"built_in\">number</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.allState = allState;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(s: <span class=\"built_in\">String</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation` of UnsharedConcreteFlyweight\"</span>, s, <span class=\"string\">\" is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> FlyweightFactory &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> fliesMap: &#123; [s: <span class=\"built_in\">string</span>]: Flyweight; &#125; = &lt;<span class=\"built_in\">any</span>&gt;&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> getFlyweight(key: <span class=\"built_in\">string</span>): Flyweight &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.fliesMap[key] === <span class=\"literal\">undefined</span> || <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.fliesMap[key] = <span class=\"keyword\">new</span> ConcreteFlyweight(key);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.fliesMap[key];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"享元模式的定义\"><a href=\"#享元模式的定义\" class=\"headerlink\" title=\"享元模式的定义\"></a>享元模式的定义</h3><ul>\n<li>享元模式：享元模式运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用，它是一种对象结构型模式。</li>\n</ul>\n<h3 id=\"享元模式包含四个角色：\"><a href=\"#享元模式包含四个角色：\" class=\"headerlink\" title=\"享元模式包含四个角色：\"></a>享元模式包含四个角色：</h3><ul>\n<li>Flyweight-抽象享元类声明一个接口，通过它可以接受并作用于外部状态；</li>\n<li>ConcreteFlyweight-具体享元类实现了抽象享元接口，其实例称为享元对象；</li>\n<li>UnsharedConcreteFlyweight-非共享具体享元是不能被共享的抽象享元类的子类；</li>\n<li>FlyweightFactory-享元工厂类用于创建并管理享元对象，它针对抽象享元类编程，将各种类型的具体享元对象存储在一个享元池中。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyweightFactory</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.flyweights = &#123;&#125;;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'FlyweightFactory Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    getFlyweight(key) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'FlyweightFactory.getFlyweight invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.flyweights[key]) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.flyweights[key];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.flyweights[key] = <span class=\"keyword\">new</span> ConcreteFlyweight(key);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.flyweights[key];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createGibberish(keys) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'FlyweightFactory.createGibberish invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> UnsharedConcreteFlyweight(keys, <span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flyweight</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Flyweight Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation(extrinsicState) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Flyweight.operation invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFlyweight</span> <span class=\"keyword\">extends</span> <span class=\"title\">Flyweight</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(key) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.intrinsicState = key;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteFlyweight Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation(extrinsicState) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteFlyweight.operation invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> extrinsicState + <span class=\"keyword\">this</span>.intrinsicState;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnsharedConcreteFlyweight</span> <span class=\"keyword\">extends</span> <span class=\"title\">Flyweight</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(keys, flyweights) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.flyweights = flyweights;</div><div class=\"line\">        <span class=\"keyword\">this</span>.keys = keys;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'UnsharedConcreteFlyweight Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation(extrinsicState) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'UnsharedConcreteFlyweight.operation invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">var</span> key, word = <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; extrinsicState; i++) &#123;</div><div class=\"line\">            key = <span class=\"keyword\">this</span>.keys[<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (<span class=\"keyword\">this</span>.keys.length))];</div><div class=\"line\">            word = <span class=\"keyword\">this</span>.flyweights.getFlyweight(key).operation(word);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'UnsharedConcreteFlyweight Operation: '</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(word);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> flyweights = <span class=\"keyword\">new</span> FlyweightFactory();</div><div class=\"line\"><span class=\"keyword\">var</span> gibberish = flyweights.createGibberish([<span class=\"string\">'-'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'*'</span>]);</div><div class=\"line\">gibberish.operation(<span class=\"number\">5</span>);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> FlyweightPattern &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Flyweight &#123;</div><div class=\"line\">        operation(s: <span class=\"built_in\">String</span>): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteFlyweight <span class=\"keyword\">implements</span> Flyweight &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> instrinsicState: <span class=\"built_in\">String</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">instrinsicState: <span class=\"built_in\">String</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.instrinsicState = instrinsicState;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(s: <span class=\"built_in\">String</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation` of ConcreteFlyweight\"</span>, s, <span class=\"string\">\" is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> UnsharedConcreteFlyweight <span class=\"keyword\">implements</span> Flyweight &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> allState: <span class=\"built_in\">number</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">allState: <span class=\"built_in\">number</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.allState = allState;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(s: <span class=\"built_in\">String</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation` of UnsharedConcreteFlyweight\"</span>, s, <span class=\"string\">\" is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> FlyweightFactory &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> fliesMap: &#123; [s: <span class=\"built_in\">string</span>]: Flyweight; &#125; = &lt;<span class=\"built_in\">any</span>&gt;&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> getFlyweight(key: <span class=\"built_in\">string</span>): Flyweight &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.fliesMap[key] === <span class=\"literal\">undefined</span> || <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.fliesMap[key] = <span class=\"keyword\">new</span> ConcreteFlyweight(key);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.fliesMap[key];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"解析器模式(Interpreter)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 解析器模式的定义\n- 解析器模式：在外观模式中，外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，\n- 外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。\n\n### 解析器模式包含二个角色：\n- Interpreter-外观角色是在客户端直接调用的角色，在外观角色中可以知道相关的(一个或者多个)子系统的功能和责任，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；\n- SubSystem-在软件系统中可以同时有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能\n\n---\n\n### ES6实现\n``` js\nclass Context {\n    constructor(input) {\n        this.sum = 0;\n        this.list = [];\n        console.log('Context Class created');\n    }\n\n    add(eps) {\n        console.log('Context.add invoked');\n        this.list.push(eps);\n    }\n\n    getList() {\n        console.log('Context.getList invoked');\n        return this.list;\n    }\n\n    getSum() {\n        console.log('Context.getSum invoked');\n        return this.sum;\n    }\n\n    setSum(_sum) {\n        this.sum = _sum;\n        console.log('Context.setSum invoked');\n    }\n}\n\nclass AbstractExpression {\n    constructor() {\n        console.log('AbstractExpression Class created');\n    }\n\n    interpret(context) {\n        console.log('AbstractExpression.interpret invoked');\n    }\n}\n\nclass PlusExpression extends AbstractExpression {\n    constructor(name) {\n        super();\n        this.name = name;\n        console.log('PlusExpression Class created');\n    }\n\n    interpret(context) {\n        console.log('PlusExpression.interpret invoked');\n        var sum = context.getSum();\n        sum++;\n        context.setSum(sum);\n    }\n}\n\nclass MinusExpression extends AbstractExpression {\n    constructor() {\n        super();\n        this.name = '+';\n        console.log('MinusExpression Class created');\n    }\n\n    interpret(context) {\n        console.log('MinusExpression.interpret invoked');\n        var sum = context.getSum();\n        sum--;\n        context.setSum(sum)\n    }\n}\n\nvar context = new Context();\ncontext.setSum(20);\n\ncontext.add(new PlusExpression());\ncontext.add(new PlusExpression());\ncontext.add(new PlusExpression());\n\ncontext.add(new MinusExpression());\ncontext.add(new MinusExpression());\n\nvar list = context.getList();\nfor (var i = 0; i < list.length; i++) {\n    var expression = list[i];\n    expression.interpret(context);\n}\n\nconsole.log(\"Result：\" + context.getSum());\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace InterpreterPattern {\n    export class Context {\n    }\n\n    export interface AbstractExpression {\n        interpret(context: Context): void;\n    }\n\n    export class TerminalExpression implements AbstractExpression {\n        public interpret(context: Context): void {\n            console.log(\"`interpret` method of TerminalExpression is being called!\");\n        }\n    }\n\n    export class NonterminalExpression implements AbstractExpression {\n\n        public interpret(context: Context): void {\n            console.log(\"`interpret` method of NonterminalExpression is being called!\");\n        }\n    }\n}\n\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Interpreter.md","raw":"---\ntitle: 解析器模式(Interpreter)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Behavioral Patterns]\ntags: [javasctipt, 解析器模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 解析器模式的定义\n- 解析器模式：在外观模式中，外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，\n- 外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。\n\n### 解析器模式包含二个角色：\n- Interpreter-外观角色是在客户端直接调用的角色，在外观角色中可以知道相关的(一个或者多个)子系统的功能和责任，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；\n- SubSystem-在软件系统中可以同时有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能\n\n---\n\n### ES6实现\n``` js\nclass Context {\n    constructor(input) {\n        this.sum = 0;\n        this.list = [];\n        console.log('Context Class created');\n    }\n\n    add(eps) {\n        console.log('Context.add invoked');\n        this.list.push(eps);\n    }\n\n    getList() {\n        console.log('Context.getList invoked');\n        return this.list;\n    }\n\n    getSum() {\n        console.log('Context.getSum invoked');\n        return this.sum;\n    }\n\n    setSum(_sum) {\n        this.sum = _sum;\n        console.log('Context.setSum invoked');\n    }\n}\n\nclass AbstractExpression {\n    constructor() {\n        console.log('AbstractExpression Class created');\n    }\n\n    interpret(context) {\n        console.log('AbstractExpression.interpret invoked');\n    }\n}\n\nclass PlusExpression extends AbstractExpression {\n    constructor(name) {\n        super();\n        this.name = name;\n        console.log('PlusExpression Class created');\n    }\n\n    interpret(context) {\n        console.log('PlusExpression.interpret invoked');\n        var sum = context.getSum();\n        sum++;\n        context.setSum(sum);\n    }\n}\n\nclass MinusExpression extends AbstractExpression {\n    constructor() {\n        super();\n        this.name = '+';\n        console.log('MinusExpression Class created');\n    }\n\n    interpret(context) {\n        console.log('MinusExpression.interpret invoked');\n        var sum = context.getSum();\n        sum--;\n        context.setSum(sum)\n    }\n}\n\nvar context = new Context();\ncontext.setSum(20);\n\ncontext.add(new PlusExpression());\ncontext.add(new PlusExpression());\ncontext.add(new PlusExpression());\n\ncontext.add(new MinusExpression());\ncontext.add(new MinusExpression());\n\nvar list = context.getList();\nfor (var i = 0; i < list.length; i++) {\n    var expression = list[i];\n    expression.interpret(context);\n}\n\nconsole.log(\"Result：\" + context.getSum());\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace InterpreterPattern {\n    export class Context {\n    }\n\n    export interface AbstractExpression {\n        interpret(context: Context): void;\n    }\n\n    export class TerminalExpression implements AbstractExpression {\n        public interpret(context: Context): void {\n            console.log(\"`interpret` method of TerminalExpression is being called!\");\n        }\n    }\n\n    export class NonterminalExpression implements AbstractExpression {\n\n        public interpret(context: Context): void {\n            console.log(\"`interpret` method of NonterminalExpression is being called!\");\n        }\n    }\n}\n\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Interpreter","published":1,"updated":"2017-07-08T08:04:09.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52nth6w000qe0mwlmmihsyj","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"解析器模式的定义\"><a href=\"#解析器模式的定义\" class=\"headerlink\" title=\"解析器模式的定义\"></a>解析器模式的定义</h3><ul>\n<li>解析器模式：在外观模式中，外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，</li>\n<li>外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。</li>\n</ul>\n<h3 id=\"解析器模式包含二个角色：\"><a href=\"#解析器模式包含二个角色：\" class=\"headerlink\" title=\"解析器模式包含二个角色：\"></a>解析器模式包含二个角色：</h3><ul>\n<li>Interpreter-外观角色是在客户端直接调用的角色，在外观角色中可以知道相关的(一个或者多个)子系统的功能和责任，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；</li>\n<li>SubSystem-在软件系统中可以同时有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(input) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.sum = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.list = [];</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    add(eps) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context.add invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.list.push(eps);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    getList() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context.getList invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.list;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    getSum() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context.getSum invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sum;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setSum(_sum) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.sum = _sum;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context.setSum invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractExpression</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractExpression Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    interpret(context) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractExpression.interpret invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlusExpression</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExpression</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'PlusExpression Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    interpret(context) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'PlusExpression.interpret invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">var</span> sum = context.getSum();</div><div class=\"line\">        sum++;</div><div class=\"line\">        context.setSum(sum);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MinusExpression</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExpression</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'+'</span>;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'MinusExpression Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    interpret(context) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'MinusExpression.interpret invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">var</span> sum = context.getSum();</div><div class=\"line\">        sum--;</div><div class=\"line\">        context.setSum(sum)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> context = <span class=\"keyword\">new</span> Context();</div><div class=\"line\">context.setSum(<span class=\"number\">20</span>);</div><div class=\"line\"></div><div class=\"line\">context.add(<span class=\"keyword\">new</span> PlusExpression());</div><div class=\"line\">context.add(<span class=\"keyword\">new</span> PlusExpression());</div><div class=\"line\">context.add(<span class=\"keyword\">new</span> PlusExpression());</div><div class=\"line\"></div><div class=\"line\">context.add(<span class=\"keyword\">new</span> MinusExpression());</div><div class=\"line\">context.add(<span class=\"keyword\">new</span> MinusExpression());</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> list = context.getList();</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; list.length; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> expression = list[i];</div><div class=\"line\">    expression.interpret(context);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Result：\"</span> + context.getSum());</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> InterpreterPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Context &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> AbstractExpression &#123;</div><div class=\"line\">        interpret(context: Context): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> TerminalExpression <span class=\"keyword\">implements</span> AbstractExpression &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> interpret(context: Context): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`interpret` method of TerminalExpression is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> NonterminalExpression <span class=\"keyword\">implements</span> AbstractExpression &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> interpret(context: Context): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`interpret` method of NonterminalExpression is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"解析器模式的定义\"><a href=\"#解析器模式的定义\" class=\"headerlink\" title=\"解析器模式的定义\"></a>解析器模式的定义</h3><ul>\n<li>解析器模式：在外观模式中，外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，</li>\n<li>外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。</li>\n</ul>\n<h3 id=\"解析器模式包含二个角色：\"><a href=\"#解析器模式包含二个角色：\" class=\"headerlink\" title=\"解析器模式包含二个角色：\"></a>解析器模式包含二个角色：</h3><ul>\n<li>Interpreter-外观角色是在客户端直接调用的角色，在外观角色中可以知道相关的(一个或者多个)子系统的功能和责任，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；</li>\n<li>SubSystem-在软件系统中可以同时有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(input) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.sum = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.list = [];</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    add(eps) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context.add invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.list.push(eps);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    getList() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context.getList invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.list;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    getSum() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context.getSum invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sum;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setSum(_sum) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.sum = _sum;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context.setSum invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractExpression</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractExpression Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    interpret(context) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractExpression.interpret invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlusExpression</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExpression</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'PlusExpression Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    interpret(context) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'PlusExpression.interpret invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">var</span> sum = context.getSum();</div><div class=\"line\">        sum++;</div><div class=\"line\">        context.setSum(sum);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MinusExpression</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExpression</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'+'</span>;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'MinusExpression Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    interpret(context) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'MinusExpression.interpret invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">var</span> sum = context.getSum();</div><div class=\"line\">        sum--;</div><div class=\"line\">        context.setSum(sum)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> context = <span class=\"keyword\">new</span> Context();</div><div class=\"line\">context.setSum(<span class=\"number\">20</span>);</div><div class=\"line\"></div><div class=\"line\">context.add(<span class=\"keyword\">new</span> PlusExpression());</div><div class=\"line\">context.add(<span class=\"keyword\">new</span> PlusExpression());</div><div class=\"line\">context.add(<span class=\"keyword\">new</span> PlusExpression());</div><div class=\"line\"></div><div class=\"line\">context.add(<span class=\"keyword\">new</span> MinusExpression());</div><div class=\"line\">context.add(<span class=\"keyword\">new</span> MinusExpression());</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> list = context.getList();</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; list.length; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> expression = list[i];</div><div class=\"line\">    expression.interpret(context);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Result：\"</span> + context.getSum());</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> InterpreterPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Context &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> AbstractExpression &#123;</div><div class=\"line\">        interpret(context: Context): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> TerminalExpression <span class=\"keyword\">implements</span> AbstractExpression &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> interpret(context: Context): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`interpret` method of TerminalExpression is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> NonterminalExpression <span class=\"keyword\">implements</span> AbstractExpression &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> interpret(context: Context): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`interpret` method of NonterminalExpression is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"迭代器(Iterator)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n---\n\n### ES6实现\n``` js\nclass Iterator {\n    constructor() {\n        console.log('Iterator Class created');\n    }\n\n    first() {\n        console.log('Iterator.first invoked');\n    }\n\n    next() {\n        console.log('Iterator.next invoked');\n    }\n\n    isDone() {\n        console.log('Iterator.isDone invoked');\n    }\n\n    currentItem() {\n        console.log('Iterator.currentItem invoked');\n    }\n}\n\nclass ConcreteIterator extends Iterator {\n    constructor(aggregate) {\n        super();\n        this.index = 0;\n        this.aggregate = aggregate;\n        console.log('ConcreteIterator Class created');\n    }\n\n    first() {\n        console.log('ConcreteIterator.first invoked');\n        return this.aggregate.list[0];\n    }\n\n    next() {\n        console.log('ConcreteIterator.next invoked');\n        this.index += 1;\n        return this.aggregate.list[this.index];\n    }\n\n    currentItem() {\n        console.log('ConcreteIterator.currentItem invoked');\n        return this.aggregate.list[this.index];\n    }\n}\n\nclass Aggregate {\n    constructor() {\n        console.log('Aggregate Class created');\n    }\n\n    createIterator() {\n        console.log('Aggregate.CreateIterator invoked');\n    }\n}\n\nclass ConcreteAggregate extends Aggregate {\n    constructor(list) {\n        super();\n        this.list = list;\n        console.log('ConcreteAggregate Class created');\n    }\n\n    createIterator() {\n        console.log('ConcreteAggregate.CreateIterator invoked');\n        this.iterator = new ConcreteIterator(this);\n    }\n}\n\nvar aggregate = new ConcreteAggregate([0, 1, 2, 3, 4, 5, 6, 7]);\naggregate.createIterator();\nconsole.log(aggregate.iterator.first());\nconsole.log(aggregate.iterator.next());\nconsole.log(aggregate.iterator.currentItem());\n\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace IteratorPattern {\n\texport namespace Demo {\n\n\t\texport function show() : void {\n\t\t    var nArray = [1, 7, 21, 657, 3, 2, 765, 13, 65],\n\t\t\t\tnumbers: IteratorPattern.Numbers = new IteratorPattern.Numbers(nArray),\n\t\t\t\tit: IteratorPattern.ConcreteIterator = <IteratorPattern.ConcreteIterator>numbers.createIterator();\n\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tconsole.log(it.next());\n\t\t\t}\n\n\t\t}\n\t}\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Iterator.md","raw":"---\ntitle: 迭代器(Iterator)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Behavioral Patterns]\ntags: [javasctipt, 迭代器]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n---\n\n### ES6实现\n``` js\nclass Iterator {\n    constructor() {\n        console.log('Iterator Class created');\n    }\n\n    first() {\n        console.log('Iterator.first invoked');\n    }\n\n    next() {\n        console.log('Iterator.next invoked');\n    }\n\n    isDone() {\n        console.log('Iterator.isDone invoked');\n    }\n\n    currentItem() {\n        console.log('Iterator.currentItem invoked');\n    }\n}\n\nclass ConcreteIterator extends Iterator {\n    constructor(aggregate) {\n        super();\n        this.index = 0;\n        this.aggregate = aggregate;\n        console.log('ConcreteIterator Class created');\n    }\n\n    first() {\n        console.log('ConcreteIterator.first invoked');\n        return this.aggregate.list[0];\n    }\n\n    next() {\n        console.log('ConcreteIterator.next invoked');\n        this.index += 1;\n        return this.aggregate.list[this.index];\n    }\n\n    currentItem() {\n        console.log('ConcreteIterator.currentItem invoked');\n        return this.aggregate.list[this.index];\n    }\n}\n\nclass Aggregate {\n    constructor() {\n        console.log('Aggregate Class created');\n    }\n\n    createIterator() {\n        console.log('Aggregate.CreateIterator invoked');\n    }\n}\n\nclass ConcreteAggregate extends Aggregate {\n    constructor(list) {\n        super();\n        this.list = list;\n        console.log('ConcreteAggregate Class created');\n    }\n\n    createIterator() {\n        console.log('ConcreteAggregate.CreateIterator invoked');\n        this.iterator = new ConcreteIterator(this);\n    }\n}\n\nvar aggregate = new ConcreteAggregate([0, 1, 2, 3, 4, 5, 6, 7]);\naggregate.createIterator();\nconsole.log(aggregate.iterator.first());\nconsole.log(aggregate.iterator.next());\nconsole.log(aggregate.iterator.currentItem());\n\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace IteratorPattern {\n\texport namespace Demo {\n\n\t\texport function show() : void {\n\t\t    var nArray = [1, 7, 21, 657, 3, 2, 765, 13, 65],\n\t\t\t\tnumbers: IteratorPattern.Numbers = new IteratorPattern.Numbers(nArray),\n\t\t\t\tit: IteratorPattern.ConcreteIterator = <IteratorPattern.ConcreteIterator>numbers.createIterator();\n\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tconsole.log(it.next());\n\t\t\t}\n\n\t\t}\n\t}\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Iterator","published":1,"updated":"2017-07-08T08:04:09.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52nth6x000se0mwlv9igxcc","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Iterator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Iterator Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    first() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Iterator.first invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    next() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Iterator.next invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    isDone() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Iterator.isDone invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    currentItem() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Iterator.currentItem invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteIterator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Iterator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(aggregate) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.index = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.aggregate = aggregate;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteIterator Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    first() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteIterator.first invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.aggregate.list[<span class=\"number\">0</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    next() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteIterator.next invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.index += <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.aggregate.list[<span class=\"keyword\">this</span>.index];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    currentItem() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteIterator.currentItem invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.aggregate.list[<span class=\"keyword\">this</span>.index];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Aggregate</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Aggregate Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createIterator() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Aggregate.CreateIterator invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteAggregate</span> <span class=\"keyword\">extends</span> <span class=\"title\">Aggregate</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(list) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.list = list;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteAggregate Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createIterator() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteAggregate.CreateIterator invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.iterator = <span class=\"keyword\">new</span> ConcreteIterator(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> aggregate = <span class=\"keyword\">new</span> ConcreteAggregate([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]);</div><div class=\"line\">aggregate.createIterator();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(aggregate.iterator.first());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(aggregate.iterator.next());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(aggregate.iterator.currentItem());</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> IteratorPattern &#123;</div><div class=\"line\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">namespace</span> Demo &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>) : <span class=\"title\">void</span> </span>&#123;</div><div class=\"line\">\t\t    <span class=\"keyword\">var</span> nArray = [<span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">21</span>, <span class=\"number\">657</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">765</span>, <span class=\"number\">13</span>, <span class=\"number\">65</span>],</div><div class=\"line\">\t\t\t\tnumbers: IteratorPattern.Numbers = <span class=\"keyword\">new</span> IteratorPattern.Numbers(nArray),</div><div class=\"line\">\t\t\t\tit: IteratorPattern.ConcreteIterator = &lt;IteratorPattern.ConcreteIterator&gt;numbers.createIterator();</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (it.hasNext()) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(it.next());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Iterator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Iterator Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    first() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Iterator.first invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    next() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Iterator.next invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    isDone() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Iterator.isDone invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    currentItem() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Iterator.currentItem invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteIterator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Iterator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(aggregate) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.index = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.aggregate = aggregate;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteIterator Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    first() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteIterator.first invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.aggregate.list[<span class=\"number\">0</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    next() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteIterator.next invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.index += <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.aggregate.list[<span class=\"keyword\">this</span>.index];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    currentItem() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteIterator.currentItem invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.aggregate.list[<span class=\"keyword\">this</span>.index];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Aggregate</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Aggregate Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createIterator() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Aggregate.CreateIterator invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteAggregate</span> <span class=\"keyword\">extends</span> <span class=\"title\">Aggregate</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(list) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.list = list;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteAggregate Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createIterator() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteAggregate.CreateIterator invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.iterator = <span class=\"keyword\">new</span> ConcreteIterator(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> aggregate = <span class=\"keyword\">new</span> ConcreteAggregate([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]);</div><div class=\"line\">aggregate.createIterator();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(aggregate.iterator.first());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(aggregate.iterator.next());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(aggregate.iterator.currentItem());</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> IteratorPattern &#123;</div><div class=\"line\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">namespace</span> Demo &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>) : <span class=\"title\">void</span> </span>&#123;</div><div class=\"line\">\t\t    <span class=\"keyword\">var</span> nArray = [<span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">21</span>, <span class=\"number\">657</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">765</span>, <span class=\"number\">13</span>, <span class=\"number\">65</span>],</div><div class=\"line\">\t\t\t\tnumbers: IteratorPattern.Numbers = <span class=\"keyword\">new</span> IteratorPattern.Numbers(nArray),</div><div class=\"line\">\t\t\t\tit: IteratorPattern.ConcreteIterator = &lt;IteratorPattern.ConcreteIterator&gt;numbers.createIterator();</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (it.hasNext()) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(it.next());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"观察者模式(Observer)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 观察者模式的定义\n- 观察者模式定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。\n- 观察者模式又叫做发布-订阅模式、模型-视图模式、源-监听器模式或从属者模式。\n- 观察者模式是一种对象行为型模式。\n\n\n### 观察者模式包含四个角色：\n- Subject-目标又称为主题，它是指被观察的对象；\n- ConcreteSubject-具体目标是目标类的子类，通常它包含有经常发生改变的数据，当它的状态发生改变时，向它的各个观察者发出通知；\n- Observer-观察者将对观察目标的改变做出反应；\n- ConcreteObserver-在具体观察者中维护一个指向具体目标对象的引用，它存储具体观察者的有关状态，这些状态需要和具体目标的状态保持一致。\n\n---\n\n### ES6实现\n``` js\nclass Subject {\n    constructor() {\n        console.log('Subject Class created');\n    }\n\n    attach(observer) {\n        this.observers.push(observer);\n        console.log('Subject.attach invoked');\n    }\n\n    dettach(observer) {\n        console.log('Subject.dettach invoked');\n        for (var i in this.observers) {\n            if (this.observers[i] === observer) {\n                this.observers.splice(i, 1);\n            }\n        }\n    }\n\n    notify() {\n        console.log('Subject.notify invoked');\n        for (var i in this.observers) {\n            this.observers[i].update(this);\n        }\n    }\n}\n\nclass ConcreteSubject extends Subject {\n    constructor() {\n        super();\n        this.subjectState = null;\n        this.observers = [];\n        console.log('ConcreteSubject Class created');\n    }\n\n    getState() {\n        console.log('ConcreteSubject.getState invoked');\n        return this.subjectState;\n    }\n\n    setState(state) {\n        console.log('ConcreteSubject.setState invoked');\n        this.subjectState = state;\n        this.notify();\n    }\n}\n\nclass Observer {\n    constructor() {\n        console.log('Observer Class created');\n    }\n\n    update() {\n        console.log('Observer.update invoked');\n    }\n}\n\nclass ConcreteObserver extends Observer {\n    constructor() {\n        super();\n        this.observerState = '';\n        console.log('ConcreteObserver Class created');\n    }\n\n    update(Subject) {\n        console.log('ConcreteObserver.update invoked');\n        this.observerState = Subject.getState();\n        console.log('Observer new state: ' + this.observerState);\n    }\n}\n\nvar observer1 = new ConcreteObserver();\nvar observer2 = new ConcreteObserver();\nvar subject = new ConcreteSubject();\nsubject.attach(observer1);\nsubject.attach(observer2);\nsubject.setState('state 1');\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace ObserverPattern {\n    export class Subject {\n        private observers: Observer[] = [];\n\n        public register(observer: Observer): void {\n            console.log(observer, \"is pushed!\");\n            this.observers.push(observer);\n        }\n\n        public unregister(observer: Observer): void {\n            var n: number = this.observers.indexOf(observer);\n            console.log(observer, \"is removed\");\n            this.observers.splice(n, 1);\n        }\n\n        public notify(): void {\n            console.log(\"notify all the observers\", this.observers);\n            var i: number\n              , max: number;\n\n            for (i = 0, max = this.observers.length; i < max; i += 1) {\n                this.observers[i].notify();\n            }\n        }\n    }\n\n    export class ConcreteSubject extends Subject {\n        private subjectState: number;\n\n        get SubjectState(): number {\n            return this.subjectState;\n        }\n\n        set SubjectState(subjectState: number) {\n            this.subjectState = subjectState;\n        }\n    }\n\n    export class Observer {\n        public notify(): void {\n            throw new Error(\"Abstract Method!\");\n        }\n    }\n\n    export class ConcreteObserver extends Observer {\n        private name: string;\n        private state: number;\n        private subject: ConcreteSubject;\n\n        constructor (subject: ConcreteSubject, name: string) {\n            super();\n            console.log(\"ConcreteObserver\", name, \"is created!\");\n            this.subject = subject;\n            this.name = name;\n        }\n\n        public notify(): void {\n            console.log(\"ConcreteObserver's notify method\");\n            console.log(this.name, this.state);\n            this.state = this.subject.SubjectState;\n        }\n\n        get Subject(): ConcreteSubject {\n            return this.subject;\n        }\n\n        set Subject(subject: ConcreteSubject) {\n            this.subject = subject;\n        }\n    }\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Observer.md","raw":"---\ntitle: 观察者模式(Observer)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Behavioral Patterns]\ntags: [javasctipt, 观察者模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 观察者模式的定义\n- 观察者模式定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。\n- 观察者模式又叫做发布-订阅模式、模型-视图模式、源-监听器模式或从属者模式。\n- 观察者模式是一种对象行为型模式。\n\n\n### 观察者模式包含四个角色：\n- Subject-目标又称为主题，它是指被观察的对象；\n- ConcreteSubject-具体目标是目标类的子类，通常它包含有经常发生改变的数据，当它的状态发生改变时，向它的各个观察者发出通知；\n- Observer-观察者将对观察目标的改变做出反应；\n- ConcreteObserver-在具体观察者中维护一个指向具体目标对象的引用，它存储具体观察者的有关状态，这些状态需要和具体目标的状态保持一致。\n\n---\n\n### ES6实现\n``` js\nclass Subject {\n    constructor() {\n        console.log('Subject Class created');\n    }\n\n    attach(observer) {\n        this.observers.push(observer);\n        console.log('Subject.attach invoked');\n    }\n\n    dettach(observer) {\n        console.log('Subject.dettach invoked');\n        for (var i in this.observers) {\n            if (this.observers[i] === observer) {\n                this.observers.splice(i, 1);\n            }\n        }\n    }\n\n    notify() {\n        console.log('Subject.notify invoked');\n        for (var i in this.observers) {\n            this.observers[i].update(this);\n        }\n    }\n}\n\nclass ConcreteSubject extends Subject {\n    constructor() {\n        super();\n        this.subjectState = null;\n        this.observers = [];\n        console.log('ConcreteSubject Class created');\n    }\n\n    getState() {\n        console.log('ConcreteSubject.getState invoked');\n        return this.subjectState;\n    }\n\n    setState(state) {\n        console.log('ConcreteSubject.setState invoked');\n        this.subjectState = state;\n        this.notify();\n    }\n}\n\nclass Observer {\n    constructor() {\n        console.log('Observer Class created');\n    }\n\n    update() {\n        console.log('Observer.update invoked');\n    }\n}\n\nclass ConcreteObserver extends Observer {\n    constructor() {\n        super();\n        this.observerState = '';\n        console.log('ConcreteObserver Class created');\n    }\n\n    update(Subject) {\n        console.log('ConcreteObserver.update invoked');\n        this.observerState = Subject.getState();\n        console.log('Observer new state: ' + this.observerState);\n    }\n}\n\nvar observer1 = new ConcreteObserver();\nvar observer2 = new ConcreteObserver();\nvar subject = new ConcreteSubject();\nsubject.attach(observer1);\nsubject.attach(observer2);\nsubject.setState('state 1');\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace ObserverPattern {\n    export class Subject {\n        private observers: Observer[] = [];\n\n        public register(observer: Observer): void {\n            console.log(observer, \"is pushed!\");\n            this.observers.push(observer);\n        }\n\n        public unregister(observer: Observer): void {\n            var n: number = this.observers.indexOf(observer);\n            console.log(observer, \"is removed\");\n            this.observers.splice(n, 1);\n        }\n\n        public notify(): void {\n            console.log(\"notify all the observers\", this.observers);\n            var i: number\n              , max: number;\n\n            for (i = 0, max = this.observers.length; i < max; i += 1) {\n                this.observers[i].notify();\n            }\n        }\n    }\n\n    export class ConcreteSubject extends Subject {\n        private subjectState: number;\n\n        get SubjectState(): number {\n            return this.subjectState;\n        }\n\n        set SubjectState(subjectState: number) {\n            this.subjectState = subjectState;\n        }\n    }\n\n    export class Observer {\n        public notify(): void {\n            throw new Error(\"Abstract Method!\");\n        }\n    }\n\n    export class ConcreteObserver extends Observer {\n        private name: string;\n        private state: number;\n        private subject: ConcreteSubject;\n\n        constructor (subject: ConcreteSubject, name: string) {\n            super();\n            console.log(\"ConcreteObserver\", name, \"is created!\");\n            this.subject = subject;\n            this.name = name;\n        }\n\n        public notify(): void {\n            console.log(\"ConcreteObserver's notify method\");\n            console.log(this.name, this.state);\n            this.state = this.subject.SubjectState;\n        }\n\n        get Subject(): ConcreteSubject {\n            return this.subject;\n        }\n\n        set Subject(subject: ConcreteSubject) {\n            this.subject = subject;\n        }\n    }\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Observer","published":1,"updated":"2017-07-08T08:04:09.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52nth6z000xe0mw6zsum0w2","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"观察者模式的定义\"><a href=\"#观察者模式的定义\" class=\"headerlink\" title=\"观察者模式的定义\"></a>观察者模式的定义</h3><ul>\n<li>观察者模式定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。</li>\n<li>观察者模式又叫做发布-订阅模式、模型-视图模式、源-监听器模式或从属者模式。</li>\n<li>观察者模式是一种对象行为型模式。</li>\n</ul>\n<h3 id=\"观察者模式包含四个角色：\"><a href=\"#观察者模式包含四个角色：\" class=\"headerlink\" title=\"观察者模式包含四个角色：\"></a>观察者模式包含四个角色：</h3><ul>\n<li>Subject-目标又称为主题，它是指被观察的对象；</li>\n<li>ConcreteSubject-具体目标是目标类的子类，通常它包含有经常发生改变的数据，当它的状态发生改变时，向它的各个观察者发出通知；</li>\n<li>Observer-观察者将对观察目标的改变做出反应；</li>\n<li>ConcreteObserver-在具体观察者中维护一个指向具体目标对象的引用，它存储具体观察者的有关状态，这些状态需要和具体目标的状态保持一致。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Subject Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    attach(observer) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.observers.push(observer);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Subject.attach invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    dettach(observer) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Subject.dettach invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.observers) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.observers[i] === observer) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.observers.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    notify() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Subject.notify invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.observers) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.observers[i].update(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteSubject</span> <span class=\"keyword\">extends</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.subjectState = <span class=\"literal\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.observers = [];</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteSubject Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    getState() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteSubject.getState invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.subjectState;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setState(state) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteSubject.setState invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.subjectState = state;</div><div class=\"line\">        <span class=\"keyword\">this</span>.notify();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Observer Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    update() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Observer.update invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.observerState = <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteObserver Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    update(Subject) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteObserver.update invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.observerState = Subject.getState();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Observer new state: '</span> + <span class=\"keyword\">this</span>.observerState);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> observer1 = <span class=\"keyword\">new</span> ConcreteObserver();</div><div class=\"line\"><span class=\"keyword\">var</span> observer2 = <span class=\"keyword\">new</span> ConcreteObserver();</div><div class=\"line\"><span class=\"keyword\">var</span> subject = <span class=\"keyword\">new</span> ConcreteSubject();</div><div class=\"line\">subject.attach(observer1);</div><div class=\"line\">subject.attach(observer2);</div><div class=\"line\">subject.setState(<span class=\"string\">'state 1'</span>);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> ObserverPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Subject &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> observers: Observer[] = [];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> register(observer: Observer): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(observer, <span class=\"string\">\"is pushed!\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.observers.push(observer);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> unregister(observer: Observer): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> n: <span class=\"built_in\">number</span> = <span class=\"keyword\">this</span>.observers.indexOf(observer);</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(observer, <span class=\"string\">\"is removed\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.observers.splice(n, <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> notify(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"notify all the observers\"</span>, <span class=\"keyword\">this</span>.observers);</div><div class=\"line\">            <span class=\"keyword\">var</span> i: <span class=\"built_in\">number</span></div><div class=\"line\">              , max: <span class=\"built_in\">number</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, max = <span class=\"keyword\">this</span>.observers.length; i &lt; max; i += <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.observers[i].notify();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteSubject <span class=\"keyword\">extends</span> Subject &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> subjectState: <span class=\"built_in\">number</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">get</span> SubjectState(): <span class=\"built_in\">number</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.subjectState;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">set</span> SubjectState(subjectState: <span class=\"built_in\">number</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.subjectState = subjectState;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Observer &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> notify(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract Method!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteObserver <span class=\"keyword\">extends</span> Observer &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> name: <span class=\"built_in\">string</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> state: <span class=\"built_in\">number</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> subject: ConcreteSubject;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span> (<span class=\"params\">subject: ConcreteSubject, name: <span class=\"built_in\">string</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>();</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcreteObserver\"</span>, name, <span class=\"string\">\"is created!\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.subject = subject;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> notify(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcreteObserver's notify method\"</span>);</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name, <span class=\"keyword\">this</span>.state);</div><div class=\"line\">            <span class=\"keyword\">this</span>.state = <span class=\"keyword\">this</span>.subject.SubjectState;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">get</span> Subject(): ConcreteSubject &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.subject;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">set</span> Subject(subject: ConcreteSubject) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.subject = subject;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"观察者模式的定义\"><a href=\"#观察者模式的定义\" class=\"headerlink\" title=\"观察者模式的定义\"></a>观察者模式的定义</h3><ul>\n<li>观察者模式定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。</li>\n<li>观察者模式又叫做发布-订阅模式、模型-视图模式、源-监听器模式或从属者模式。</li>\n<li>观察者模式是一种对象行为型模式。</li>\n</ul>\n<h3 id=\"观察者模式包含四个角色：\"><a href=\"#观察者模式包含四个角色：\" class=\"headerlink\" title=\"观察者模式包含四个角色：\"></a>观察者模式包含四个角色：</h3><ul>\n<li>Subject-目标又称为主题，它是指被观察的对象；</li>\n<li>ConcreteSubject-具体目标是目标类的子类，通常它包含有经常发生改变的数据，当它的状态发生改变时，向它的各个观察者发出通知；</li>\n<li>Observer-观察者将对观察目标的改变做出反应；</li>\n<li>ConcreteObserver-在具体观察者中维护一个指向具体目标对象的引用，它存储具体观察者的有关状态，这些状态需要和具体目标的状态保持一致。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Subject Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    attach(observer) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.observers.push(observer);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Subject.attach invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    dettach(observer) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Subject.dettach invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.observers) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.observers[i] === observer) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.observers.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    notify() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Subject.notify invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.observers) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.observers[i].update(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteSubject</span> <span class=\"keyword\">extends</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.subjectState = <span class=\"literal\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.observers = [];</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteSubject Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    getState() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteSubject.getState invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.subjectState;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setState(state) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteSubject.setState invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.subjectState = state;</div><div class=\"line\">        <span class=\"keyword\">this</span>.notify();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Observer Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    update() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Observer.update invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.observerState = <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteObserver Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    update(Subject) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteObserver.update invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.observerState = Subject.getState();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Observer new state: '</span> + <span class=\"keyword\">this</span>.observerState);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> observer1 = <span class=\"keyword\">new</span> ConcreteObserver();</div><div class=\"line\"><span class=\"keyword\">var</span> observer2 = <span class=\"keyword\">new</span> ConcreteObserver();</div><div class=\"line\"><span class=\"keyword\">var</span> subject = <span class=\"keyword\">new</span> ConcreteSubject();</div><div class=\"line\">subject.attach(observer1);</div><div class=\"line\">subject.attach(observer2);</div><div class=\"line\">subject.setState(<span class=\"string\">'state 1'</span>);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> ObserverPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Subject &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> observers: Observer[] = [];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> register(observer: Observer): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(observer, <span class=\"string\">\"is pushed!\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.observers.push(observer);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> unregister(observer: Observer): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> n: <span class=\"built_in\">number</span> = <span class=\"keyword\">this</span>.observers.indexOf(observer);</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(observer, <span class=\"string\">\"is removed\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.observers.splice(n, <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> notify(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"notify all the observers\"</span>, <span class=\"keyword\">this</span>.observers);</div><div class=\"line\">            <span class=\"keyword\">var</span> i: <span class=\"built_in\">number</span></div><div class=\"line\">              , max: <span class=\"built_in\">number</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, max = <span class=\"keyword\">this</span>.observers.length; i &lt; max; i += <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.observers[i].notify();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteSubject <span class=\"keyword\">extends</span> Subject &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> subjectState: <span class=\"built_in\">number</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">get</span> SubjectState(): <span class=\"built_in\">number</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.subjectState;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">set</span> SubjectState(subjectState: <span class=\"built_in\">number</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.subjectState = subjectState;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Observer &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> notify(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract Method!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteObserver <span class=\"keyword\">extends</span> Observer &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> name: <span class=\"built_in\">string</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> state: <span class=\"built_in\">number</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> subject: ConcreteSubject;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span> (<span class=\"params\">subject: ConcreteSubject, name: <span class=\"built_in\">string</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>();</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcreteObserver\"</span>, name, <span class=\"string\">\"is created!\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.subject = subject;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> notify(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcreteObserver's notify method\"</span>);</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name, <span class=\"keyword\">this</span>.state);</div><div class=\"line\">            <span class=\"keyword\">this</span>.state = <span class=\"keyword\">this</span>.subject.SubjectState;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">get</span> Subject(): ConcreteSubject &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.subject;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">set</span> Subject(subject: ConcreteSubject) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.subject = subject;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"中介模式(Mediator)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 中介模式的定义\n- 中介者模式用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。\n- 每一个同事对象在需要和其他同事对象通信时，先与中介者通信，通过中介者来间接完成与其他同事类的通信；\n- 在具体同事类中实现了在抽象同事类中定义的方法。\n- 中介者模式又称为调停者模式，它是一种对象行为型模式。\n### 中介模式包含二个角色：\n- Mediator-抽象中介者用于定义一个接口，该接口用于与各同事对象之间的通信；\n- ConcreteMediator-具体中介者是抽象中介者的子类，通过协调各个同事对象来实现协作行为，了解并维护它的各个同事对象的引用；\n- Colleague-抽象同事类定义各同事的公有方法；\n- Colleague-具体同事类是抽象同事类的子类，每一个同事对象都引用一个中介者对象；\n\n---\n\n### ES6实现\n``` js\nclass Mediator {\n    constructor() {\n        console.log('Mediator Class created');\n    }\n\n    colleagueChanged(colleague) {\n        console.log('Mediator.colleagueChanged invoked');\n    }\n}\n\nclass ConcreteMediator extends Mediator {\n    constructor() {\n        super();\n        console.log('ConcreteMediator Class created');\n        this.colleague1 = new ConcreteColleague1(this);\n        this.colleague2 = new ConcreteColleague2(this);\n    }\n\n    colleagueChanged(colleague) {\n        console.log('ConcreteMediator.colleagueChanged invoked');\n        switch (colleague) {\n            case this.colleague1:\n                console.log('ConcreteColleague1 has Changed -> change ConcreteColleague2.feature: ');\n                this.colleague2.setFeature('new feature 2');\n                break\n            case this.colleague2:\n                console.log('ConcreteColleague2 has Changed, but do nothing');\n                break\n            default:\n                console.log('Do nothing');\n        }\n    }\n}\n\nclass Colleague {\n    constructor() {\n        console.log('Colleague Class created');\n    }\n\n    changed() {\n        console.log('Colleague.changed invoked');\n        this.mediator.colleagueChanged(this);\n    }\n}\n\nclass ConcreteColleague1 extends Colleague {\n    constructor(mediator) {\n        super();\n        console.log('ConcreteColleague1 Class created');\n        this.mediator = mediator;\n        this.feature = \"feature 1\";\n    }\n\n    setFeature(feature) {\n        console.log('ConcreteColleague1.setFeature invoked');\n        console.log('ConcreteColleague1 Feature has changed from ' + this.feature + ' to ' + feature)\n        this.feature = feature;\n        this.changed();\n    }\n}\n\nclass ConcreteColleague2 extends Colleague {\n    constructor(mediator) {\n        super();\n        console.log('ConcreteColleague2 Class created');\n        this.mediator = mediator;\n        this.feature = \"feature 2\";\n    }\n\n    setFeature(feature) {\n        console.log('ConcreteColleague2.setFeature invoked');\n        console.log('ConcreteColleague2 Feature has changed from ' + this.feature + ' to ' + feature);\n        this.feature = feature;\n        this.changed();\n    }\n}\n\nvar mediator = new ConcreteMediator();\nmediator.colleague1.setFeature(\"new feature 1\");\n```\n---\n\n### Typescript实现\n``` ts\nnamespace MediatorPattern {\n    export interface Mediator {\n        send(msg: string, colleague: Colleague): void;\n    }\n\n    export class Colleague {\n        public mediator: Mediator;\n\n        constructor(mediator: Mediator) {\n            this.mediator = mediator;\n        }\n\n        public send(msg: string): void {\n            throw new Error(\"Abstract Method!\");\n        }\n\n        public receive(msg: string): void {\n            throw new Error(\"Abstract Method!\");\n        }\n    }\n\n    export class ConcreteColleagueA extends Colleague {\n        constructor(mediator: Mediator) {\n            super(mediator);\n        }\n\n        public send(msg: string): void {\n            this.mediator.send(msg, this);\n        }\n\n        public receive(msg: string): void {\n            console.log(msg, \"`receive` of ConcreteColleagueA is being called!\");\n        }\n    }\n\n    export class ConcreteColleagueB extends Colleague {\n        constructor(mediator: Mediator) {\n            super(mediator);\n        }\n\n        public send(msg: string): void {\n            this.mediator.send(msg, this);\n        }\n\n        public receive(msg: string): void {\n            console.log(msg, \"`receive` of ConcreteColleagueB is being called!\");\n        }\n    }\n\n    export class ConcreteMediator implements Mediator {\n        public concreteColleagueA: ConcreteColleagueA;\n        public concreteColleagueB: ConcreteColleagueB;\n\n        public send(msg: string, colleague: Colleague): void {\n            if (this.concreteColleagueA === colleague) {\n                this.concreteColleagueB.receive(msg);\n            } else {\n                this.concreteColleagueA.receive(msg);\n            }\n        }\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Mediator.md","raw":"---\ntitle: 中介模式(Mediator)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Behavioral Patterns]\ntags: [javasctipt, 中介模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 中介模式的定义\n- 中介者模式用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。\n- 每一个同事对象在需要和其他同事对象通信时，先与中介者通信，通过中介者来间接完成与其他同事类的通信；\n- 在具体同事类中实现了在抽象同事类中定义的方法。\n- 中介者模式又称为调停者模式，它是一种对象行为型模式。\n### 中介模式包含二个角色：\n- Mediator-抽象中介者用于定义一个接口，该接口用于与各同事对象之间的通信；\n- ConcreteMediator-具体中介者是抽象中介者的子类，通过协调各个同事对象来实现协作行为，了解并维护它的各个同事对象的引用；\n- Colleague-抽象同事类定义各同事的公有方法；\n- Colleague-具体同事类是抽象同事类的子类，每一个同事对象都引用一个中介者对象；\n\n---\n\n### ES6实现\n``` js\nclass Mediator {\n    constructor() {\n        console.log('Mediator Class created');\n    }\n\n    colleagueChanged(colleague) {\n        console.log('Mediator.colleagueChanged invoked');\n    }\n}\n\nclass ConcreteMediator extends Mediator {\n    constructor() {\n        super();\n        console.log('ConcreteMediator Class created');\n        this.colleague1 = new ConcreteColleague1(this);\n        this.colleague2 = new ConcreteColleague2(this);\n    }\n\n    colleagueChanged(colleague) {\n        console.log('ConcreteMediator.colleagueChanged invoked');\n        switch (colleague) {\n            case this.colleague1:\n                console.log('ConcreteColleague1 has Changed -> change ConcreteColleague2.feature: ');\n                this.colleague2.setFeature('new feature 2');\n                break\n            case this.colleague2:\n                console.log('ConcreteColleague2 has Changed, but do nothing');\n                break\n            default:\n                console.log('Do nothing');\n        }\n    }\n}\n\nclass Colleague {\n    constructor() {\n        console.log('Colleague Class created');\n    }\n\n    changed() {\n        console.log('Colleague.changed invoked');\n        this.mediator.colleagueChanged(this);\n    }\n}\n\nclass ConcreteColleague1 extends Colleague {\n    constructor(mediator) {\n        super();\n        console.log('ConcreteColleague1 Class created');\n        this.mediator = mediator;\n        this.feature = \"feature 1\";\n    }\n\n    setFeature(feature) {\n        console.log('ConcreteColleague1.setFeature invoked');\n        console.log('ConcreteColleague1 Feature has changed from ' + this.feature + ' to ' + feature)\n        this.feature = feature;\n        this.changed();\n    }\n}\n\nclass ConcreteColleague2 extends Colleague {\n    constructor(mediator) {\n        super();\n        console.log('ConcreteColleague2 Class created');\n        this.mediator = mediator;\n        this.feature = \"feature 2\";\n    }\n\n    setFeature(feature) {\n        console.log('ConcreteColleague2.setFeature invoked');\n        console.log('ConcreteColleague2 Feature has changed from ' + this.feature + ' to ' + feature);\n        this.feature = feature;\n        this.changed();\n    }\n}\n\nvar mediator = new ConcreteMediator();\nmediator.colleague1.setFeature(\"new feature 1\");\n```\n---\n\n### Typescript实现\n``` ts\nnamespace MediatorPattern {\n    export interface Mediator {\n        send(msg: string, colleague: Colleague): void;\n    }\n\n    export class Colleague {\n        public mediator: Mediator;\n\n        constructor(mediator: Mediator) {\n            this.mediator = mediator;\n        }\n\n        public send(msg: string): void {\n            throw new Error(\"Abstract Method!\");\n        }\n\n        public receive(msg: string): void {\n            throw new Error(\"Abstract Method!\");\n        }\n    }\n\n    export class ConcreteColleagueA extends Colleague {\n        constructor(mediator: Mediator) {\n            super(mediator);\n        }\n\n        public send(msg: string): void {\n            this.mediator.send(msg, this);\n        }\n\n        public receive(msg: string): void {\n            console.log(msg, \"`receive` of ConcreteColleagueA is being called!\");\n        }\n    }\n\n    export class ConcreteColleagueB extends Colleague {\n        constructor(mediator: Mediator) {\n            super(mediator);\n        }\n\n        public send(msg: string): void {\n            this.mediator.send(msg, this);\n        }\n\n        public receive(msg: string): void {\n            console.log(msg, \"`receive` of ConcreteColleagueB is being called!\");\n        }\n    }\n\n    export class ConcreteMediator implements Mediator {\n        public concreteColleagueA: ConcreteColleagueA;\n        public concreteColleagueB: ConcreteColleagueB;\n\n        public send(msg: string, colleague: Colleague): void {\n            if (this.concreteColleagueA === colleague) {\n                this.concreteColleagueB.receive(msg);\n            } else {\n                this.concreteColleagueA.receive(msg);\n            }\n        }\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Mediator","published":1,"updated":"2017-07-08T08:04:09.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52nth72000ze0mwqp9v1yfd","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"中介模式的定义\"><a href=\"#中介模式的定义\" class=\"headerlink\" title=\"中介模式的定义\"></a>中介模式的定义</h3><ul>\n<li>中介者模式用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</li>\n<li>每一个同事对象在需要和其他同事对象通信时，先与中介者通信，通过中介者来间接完成与其他同事类的通信；</li>\n<li>在具体同事类中实现了在抽象同事类中定义的方法。</li>\n<li>中介者模式又称为调停者模式，它是一种对象行为型模式。<h3 id=\"中介模式包含二个角色：\"><a href=\"#中介模式包含二个角色：\" class=\"headerlink\" title=\"中介模式包含二个角色：\"></a>中介模式包含二个角色：</h3></li>\n<li>Mediator-抽象中介者用于定义一个接口，该接口用于与各同事对象之间的通信；</li>\n<li>ConcreteMediator-具体中介者是抽象中介者的子类，通过协调各个同事对象来实现协作行为，了解并维护它的各个同事对象的引用；</li>\n<li>Colleague-抽象同事类定义各同事的公有方法；</li>\n<li>Colleague-具体同事类是抽象同事类的子类，每一个同事对象都引用一个中介者对象；</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mediator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Mediator Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    colleagueChanged(colleague) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Mediator.colleagueChanged invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteMediator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Mediator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteMediator Class created'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.colleague1 = <span class=\"keyword\">new</span> ConcreteColleague1(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.colleague2 = <span class=\"keyword\">new</span> ConcreteColleague2(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    colleagueChanged(colleague) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteMediator.colleagueChanged invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">switch</span> (colleague) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"keyword\">this</span>.colleague1:</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague1 has Changed -&gt; change ConcreteColleague2.feature: '</span>);</div><div class=\"line\">                <span class=\"keyword\">this</span>.colleague2.setFeature(<span class=\"string\">'new feature 2'</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"keyword\">this</span>.colleague2:</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague2 has Changed, but do nothing'</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'Do nothing'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Colleague</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Colleague Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    changed() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Colleague.changed invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.mediator.colleagueChanged(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteColleague1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Colleague</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(mediator) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague1 Class created'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.mediator = mediator;</div><div class=\"line\">        <span class=\"keyword\">this</span>.feature = <span class=\"string\">\"feature 1\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setFeature(feature) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague1.setFeature invoked'</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague1 Feature has changed from '</span> + <span class=\"keyword\">this</span>.feature + <span class=\"string\">' to '</span> + feature)</div><div class=\"line\">        <span class=\"keyword\">this</span>.feature = feature;</div><div class=\"line\">        <span class=\"keyword\">this</span>.changed();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteColleague2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Colleague</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(mediator) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague2 Class created'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.mediator = mediator;</div><div class=\"line\">        <span class=\"keyword\">this</span>.feature = <span class=\"string\">\"feature 2\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setFeature(feature) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague2.setFeature invoked'</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague2 Feature has changed from '</span> + <span class=\"keyword\">this</span>.feature + <span class=\"string\">' to '</span> + feature);</div><div class=\"line\">        <span class=\"keyword\">this</span>.feature = feature;</div><div class=\"line\">        <span class=\"keyword\">this</span>.changed();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> mediator = <span class=\"keyword\">new</span> ConcreteMediator();</div><div class=\"line\">mediator.colleague1.setFeature(<span class=\"string\">\"new feature 1\"</span>);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> MediatorPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Mediator &#123;</div><div class=\"line\">        send(msg: <span class=\"built_in\">string</span>, colleague: Colleague): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Colleague &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> mediator: Mediator;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">mediator: Mediator</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.mediator = mediator;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> send(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract Method!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> receive(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract Method!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteColleagueA <span class=\"keyword\">extends</span> Colleague &#123;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">mediator: Mediator</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(mediator);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> send(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.mediator.send(msg, <span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> receive(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(msg, <span class=\"string\">\"`receive` of ConcreteColleagueA is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteColleagueB <span class=\"keyword\">extends</span> Colleague &#123;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">mediator: Mediator</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(mediator);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> send(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.mediator.send(msg, <span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> receive(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(msg, <span class=\"string\">\"`receive` of ConcreteColleagueB is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteMediator <span class=\"keyword\">implements</span> Mediator &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> concreteColleagueA: ConcreteColleagueA;</div><div class=\"line\">        <span class=\"keyword\">public</span> concreteColleagueB: ConcreteColleagueB;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> send(msg: <span class=\"built_in\">string</span>, colleague: Colleague): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.concreteColleagueA === colleague) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.concreteColleagueB.receive(msg);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.concreteColleagueA.receive(msg);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"中介模式的定义\"><a href=\"#中介模式的定义\" class=\"headerlink\" title=\"中介模式的定义\"></a>中介模式的定义</h3><ul>\n<li>中介者模式用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</li>\n<li>每一个同事对象在需要和其他同事对象通信时，先与中介者通信，通过中介者来间接完成与其他同事类的通信；</li>\n<li>在具体同事类中实现了在抽象同事类中定义的方法。</li>\n<li>中介者模式又称为调停者模式，它是一种对象行为型模式。<h3 id=\"中介模式包含二个角色：\"><a href=\"#中介模式包含二个角色：\" class=\"headerlink\" title=\"中介模式包含二个角色：\"></a>中介模式包含二个角色：</h3></li>\n<li>Mediator-抽象中介者用于定义一个接口，该接口用于与各同事对象之间的通信；</li>\n<li>ConcreteMediator-具体中介者是抽象中介者的子类，通过协调各个同事对象来实现协作行为，了解并维护它的各个同事对象的引用；</li>\n<li>Colleague-抽象同事类定义各同事的公有方法；</li>\n<li>Colleague-具体同事类是抽象同事类的子类，每一个同事对象都引用一个中介者对象；</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mediator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Mediator Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    colleagueChanged(colleague) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Mediator.colleagueChanged invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteMediator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Mediator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteMediator Class created'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.colleague1 = <span class=\"keyword\">new</span> ConcreteColleague1(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.colleague2 = <span class=\"keyword\">new</span> ConcreteColleague2(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    colleagueChanged(colleague) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteMediator.colleagueChanged invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">switch</span> (colleague) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"keyword\">this</span>.colleague1:</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague1 has Changed -&gt; change ConcreteColleague2.feature: '</span>);</div><div class=\"line\">                <span class=\"keyword\">this</span>.colleague2.setFeature(<span class=\"string\">'new feature 2'</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"keyword\">this</span>.colleague2:</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague2 has Changed, but do nothing'</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'Do nothing'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Colleague</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Colleague Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    changed() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Colleague.changed invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.mediator.colleagueChanged(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteColleague1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Colleague</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(mediator) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague1 Class created'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.mediator = mediator;</div><div class=\"line\">        <span class=\"keyword\">this</span>.feature = <span class=\"string\">\"feature 1\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setFeature(feature) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague1.setFeature invoked'</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague1 Feature has changed from '</span> + <span class=\"keyword\">this</span>.feature + <span class=\"string\">' to '</span> + feature)</div><div class=\"line\">        <span class=\"keyword\">this</span>.feature = feature;</div><div class=\"line\">        <span class=\"keyword\">this</span>.changed();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteColleague2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Colleague</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(mediator) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague2 Class created'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.mediator = mediator;</div><div class=\"line\">        <span class=\"keyword\">this</span>.feature = <span class=\"string\">\"feature 2\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setFeature(feature) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague2.setFeature invoked'</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague2 Feature has changed from '</span> + <span class=\"keyword\">this</span>.feature + <span class=\"string\">' to '</span> + feature);</div><div class=\"line\">        <span class=\"keyword\">this</span>.feature = feature;</div><div class=\"line\">        <span class=\"keyword\">this</span>.changed();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> mediator = <span class=\"keyword\">new</span> ConcreteMediator();</div><div class=\"line\">mediator.colleague1.setFeature(<span class=\"string\">\"new feature 1\"</span>);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> MediatorPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Mediator &#123;</div><div class=\"line\">        send(msg: <span class=\"built_in\">string</span>, colleague: Colleague): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Colleague &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> mediator: Mediator;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">mediator: Mediator</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.mediator = mediator;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> send(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract Method!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> receive(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract Method!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteColleagueA <span class=\"keyword\">extends</span> Colleague &#123;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">mediator: Mediator</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(mediator);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> send(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.mediator.send(msg, <span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> receive(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(msg, <span class=\"string\">\"`receive` of ConcreteColleagueA is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteColleagueB <span class=\"keyword\">extends</span> Colleague &#123;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">mediator: Mediator</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(mediator);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> send(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.mediator.send(msg, <span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> receive(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(msg, <span class=\"string\">\"`receive` of ConcreteColleagueB is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteMediator <span class=\"keyword\">implements</span> Mediator &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> concreteColleagueA: ConcreteColleagueA;</div><div class=\"line\">        <span class=\"keyword\">public</span> concreteColleagueB: ConcreteColleagueB;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> send(msg: <span class=\"built_in\">string</span>, colleague: Colleague): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.concreteColleagueA === colleague) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.concreteColleagueB.receive(msg);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.concreteColleagueA.receive(msg);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"原型模式(Prototype)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n\n---\n\n### ES6实现\n``` js\nclass Prototype {\n    constructor(prototype) {\n        console.log(\"Prototype Class created\");\n    }\n\n    setFeature(key, val) {\n        this[key] = val\n    }\n\n    clone() {\n        console.log(\"Prototype.clone invoked\");\n    }\n}\n\nclass ConcretePrototype1 extends Prototype {\n    constructor() {\n        super();\n        console.log(\"ConcretePrototype1 created\");\n        this.feature = \"feature 1\"\n    }\n\n    clone() {\n        console.log('ConcretePrototype1.clone invoked');\n        let clone = new ConcretePrototype1();\n        let keys = Object.keys(this);\n\n        keys.forEach(k => clone.setFeature(k, this[k]));\n\n        console.log(\"ConcretePrototype1 cloned\");\n        return clone;\n    }\n}\n\nclass ConcretePrototype2 extends Prototype {\n    constructor() {\n        super();\n        console.log(\"ConcretePrototype2 created\");\n        this.feature = \"feature 2\"\n    }\n\n    clone() {\n        console.log('ConcretePrototype2.Clone function');\n        let clone = new ConcretePrototype2();\n        let keys = Object.keys(this);\n\n        keys.forEach(k => clone.setFeature(k, this[k]));\n        console.log(\"ConcretePrototype2 cloned\");\n        return clone;\n    }\n}\n\nvar proto1 = new ConcretePrototype1();\nproto1.setFeature('feature', \"feature 11\");\nvar clone1 = proto1.clone();\nconsole.log(clone1.feature);\nconsole.log(typeof clone1);\nconsole.log(clone1 === proto1);\n\nvar proto2 = new ConcretePrototype2();\nproto2.setFeature('feature', \"feature 22\");\nvar clone2 = proto2.clone();\nconsole.log(clone2.feature);\nconsole.log(typeof clone2);\nconsole.log(clone2 === proto2);\n```\n---\n\n### Typescript实现\n``` ts\nnamespace PrototypePattern {\n    export interface Prototype {\n        clone(): Prototype;\n        toString(): string;\n    }\n\n    export class Concrete1 implements Prototype {\n\n        clone() : Prototype {\n            return new Concrete1();\n        }\n\n        toString(): string {\n            return \"This is Concrete1\";\n        }\n    }\n\n    export class Concrete2 implements Prototype {\n\n        clone() : Prototype {\n            return new Concrete2();\n        }\n\n        toString(): string {\n            return \"This is Concrete2\";\n        }\n    }\n\n    export class Concrete3 implements Prototype {\n\n        clone() : Prototype {\n            return new Concrete3();\n        }\n\n        toString(): string {\n            return \"This is Concrete3\";\n        }\n    }\n\n\n    export class Builder {\n        private prototypeMap: { [s: string]: Prototype; } = {};\n\n        constructor() {\n            this.prototypeMap['c1'] = new Concrete1();\n            this.prototypeMap['c2'] = new Concrete2();\n            this.prototypeMap['c3'] = new Concrete3();\n        }\n\n        createOne(s: string): Prototype {\n            console.log(s);\n            return this.prototypeMap[s].clone();\n        }\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Prototype.md","raw":"---\ntitle:  原型模式(Prototype)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Creational Patterns]\ntags: [javasctipt,  原型模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n\n---\n\n### ES6实现\n``` js\nclass Prototype {\n    constructor(prototype) {\n        console.log(\"Prototype Class created\");\n    }\n\n    setFeature(key, val) {\n        this[key] = val\n    }\n\n    clone() {\n        console.log(\"Prototype.clone invoked\");\n    }\n}\n\nclass ConcretePrototype1 extends Prototype {\n    constructor() {\n        super();\n        console.log(\"ConcretePrototype1 created\");\n        this.feature = \"feature 1\"\n    }\n\n    clone() {\n        console.log('ConcretePrototype1.clone invoked');\n        let clone = new ConcretePrototype1();\n        let keys = Object.keys(this);\n\n        keys.forEach(k => clone.setFeature(k, this[k]));\n\n        console.log(\"ConcretePrototype1 cloned\");\n        return clone;\n    }\n}\n\nclass ConcretePrototype2 extends Prototype {\n    constructor() {\n        super();\n        console.log(\"ConcretePrototype2 created\");\n        this.feature = \"feature 2\"\n    }\n\n    clone() {\n        console.log('ConcretePrototype2.Clone function');\n        let clone = new ConcretePrototype2();\n        let keys = Object.keys(this);\n\n        keys.forEach(k => clone.setFeature(k, this[k]));\n        console.log(\"ConcretePrototype2 cloned\");\n        return clone;\n    }\n}\n\nvar proto1 = new ConcretePrototype1();\nproto1.setFeature('feature', \"feature 11\");\nvar clone1 = proto1.clone();\nconsole.log(clone1.feature);\nconsole.log(typeof clone1);\nconsole.log(clone1 === proto1);\n\nvar proto2 = new ConcretePrototype2();\nproto2.setFeature('feature', \"feature 22\");\nvar clone2 = proto2.clone();\nconsole.log(clone2.feature);\nconsole.log(typeof clone2);\nconsole.log(clone2 === proto2);\n```\n---\n\n### Typescript实现\n``` ts\nnamespace PrototypePattern {\n    export interface Prototype {\n        clone(): Prototype;\n        toString(): string;\n    }\n\n    export class Concrete1 implements Prototype {\n\n        clone() : Prototype {\n            return new Concrete1();\n        }\n\n        toString(): string {\n            return \"This is Concrete1\";\n        }\n    }\n\n    export class Concrete2 implements Prototype {\n\n        clone() : Prototype {\n            return new Concrete2();\n        }\n\n        toString(): string {\n            return \"This is Concrete2\";\n        }\n    }\n\n    export class Concrete3 implements Prototype {\n\n        clone() : Prototype {\n            return new Concrete3();\n        }\n\n        toString(): string {\n            return \"This is Concrete3\";\n        }\n    }\n\n\n    export class Builder {\n        private prototypeMap: { [s: string]: Prototype; } = {};\n\n        constructor() {\n            this.prototypeMap['c1'] = new Concrete1();\n            this.prototypeMap['c2'] = new Concrete2();\n            this.prototypeMap['c3'] = new Concrete3();\n        }\n\n        createOne(s: string): Prototype {\n            console.log(s);\n            return this.prototypeMap[s].clone();\n        }\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Prototype","published":1,"updated":"2017-07-08T08:04:09.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52nth750013e0mwhuso5e4o","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Prototype</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(prototype) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Prototype Class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setFeature(key, val) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>[key] = val</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    clone() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Prototype.clone invoked\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcretePrototype1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Prototype</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcretePrototype1 created\"</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.feature = <span class=\"string\">\"feature 1\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    clone() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcretePrototype1.clone invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">let</span> clone = <span class=\"keyword\">new</span> ConcretePrototype1();</div><div class=\"line\">        <span class=\"keyword\">let</span> keys = <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">        keys.forEach(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> clone.setFeature(k, <span class=\"keyword\">this</span>[k]));</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcretePrototype1 cloned\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> clone;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcretePrototype2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Prototype</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcretePrototype2 created\"</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.feature = <span class=\"string\">\"feature 2\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    clone() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcretePrototype2.Clone function'</span>);</div><div class=\"line\">        <span class=\"keyword\">let</span> clone = <span class=\"keyword\">new</span> ConcretePrototype2();</div><div class=\"line\">        <span class=\"keyword\">let</span> keys = <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">        keys.forEach(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> clone.setFeature(k, <span class=\"keyword\">this</span>[k]));</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcretePrototype2 cloned\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> clone;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> proto1 = <span class=\"keyword\">new</span> ConcretePrototype1();</div><div class=\"line\">proto1.setFeature(<span class=\"string\">'feature'</span>, <span class=\"string\">\"feature 11\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> clone1 = proto1.clone();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(clone1.feature);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> clone1);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(clone1 === proto1);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> proto2 = <span class=\"keyword\">new</span> ConcretePrototype2();</div><div class=\"line\">proto2.setFeature(<span class=\"string\">'feature'</span>, <span class=\"string\">\"feature 22\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> clone2 = proto2.clone();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(clone2.feature);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> clone2);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(clone2 === proto2);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> PrototypePattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Prototype &#123;</div><div class=\"line\">        clone(): Prototype;</div><div class=\"line\">        toString(): <span class=\"built_in\">string</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Concrete1 <span class=\"keyword\">implements</span> Prototype &#123;</div><div class=\"line\"></div><div class=\"line\">        clone() : Prototype &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Concrete1();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        toString(): <span class=\"built_in\">string</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"This is Concrete1\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Concrete2 <span class=\"keyword\">implements</span> Prototype &#123;</div><div class=\"line\"></div><div class=\"line\">        clone() : Prototype &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Concrete2();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        toString(): <span class=\"built_in\">string</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"This is Concrete2\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Concrete3 <span class=\"keyword\">implements</span> Prototype &#123;</div><div class=\"line\"></div><div class=\"line\">        clone() : Prototype &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Concrete3();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        toString(): <span class=\"built_in\">string</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"This is Concrete3\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Builder &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> prototypeMap: &#123; [s: <span class=\"built_in\">string</span>]: Prototype; &#125; = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.prototypeMap[<span class=\"string\">'c1'</span>] = <span class=\"keyword\">new</span> Concrete1();</div><div class=\"line\">            <span class=\"keyword\">this</span>.prototypeMap[<span class=\"string\">'c2'</span>] = <span class=\"keyword\">new</span> Concrete2();</div><div class=\"line\">            <span class=\"keyword\">this</span>.prototypeMap[<span class=\"string\">'c3'</span>] = <span class=\"keyword\">new</span> Concrete3();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        createOne(s: <span class=\"built_in\">string</span>): Prototype &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(s);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.prototypeMap[s].clone();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><p><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></p>\n</li>\n<li><p><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></p>\n</li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Prototype</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(prototype) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Prototype Class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setFeature(key, val) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>[key] = val</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    clone() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Prototype.clone invoked\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcretePrototype1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Prototype</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcretePrototype1 created\"</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.feature = <span class=\"string\">\"feature 1\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    clone() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcretePrototype1.clone invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">let</span> clone = <span class=\"keyword\">new</span> ConcretePrototype1();</div><div class=\"line\">        <span class=\"keyword\">let</span> keys = <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">        keys.forEach(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> clone.setFeature(k, <span class=\"keyword\">this</span>[k]));</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcretePrototype1 cloned\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> clone;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcretePrototype2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Prototype</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcretePrototype2 created\"</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.feature = <span class=\"string\">\"feature 2\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    clone() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcretePrototype2.Clone function'</span>);</div><div class=\"line\">        <span class=\"keyword\">let</span> clone = <span class=\"keyword\">new</span> ConcretePrototype2();</div><div class=\"line\">        <span class=\"keyword\">let</span> keys = <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">        keys.forEach(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> clone.setFeature(k, <span class=\"keyword\">this</span>[k]));</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcretePrototype2 cloned\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> clone;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> proto1 = <span class=\"keyword\">new</span> ConcretePrototype1();</div><div class=\"line\">proto1.setFeature(<span class=\"string\">'feature'</span>, <span class=\"string\">\"feature 11\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> clone1 = proto1.clone();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(clone1.feature);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> clone1);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(clone1 === proto1);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> proto2 = <span class=\"keyword\">new</span> ConcretePrototype2();</div><div class=\"line\">proto2.setFeature(<span class=\"string\">'feature'</span>, <span class=\"string\">\"feature 22\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> clone2 = proto2.clone();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(clone2.feature);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> clone2);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(clone2 === proto2);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> PrototypePattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Prototype &#123;</div><div class=\"line\">        clone(): Prototype;</div><div class=\"line\">        toString(): <span class=\"built_in\">string</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Concrete1 <span class=\"keyword\">implements</span> Prototype &#123;</div><div class=\"line\"></div><div class=\"line\">        clone() : Prototype &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Concrete1();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        toString(): <span class=\"built_in\">string</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"This is Concrete1\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Concrete2 <span class=\"keyword\">implements</span> Prototype &#123;</div><div class=\"line\"></div><div class=\"line\">        clone() : Prototype &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Concrete2();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        toString(): <span class=\"built_in\">string</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"This is Concrete2\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Concrete3 <span class=\"keyword\">implements</span> Prototype &#123;</div><div class=\"line\"></div><div class=\"line\">        clone() : Prototype &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Concrete3();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        toString(): <span class=\"built_in\">string</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"This is Concrete3\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Builder &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> prototypeMap: &#123; [s: <span class=\"built_in\">string</span>]: Prototype; &#125; = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.prototypeMap[<span class=\"string\">'c1'</span>] = <span class=\"keyword\">new</span> Concrete1();</div><div class=\"line\">            <span class=\"keyword\">this</span>.prototypeMap[<span class=\"string\">'c2'</span>] = <span class=\"keyword\">new</span> Concrete2();</div><div class=\"line\">            <span class=\"keyword\">this</span>.prototypeMap[<span class=\"string\">'c3'</span>] = <span class=\"keyword\">new</span> Concrete3();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        createOne(s: <span class=\"built_in\">string</span>): Prototype &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(s);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.prototypeMap[s].clone();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><p><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></p>\n</li>\n<li><p><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></p>\n</li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"代理模式(Proxy)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 代理模式的定义\n- 代理模式(Proxy Pattern) ：给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英 文叫做Proxy或Surrogate，它是一种对象结构型模式。\n\n### 代理模式包含三个角色：\nSubject: 抽象主题角色\nProxy: 代理主题角色\nRealSubject: 真实主题角色\n\n---\n\n### ES6实现\n``` js\nclass Subject {\n    constructor() {\n        console.log('Subject Class created');\n    }\n\n    request() {\n        console.log('Subject.request invoked');\n    }\n}\n\nclass RealSubject extends Subject {\n    constructor() {\n        super()\n        console.log('RealSubject Class created');\n    }\n\n    request() {\n        console.log('RealSubject.request invoked');\n    }\n}\n\nclass Proxy extends Subject {\n    constructor() {\n        super()\n        console.log('Proxy Class created');\n    }\n\n    request() {\n        this.realSubject = new RealSubject();\n        this.realSubject.request();\n    }\n}\n\nvar proxy = new Proxy()\nproxy.request()\n\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace ProxyPattern {\n    export interface Subject {\n        doAction(): void;\n    }\n\n    export class Proxy implements Subject {\n        private realSubject: RealSubject;\n        private s: string;\n\n        constructor(s: string) {\n            this.s = s;\n        }\n\n        public doAction(): void {\n            console.log(\"`doAction` of Proxy(\", this.s, \")\");\n            if (this.realSubject === null || this.realSubject === undefined) {\n                console.log(\"creating a new RealSubject.\");\n                this.realSubject = new RealSubject(this.s);\n            }\n            this.realSubject.doAction();\n        }\n    }\n\n    export class RealSubject implements Subject {\n        private s: string;\n\n        constructor(s: string) {\n            this.s = s;\n        }\n        public doAction(): void {\n            console.log(\"`doAction` of RealSubject\", this.s, \"is being called!\");\n        }\n    }\n}\n\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Proxy.md","raw":"---\ntitle: 代理模式(Proxy)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Structural Patterns]\ntags: [javasctipt, 代理模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 代理模式的定义\n- 代理模式(Proxy Pattern) ：给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英 文叫做Proxy或Surrogate，它是一种对象结构型模式。\n\n### 代理模式包含三个角色：\nSubject: 抽象主题角色\nProxy: 代理主题角色\nRealSubject: 真实主题角色\n\n---\n\n### ES6实现\n``` js\nclass Subject {\n    constructor() {\n        console.log('Subject Class created');\n    }\n\n    request() {\n        console.log('Subject.request invoked');\n    }\n}\n\nclass RealSubject extends Subject {\n    constructor() {\n        super()\n        console.log('RealSubject Class created');\n    }\n\n    request() {\n        console.log('RealSubject.request invoked');\n    }\n}\n\nclass Proxy extends Subject {\n    constructor() {\n        super()\n        console.log('Proxy Class created');\n    }\n\n    request() {\n        this.realSubject = new RealSubject();\n        this.realSubject.request();\n    }\n}\n\nvar proxy = new Proxy()\nproxy.request()\n\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace ProxyPattern {\n    export interface Subject {\n        doAction(): void;\n    }\n\n    export class Proxy implements Subject {\n        private realSubject: RealSubject;\n        private s: string;\n\n        constructor(s: string) {\n            this.s = s;\n        }\n\n        public doAction(): void {\n            console.log(\"`doAction` of Proxy(\", this.s, \")\");\n            if (this.realSubject === null || this.realSubject === undefined) {\n                console.log(\"creating a new RealSubject.\");\n                this.realSubject = new RealSubject(this.s);\n            }\n            this.realSubject.doAction();\n        }\n    }\n\n    export class RealSubject implements Subject {\n        private s: string;\n\n        constructor(s: string) {\n            this.s = s;\n        }\n        public doAction(): void {\n            console.log(\"`doAction` of RealSubject\", this.s, \"is being called!\");\n        }\n    }\n}\n\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Proxy","published":1,"updated":"2017-07-13T06:11:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52nth760016e0mwoc0ocgf7","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"代理模式的定义\"><a href=\"#代理模式的定义\" class=\"headerlink\" title=\"代理模式的定义\"></a>代理模式的定义</h3><ul>\n<li>代理模式(Proxy Pattern) ：给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英 文叫做Proxy或Surrogate，它是一种对象结构型模式。</li>\n</ul>\n<h3 id=\"代理模式包含三个角色：\"><a href=\"#代理模式包含三个角色：\" class=\"headerlink\" title=\"代理模式包含三个角色：\"></a>代理模式包含三个角色：</h3><p>Subject: 抽象主题角色<br>Proxy: 代理主题角色<br>RealSubject: 真实主题角色</p>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Subject Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    request() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Subject.request invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealSubject</span> <span class=\"keyword\">extends</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'RealSubject Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    request() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'RealSubject.request invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">extends</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Proxy Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    request() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.realSubject = <span class=\"keyword\">new</span> RealSubject();</div><div class=\"line\">        <span class=\"keyword\">this</span>.realSubject.request();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>()</div><div class=\"line\">proxy.request()</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> ProxyPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Subject &#123;</div><div class=\"line\">        doAction(): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Proxy <span class=\"keyword\">implements</span> Subject &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> realSubject: RealSubject;</div><div class=\"line\">        <span class=\"keyword\">private</span> s: <span class=\"built_in\">string</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">s: <span class=\"built_in\">string</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> doAction(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`doAction` of Proxy(\"</span>, <span class=\"keyword\">this</span>.s, <span class=\"string\">\")\"</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.realSubject === <span class=\"literal\">null</span> || <span class=\"keyword\">this</span>.realSubject === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"creating a new RealSubject.\"</span>);</div><div class=\"line\">                <span class=\"keyword\">this</span>.realSubject = <span class=\"keyword\">new</span> RealSubject(<span class=\"keyword\">this</span>.s);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">this</span>.realSubject.doAction();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> RealSubject <span class=\"keyword\">implements</span> Subject &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> s: <span class=\"built_in\">string</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">s: <span class=\"built_in\">string</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">public</span> doAction(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`doAction` of RealSubject\"</span>, <span class=\"keyword\">this</span>.s, <span class=\"string\">\"is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"代理模式的定义\"><a href=\"#代理模式的定义\" class=\"headerlink\" title=\"代理模式的定义\"></a>代理模式的定义</h3><ul>\n<li>代理模式(Proxy Pattern) ：给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英 文叫做Proxy或Surrogate，它是一种对象结构型模式。</li>\n</ul>\n<h3 id=\"代理模式包含三个角色：\"><a href=\"#代理模式包含三个角色：\" class=\"headerlink\" title=\"代理模式包含三个角色：\"></a>代理模式包含三个角色：</h3><p>Subject: 抽象主题角色<br>Proxy: 代理主题角色<br>RealSubject: 真实主题角色</p>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Subject Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    request() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Subject.request invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealSubject</span> <span class=\"keyword\">extends</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'RealSubject Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    request() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'RealSubject.request invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">extends</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Proxy Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    request() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.realSubject = <span class=\"keyword\">new</span> RealSubject();</div><div class=\"line\">        <span class=\"keyword\">this</span>.realSubject.request();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>()</div><div class=\"line\">proxy.request()</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> ProxyPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Subject &#123;</div><div class=\"line\">        doAction(): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Proxy <span class=\"keyword\">implements</span> Subject &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> realSubject: RealSubject;</div><div class=\"line\">        <span class=\"keyword\">private</span> s: <span class=\"built_in\">string</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">s: <span class=\"built_in\">string</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> doAction(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`doAction` of Proxy(\"</span>, <span class=\"keyword\">this</span>.s, <span class=\"string\">\")\"</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.realSubject === <span class=\"literal\">null</span> || <span class=\"keyword\">this</span>.realSubject === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"creating a new RealSubject.\"</span>);</div><div class=\"line\">                <span class=\"keyword\">this</span>.realSubject = <span class=\"keyword\">new</span> RealSubject(<span class=\"keyword\">this</span>.s);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">this</span>.realSubject.doAction();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> RealSubject <span class=\"keyword\">implements</span> Subject &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> s: <span class=\"built_in\">string</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">s: <span class=\"built_in\">string</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">public</span> doAction(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`doAction` of RealSubject\"</span>, <span class=\"keyword\">this</span>.s, <span class=\"string\">\"is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"Promise","date":"2017-07-13T06:11:11.000Z","_content":"![promise](https://mdn.mozillademos.org/files/8633/promises.png)\nPromise 对象用于一个异步操作的最终完成（或失败）及其结果值的表示。(简单点说就是处理异步请求。。我们经常会做些承诺，如果我赢了你就嫁给我，如果输了我就嫁给你之类的诺言。这就是promise的中文含义。一个诺言，一个成功，一个失败。)\n\nnew Promise(\n    /* executor */\n    function(resolve, reject) {...}\n);\n## 参数\n### executor(resolve, reject)\n该函数会马上被调用，它带有两个参数的函数对象：\n    executor是一个带有resolve和reject两个参数的函数 。executor 函数在Promise构造函数执行时同步执行，被传递resolve和reject函数（executor 函数在Promise构造函数返回新建对象前被调用）。resolve 和 reject 函数被调用时，分别将promise的状态改为fulfilled(完成)或rejected（失败）。executor 内部通常会执行一些异步操作，一旦完成，可以调用resolve函数来将promise状态改成fulfilled，或者在发生错误时将它的状态改为rejected\n### 解决函数resolve()\n用特定值满足绑定的promise，或者把状态传递到一个已存在的promise。如果绑定的promise已经被解决（可能是一个值，也可能是一个rejection，或者是另一个promise），该方法不会做任何事。\n\n> note: 用特定值满足绑定的promise，或者把状态传递到一个已存在的promise。如果绑定的promise已经被解决（可能是一个值，也可能是一个rejection，或者是另一个promise），该方法不会做任何事。\n\n---\n\n### 拒绝函数reject()\n用特定原因拒绝绑定的promise。如果promise已经被解决了，不管是值，拒绝，还是另一个promise，这个方法都不会做任何事。\n\n## 描述\n**Promise** 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers ）。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象\n\n\n一个 Promise有以下几种状态:\n\n- 未完成状态(pending), 此时完成值还不可用，他是唯一一个能够转换为其他状态的状态。\n- 已完成状态(fulfilled), 此时完成值可用，完成值与promise永久绑定，可为任意值，包括undefined\n- 拒绝状态(rejected), 出现错误时，拒绝理由与promise永久绑定，可为任意值，包括undefined，一般情况下为Error对象\n\npending 状态的 Promise 对象可能触发fulfilled 状态并传递一个值给相应的状态处理方法，也可能触发失败状态（rejected）并传递失败信息。当其中任一种情况出现时，Promise 对象的 then 方法绑定的处理方法（handlers ）就会被调用（then方法包含两个参数：onfulfilled 和 onrejected，它们都是 Function 类型。当Promise状态为fulfilled时，调用 then 的 onfulfilled 方法，当Promise状态为rejected时，调用 then 的 onrejected 方法， 所以在异步操作的完成和绑定处理方法之间不存在竞争）。\n\n因为 Promise.prototype.then 和 Promise.prototype.catch 方法返回promise 对象， 所以它们可以被链式调用。\n\n##构造函数\n创建一个新的promise，初始化为等待状态，并提供解决函数的引用，用于改变其状态。\nnew Promise(executor);\n\n## 方法\n### Promise.all(iterable)\n\n  这个方法返回一个新的promise对象，该promise对象在iterable参数对象里所有的promise对象都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise对象的失败。这个新的promise对象在触发成功状态以后，会把一个包含iterable里所有promise返回值的数组作为成功回调的返回值，顺序跟iterable的顺序保持一致；如果这个新的promise对象触发了失败状态，它会把iterable里第一个触发失败的promise对象的错误信息作为它的失败错误信息。Promise.all方法常被用于处理多个promise对象的状态集合。（可以参考jQuery.when方法---译者注）\n  ```js\n  var p1 = Promise.resolve(3);\n  var p2 = 1337;\n  var p3 = new Promise((resolve, reject) => {\n    setTimeout(resolve, 100, \"foo\");\n  }); \n\n  Promise.all([p1, p2, p3]).then(values => { \n    console.log(values); // [3, 1337, \"foo\"] \n  });\n  ```\n### Promise.race(iterable)\n\n  当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。\n  ```js\n  ar p1 = new Promise(function(resolve, reject) { \n      setTimeout(resolve, 500, \"one\"); \n  });\n  var p2 = new Promise(function(resolve, reject) { \n      setTimeout(resolve, 100, \"two\"); \n  });\n\n  Promise.race([p1, p2]).then(function(value) {\n    console.log(value); // \"two\"\n    // 两个都完成，但 p2 更快\n  });\n\n  var p3 = new Promise(function(resolve, reject) { \n      setTimeout(resolve, 100, \"three\");\n  });\n  var p4 = new Promise(function(resolve, reject) { \n      setTimeout(reject, 500, \"four\"); \n  });\n\n  Promise.race([p3, p4]).then(function(value) {\n    console.log(value); // \"three\"\n    // p3 更快，所以它完成了              \n  }, function(reason) {\n    // 未被调用\n  });\n```\n### Promise.reject(reason)\n\n  返回一个状态为失败的Promise对象，并将给定的失败信息传递给对应的处理方法\n  ```js\n  Promise.reject(\"Testing static reject\").then(function(reason) {\n    // 未被调用\n  }, function(reason) {\n    console.log(reason); // \"测试静态拒绝\"\n  });\n\n  Promise.reject(new Error(\"fail\")).then(function(error) {\n    // 未被调用\n  }, function(error) {\n    console.log(error); // 堆栈跟踪\n  });\n  ```\n### Promise.resolve(value)\n  返回一个状态由给定value决定的Promise对象。如果该值是一个Promise对象，则直接返回该对象；如果该值是thenable(即，带有then方法的对象)，返回的Promise对象的最终状态由then方法执行决定；否则的话(该value为空，基本类型或者不带then方法的对象),返回的Promise对象状态为fulfilled，并且将该value传递给对应的then方法。通常而言，如果你不知道一个值是否是Promise对象，使用Promise.resolve(value) 来返回一个Promise对象,这样就能将该value以Promise对象形式使用。\n```js\n// Resolve另一个promise对象\n\nvar original = Promise.resolve(true);\nvar cast = Promise.resolve(original);\ncast.then(function(v) {\n  console.log(v); // true\n});\n\n// resolve thenable的对象们并抛出错误\n// Resolve一个thenable对象\nvar p1 = Promise.resolve({ \n  then: function(resolve, onReject) { resolve(\"resolve!\"); }\n});\nconsole.log(p1 instanceof Promise) // true, 这是一个Promise对象\n\np1.then(function(v) {\n    console.log(v); // 输出\"resolve!\"\n  }, function(e) {\n    // 不会被调用\n});\n\n// Thenable在callback之前抛出异常\n// Promise rejects\nvar thenable = { then: function(resolve) {\n  throw new TypeError(\"Throwing\");\n  resolve(\"Resolving\");\n}};\n\nvar p2 = Promise.resolve(thenable);\np2.then(function(v) {\n  // 不会被调用\n}, function(e) {\n  console.log(e); // TypeError: Throwing\n});\n\n// Thenable在callback之后抛出异常\n// Promise resolves\nvar thenable = { then: function(resolve) {\n  resolve(\"Resolving\");\n  throw new TypeError(\"Throwing\");\n}};\n\nvar p3 = Promise.resolve(thenable);\np3.then(function(v) {\n  console.log(v); // 输出\"Resolving\"\n}, function(e) {\n  // 不会被调用\n});\n```\n\n## Promise 原型\n### 属性\n  - Promise.prototype.constructor\n\n  返回创建了实例原型的函数.  默认为 Promise 函数.\n### 方法\n- Promise.prototype.catch(onRejected)\n\n  添 p2 = Promise.resolve(thenable);\np2.then(function(v) {\n  // 不会被调用\n}, function(e) {\n  console.log(e); // TypeError: Throwing\n});\n\n// Thenable在callback之后抛出异常\n// Promise resolves\nvar thenable = { then: function(resolve) {\n  resolve(\"Resolving\");\n  throw new TypeError(\"Throwing\");\n}};\n\nvar p3 = Promise.resolve(thenable);\np3.then(function(v) {\n  console.log(v); // 输出\"Resolving\"\n}, function(e) {\n  // 不会被调用\n});\n```加一个否定(rejection) 回调到当前 promise, 返回一个新的promise。如果这个回调被调用，新 promise 将以它的返回值来resolve，否则如果当前promise 进入fulfilled状态，则以当前promise的肯定结果作为新promise的肯定结果.\n\n- Promise.prototype.then(onFulfilled, onRejected)\n\n添加肯定和否定回调到当前 promise, 返回一个新的 promise, 将以回调的返回值 来resolve.\n\n## 示例\n```js\nvar myFirstPromise = new Promise(function(resolve, reject){\n    //当异步代码执行成功时，我们才会调用resolve(...), 当异步代码失败时就会调用reject(...)\n    //在本例中，我们使用setTimeout(...)来模拟异步代码，实际编码时可能是XHR请求或是HTML5的一些API方法.\n    setTimeout(function(){\n        resolve(\"成功!\"); //代码正常执行！\n    }, 250);\n});\n\nmyFirstPromise.then(function(successMessage){\n    //successMessage的值是上面调用resolve(...)方法传入的值.\n    //successMessage参数不一定非要是字符串类型，这里只是举个例子\n    console.log(\"Yay! \" + successMessage);\n});\n```\n\n## 参考：\n- [mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n- [JavaScript 标准参考教程](http://javascript.ruanyifeng.com/)\n- [JavaScript Promise](https://developers.google.com/web/fundamentals/getting-started/primers/promises?hl=zh-cn\n\n\n","source":"_posts/Promise.md","raw":"---\ntitle: Promise\ndate: 2017-07-13 14:11:11\ncategories: [javascript, MDN]\ntags: [Promise]\n---\n![promise](https://mdn.mozillademos.org/files/8633/promises.png)\nPromise 对象用于一个异步操作的最终完成（或失败）及其结果值的表示。(简单点说就是处理异步请求。。我们经常会做些承诺，如果我赢了你就嫁给我，如果输了我就嫁给你之类的诺言。这就是promise的中文含义。一个诺言，一个成功，一个失败。)\n\nnew Promise(\n    /* executor */\n    function(resolve, reject) {...}\n);\n## 参数\n### executor(resolve, reject)\n该函数会马上被调用，它带有两个参数的函数对象：\n    executor是一个带有resolve和reject两个参数的函数 。executor 函数在Promise构造函数执行时同步执行，被传递resolve和reject函数（executor 函数在Promise构造函数返回新建对象前被调用）。resolve 和 reject 函数被调用时，分别将promise的状态改为fulfilled(完成)或rejected（失败）。executor 内部通常会执行一些异步操作，一旦完成，可以调用resolve函数来将promise状态改成fulfilled，或者在发生错误时将它的状态改为rejected\n### 解决函数resolve()\n用特定值满足绑定的promise，或者把状态传递到一个已存在的promise。如果绑定的promise已经被解决（可能是一个值，也可能是一个rejection，或者是另一个promise），该方法不会做任何事。\n\n> note: 用特定值满足绑定的promise，或者把状态传递到一个已存在的promise。如果绑定的promise已经被解决（可能是一个值，也可能是一个rejection，或者是另一个promise），该方法不会做任何事。\n\n---\n\n### 拒绝函数reject()\n用特定原因拒绝绑定的promise。如果promise已经被解决了，不管是值，拒绝，还是另一个promise，这个方法都不会做任何事。\n\n## 描述\n**Promise** 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers ）。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象\n\n\n一个 Promise有以下几种状态:\n\n- 未完成状态(pending), 此时完成值还不可用，他是唯一一个能够转换为其他状态的状态。\n- 已完成状态(fulfilled), 此时完成值可用，完成值与promise永久绑定，可为任意值，包括undefined\n- 拒绝状态(rejected), 出现错误时，拒绝理由与promise永久绑定，可为任意值，包括undefined，一般情况下为Error对象\n\npending 状态的 Promise 对象可能触发fulfilled 状态并传递一个值给相应的状态处理方法，也可能触发失败状态（rejected）并传递失败信息。当其中任一种情况出现时，Promise 对象的 then 方法绑定的处理方法（handlers ）就会被调用（then方法包含两个参数：onfulfilled 和 onrejected，它们都是 Function 类型。当Promise状态为fulfilled时，调用 then 的 onfulfilled 方法，当Promise状态为rejected时，调用 then 的 onrejected 方法， 所以在异步操作的完成和绑定处理方法之间不存在竞争）。\n\n因为 Promise.prototype.then 和 Promise.prototype.catch 方法返回promise 对象， 所以它们可以被链式调用。\n\n##构造函数\n创建一个新的promise，初始化为等待状态，并提供解决函数的引用，用于改变其状态。\nnew Promise(executor);\n\n## 方法\n### Promise.all(iterable)\n\n  这个方法返回一个新的promise对象，该promise对象在iterable参数对象里所有的promise对象都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise对象的失败。这个新的promise对象在触发成功状态以后，会把一个包含iterable里所有promise返回值的数组作为成功回调的返回值，顺序跟iterable的顺序保持一致；如果这个新的promise对象触发了失败状态，它会把iterable里第一个触发失败的promise对象的错误信息作为它的失败错误信息。Promise.all方法常被用于处理多个promise对象的状态集合。（可以参考jQuery.when方法---译者注）\n  ```js\n  var p1 = Promise.resolve(3);\n  var p2 = 1337;\n  var p3 = new Promise((resolve, reject) => {\n    setTimeout(resolve, 100, \"foo\");\n  }); \n\n  Promise.all([p1, p2, p3]).then(values => { \n    console.log(values); // [3, 1337, \"foo\"] \n  });\n  ```\n### Promise.race(iterable)\n\n  当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。\n  ```js\n  ar p1 = new Promise(function(resolve, reject) { \n      setTimeout(resolve, 500, \"one\"); \n  });\n  var p2 = new Promise(function(resolve, reject) { \n      setTimeout(resolve, 100, \"two\"); \n  });\n\n  Promise.race([p1, p2]).then(function(value) {\n    console.log(value); // \"two\"\n    // 两个都完成，但 p2 更快\n  });\n\n  var p3 = new Promise(function(resolve, reject) { \n      setTimeout(resolve, 100, \"three\");\n  });\n  var p4 = new Promise(function(resolve, reject) { \n      setTimeout(reject, 500, \"four\"); \n  });\n\n  Promise.race([p3, p4]).then(function(value) {\n    console.log(value); // \"three\"\n    // p3 更快，所以它完成了              \n  }, function(reason) {\n    // 未被调用\n  });\n```\n### Promise.reject(reason)\n\n  返回一个状态为失败的Promise对象，并将给定的失败信息传递给对应的处理方法\n  ```js\n  Promise.reject(\"Testing static reject\").then(function(reason) {\n    // 未被调用\n  }, function(reason) {\n    console.log(reason); // \"测试静态拒绝\"\n  });\n\n  Promise.reject(new Error(\"fail\")).then(function(error) {\n    // 未被调用\n  }, function(error) {\n    console.log(error); // 堆栈跟踪\n  });\n  ```\n### Promise.resolve(value)\n  返回一个状态由给定value决定的Promise对象。如果该值是一个Promise对象，则直接返回该对象；如果该值是thenable(即，带有then方法的对象)，返回的Promise对象的最终状态由then方法执行决定；否则的话(该value为空，基本类型或者不带then方法的对象),返回的Promise对象状态为fulfilled，并且将该value传递给对应的then方法。通常而言，如果你不知道一个值是否是Promise对象，使用Promise.resolve(value) 来返回一个Promise对象,这样就能将该value以Promise对象形式使用。\n```js\n// Resolve另一个promise对象\n\nvar original = Promise.resolve(true);\nvar cast = Promise.resolve(original);\ncast.then(function(v) {\n  console.log(v); // true\n});\n\n// resolve thenable的对象们并抛出错误\n// Resolve一个thenable对象\nvar p1 = Promise.resolve({ \n  then: function(resolve, onReject) { resolve(\"resolve!\"); }\n});\nconsole.log(p1 instanceof Promise) // true, 这是一个Promise对象\n\np1.then(function(v) {\n    console.log(v); // 输出\"resolve!\"\n  }, function(e) {\n    // 不会被调用\n});\n\n// Thenable在callback之前抛出异常\n// Promise rejects\nvar thenable = { then: function(resolve) {\n  throw new TypeError(\"Throwing\");\n  resolve(\"Resolving\");\n}};\n\nvar p2 = Promise.resolve(thenable);\np2.then(function(v) {\n  // 不会被调用\n}, function(e) {\n  console.log(e); // TypeError: Throwing\n});\n\n// Thenable在callback之后抛出异常\n// Promise resolves\nvar thenable = { then: function(resolve) {\n  resolve(\"Resolving\");\n  throw new TypeError(\"Throwing\");\n}};\n\nvar p3 = Promise.resolve(thenable);\np3.then(function(v) {\n  console.log(v); // 输出\"Resolving\"\n}, function(e) {\n  // 不会被调用\n});\n```\n\n## Promise 原型\n### 属性\n  - Promise.prototype.constructor\n\n  返回创建了实例原型的函数.  默认为 Promise 函数.\n### 方法\n- Promise.prototype.catch(onRejected)\n\n  添 p2 = Promise.resolve(thenable);\np2.then(function(v) {\n  // 不会被调用\n}, function(e) {\n  console.log(e); // TypeError: Throwing\n});\n\n// Thenable在callback之后抛出异常\n// Promise resolves\nvar thenable = { then: function(resolve) {\n  resolve(\"Resolving\");\n  throw new TypeError(\"Throwing\");\n}};\n\nvar p3 = Promise.resolve(thenable);\np3.then(function(v) {\n  console.log(v); // 输出\"Resolving\"\n}, function(e) {\n  // 不会被调用\n});\n```加一个否定(rejection) 回调到当前 promise, 返回一个新的promise。如果这个回调被调用，新 promise 将以它的返回值来resolve，否则如果当前promise 进入fulfilled状态，则以当前promise的肯定结果作为新promise的肯定结果.\n\n- Promise.prototype.then(onFulfilled, onRejected)\n\n添加肯定和否定回调到当前 promise, 返回一个新的 promise, 将以回调的返回值 来resolve.\n\n## 示例\n```js\nvar myFirstPromise = new Promise(function(resolve, reject){\n    //当异步代码执行成功时，我们才会调用resolve(...), 当异步代码失败时就会调用reject(...)\n    //在本例中，我们使用setTimeout(...)来模拟异步代码，实际编码时可能是XHR请求或是HTML5的一些API方法.\n    setTimeout(function(){\n        resolve(\"成功!\"); //代码正常执行！\n    }, 250);\n});\n\nmyFirstPromise.then(function(successMessage){\n    //successMessage的值是上面调用resolve(...)方法传入的值.\n    //successMessage参数不一定非要是字符串类型，这里只是举个例子\n    console.log(\"Yay! \" + successMessage);\n});\n```\n\n## 参考：\n- [mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n- [JavaScript 标准参考教程](http://javascript.ruanyifeng.com/)\n- [JavaScript Promise](https://developers.google.com/web/fundamentals/getting-started/primers/promises?hl=zh-cn\n\n\n","slug":"Promise","published":1,"updated":"2017-07-13T12:54:38.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52nth780019e0mw6q37np0x","content":"<p><img src=\"https://mdn.mozillademos.org/files/8633/promises.png\" alt=\"promise\"><br>Promise 对象用于一个异步操作的最终完成（或失败）及其结果值的表示。(简单点说就是处理异步请求。。我们经常会做些承诺，如果我赢了你就嫁给我，如果输了我就嫁给你之类的诺言。这就是promise的中文含义。一个诺言，一个成功，一个失败。)</p>\n<p>new Promise(<br>    /<em> executor </em>/<br>    function(resolve, reject) {…}<br>);</p>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><h3 id=\"executor-resolve-reject\"><a href=\"#executor-resolve-reject\" class=\"headerlink\" title=\"executor(resolve, reject)\"></a>executor(resolve, reject)</h3><p>该函数会马上被调用，它带有两个参数的函数对象：<br>    executor是一个带有resolve和reject两个参数的函数 。executor 函数在Promise构造函数执行时同步执行，被传递resolve和reject函数（executor 函数在Promise构造函数返回新建对象前被调用）。resolve 和 reject 函数被调用时，分别将promise的状态改为fulfilled(完成)或rejected（失败）。executor 内部通常会执行一些异步操作，一旦完成，可以调用resolve函数来将promise状态改成fulfilled，或者在发生错误时将它的状态改为rejected</p>\n<h3 id=\"解决函数resolve\"><a href=\"#解决函数resolve\" class=\"headerlink\" title=\"解决函数resolve()\"></a>解决函数resolve()</h3><p>用特定值满足绑定的promise，或者把状态传递到一个已存在的promise。如果绑定的promise已经被解决（可能是一个值，也可能是一个rejection，或者是另一个promise），该方法不会做任何事。</p>\n<blockquote>\n<p>note: 用特定值满足绑定的promise，或者把状态传递到一个已存在的promise。如果绑定的promise已经被解决（可能是一个值，也可能是一个rejection，或者是另一个promise），该方法不会做任何事。</p>\n</blockquote>\n<hr>\n<h3 id=\"拒绝函数reject\"><a href=\"#拒绝函数reject\" class=\"headerlink\" title=\"拒绝函数reject()\"></a>拒绝函数reject()</h3><p>用特定原因拒绝绑定的promise。如果promise已经被解决了，不管是值，拒绝，还是另一个promise，这个方法都不会做任何事。</p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p><strong>Promise</strong> 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers ）。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象</p>\n<p>一个 Promise有以下几种状态:</p>\n<ul>\n<li>未完成状态(pending), 此时完成值还不可用，他是唯一一个能够转换为其他状态的状态。</li>\n<li>已完成状态(fulfilled), 此时完成值可用，完成值与promise永久绑定，可为任意值，包括undefined</li>\n<li>拒绝状态(rejected), 出现错误时，拒绝理由与promise永久绑定，可为任意值，包括undefined，一般情况下为Error对象</li>\n</ul>\n<p>pending 状态的 Promise 对象可能触发fulfilled 状态并传递一个值给相应的状态处理方法，也可能触发失败状态（rejected）并传递失败信息。当其中任一种情况出现时，Promise 对象的 then 方法绑定的处理方法（handlers ）就会被调用（then方法包含两个参数：onfulfilled 和 onrejected，它们都是 Function 类型。当Promise状态为fulfilled时，调用 then 的 onfulfilled 方法，当Promise状态为rejected时，调用 then 的 onrejected 方法， 所以在异步操作的完成和绑定处理方法之间不存在竞争）。</p>\n<p>因为 Promise.prototype.then 和 Promise.prototype.catch 方法返回promise 对象， 所以它们可以被链式调用。</p>\n<p>##构造函数<br>创建一个新的promise，初始化为等待状态，并提供解决函数的引用，用于改变其状态。<br>new Promise(executor);</p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"Promise-all-iterable\"><a href=\"#Promise-all-iterable\" class=\"headerlink\" title=\"Promise.all(iterable)\"></a>Promise.all(iterable)</h3><p>  这个方法返回一个新的promise对象，该promise对象在iterable参数对象里所有的promise对象都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise对象的失败。这个新的promise对象在触发成功状态以后，会把一个包含iterable里所有promise返回值的数组作为成功回调的返回值，顺序跟iterable的顺序保持一致；如果这个新的promise对象触发了失败状态，它会把iterable里第一个触发失败的promise对象的错误信息作为它的失败错误信息。Promise.all方法常被用于处理多个promise对象的状态集合。（可以参考jQuery.when方法—译者注）<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"number\">1337</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> p3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">  setTimeout(resolve, <span class=\"number\">100</span>, <span class=\"string\">\"foo\"</span>);</div><div class=\"line\">&#125;); </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Promise</span>.all([p1, p2, p3]).then(<span class=\"function\"><span class=\"params\">values</span> =&gt;</span> &#123; </div><div class=\"line\">  <span class=\"built_in\">console</span>.log(values); <span class=\"comment\">// [3, 1337, \"foo\"] </span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"Promise-race-iterable\"><a href=\"#Promise-race-iterable\" class=\"headerlink\" title=\"Promise.race(iterable)\"></a>Promise.race(iterable)</h3><p>  当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">ar p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123; </div><div class=\"line\">    setTimeout(resolve, <span class=\"number\">500</span>, <span class=\"string\">\"one\"</span>); </div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123; </div><div class=\"line\">    setTimeout(resolve, <span class=\"number\">100</span>, <span class=\"string\">\"two\"</span>); </div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Promise</span>.race([p1, p2]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(value); <span class=\"comment\">// \"two\"</span></div><div class=\"line\">  <span class=\"comment\">// 两个都完成，但 p2 更快</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123; </div><div class=\"line\">    setTimeout(resolve, <span class=\"number\">100</span>, <span class=\"string\">\"three\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> p4 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123; </div><div class=\"line\">    setTimeout(reject, <span class=\"number\">500</span>, <span class=\"string\">\"four\"</span>); </div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Promise</span>.race([p3, p4]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(value); <span class=\"comment\">// \"three\"</span></div><div class=\"line\">  <span class=\"comment\">// p3 更快，所以它完成了              </span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 未被调用</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"Promise-reject-reason\"><a href=\"#Promise-reject-reason\" class=\"headerlink\" title=\"Promise.reject(reason)\"></a>Promise.reject(reason)</h3><p>  返回一个状态为失败的Promise对象，并将给定的失败信息传递给对应的处理方法<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.reject(<span class=\"string\">\"Testing static reject\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 未被调用</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(reason); <span class=\"comment\">// \"测试静态拒绝\"</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Promise</span>.reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"fail\"</span>)).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 未被调用</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(error); <span class=\"comment\">// 堆栈跟踪</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"Promise-resolve-value\"><a href=\"#Promise-resolve-value\" class=\"headerlink\" title=\"Promise.resolve(value)\"></a>Promise.resolve(value)</h3><p>  返回一个状态由给定value决定的Promise对象。如果该值是一个Promise对象，则直接返回该对象；如果该值是thenable(即，带有then方法的对象)，返回的Promise对象的最终状态由then方法执行决定；否则的话(该value为空，基本类型或者不带then方法的对象),返回的Promise对象状态为fulfilled，并且将该value传递给对应的then方法。通常而言，如果你不知道一个值是否是Promise对象，使用Promise.resolve(value) 来返回一个Promise对象,这样就能将该value以Promise对象形式使用。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Resolve另一个promise对象</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> original = <span class=\"built_in\">Promise</span>.resolve(<span class=\"literal\">true</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> cast = <span class=\"built_in\">Promise</span>.resolve(original);</div><div class=\"line\">cast.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(v); <span class=\"comment\">// true</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// resolve thenable的对象们并抛出错误</span></div><div class=\"line\"><span class=\"comment\">// Resolve一个thenable对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"built_in\">Promise</span>.resolve(&#123; </div><div class=\"line\">  <span class=\"attr\">then</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, onReject</span>) </span>&#123; resolve(<span class=\"string\">\"resolve!\"</span>); &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p1 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) <span class=\"comment\">// true, 这是一个Promise对象</span></div><div class=\"line\"></div><div class=\"line\">p1.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(v); <span class=\"comment\">// 输出\"resolve!\"</span></div><div class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 不会被调用</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Thenable在callback之前抛出异常</span></div><div class=\"line\"><span class=\"comment\">// Promise rejects</span></div><div class=\"line\"><span class=\"keyword\">var</span> thenable = &#123; <span class=\"attr\">then</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"Throwing\"</span>);</div><div class=\"line\">  resolve(<span class=\"string\">\"Resolving\"</span>);</div><div class=\"line\">&#125;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"built_in\">Promise</span>.resolve(thenable);</div><div class=\"line\">p2.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 不会被调用</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(e); <span class=\"comment\">// TypeError: Throwing</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Thenable在callback之后抛出异常</span></div><div class=\"line\"><span class=\"comment\">// Promise resolves</span></div><div class=\"line\"><span class=\"keyword\">var</span> thenable = &#123; <span class=\"attr\">then</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</div><div class=\"line\">  resolve(<span class=\"string\">\"Resolving\"</span>);</div><div class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"Throwing\"</span>);</div><div class=\"line\">&#125;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p3 = <span class=\"built_in\">Promise</span>.resolve(thenable);</div><div class=\"line\">p3.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(v); <span class=\"comment\">// 输出\"Resolving\"</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 不会被调用</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"Promise-原型\"><a href=\"#Promise-原型\" class=\"headerlink\" title=\"Promise 原型\"></a>Promise 原型</h2><h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ul>\n<li><p>Promise.prototype.constructor</p>\n<p>返回创建了实例原型的函数.  默认为 Promise 函数.</p>\n<h3 id=\"方法-1\"><a href=\"#方法-1\" class=\"headerlink\" title=\"方法\"></a>方法</h3><ul>\n<li>Promise.prototype.catch(onRejected)</li>\n</ul>\n<p>添 p2 = Promise.resolve(thenable);<br>p2.then(function(v) {<br>// 不会被调用<br>}, function(e) {<br>console.log(e); // TypeError: Throwing<br>});</p>\n</li>\n</ul>\n<p>// Thenable在callback之后抛出异常<br>// Promise resolves<br>var thenable = { then: function(resolve) {<br>  resolve(“Resolving”);<br>  throw new TypeError(“Throwing”);<br>}};</p>\n<p>var p3 = Promise.resolve(thenable);<br>p3.then(function(v) {<br>  console.log(v); // 输出”Resolving”<br>}, function(e) {<br>  // 不会被调用<br>});<br><figure class=\"highlight plain\"><figcaption><span>回调到当前 promise, 返回一个新的promise。如果这个回调被调用，新 promise 将以它的返回值来resolve，否则如果当前promise 进入fulfilled状态，则以当前promise的肯定结果作为新promise的肯定结果.</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- Promise.prototype.then(onFulfilled, onRejected)</div><div class=\"line\"></div><div class=\"line\">添加肯定和否定回调到当前 promise, 返回一个新的 promise, 将以回调的返回值 来resolve.</div><div class=\"line\"></div><div class=\"line\">## 示例</div><div class=\"line\">```js</div><div class=\"line\">var myFirstPromise = new Promise(function(resolve, reject)&#123;</div><div class=\"line\">    //当异步代码执行成功时，我们才会调用resolve(...), 当异步代码失败时就会调用reject(...)</div><div class=\"line\">    //在本例中，我们使用setTimeout(...)来模拟异步代码，实际编码时可能是XHR请求或是HTML5的一些API方法.</div><div class=\"line\">    setTimeout(function()&#123;</div><div class=\"line\">        resolve(&quot;成功!&quot;); //代码正常执行！</div><div class=\"line\">    &#125;, 250);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">myFirstPromise.then(function(successMessage)&#123;</div><div class=\"line\">    //successMessage的值是上面调用resolve(...)方法传入的值.</div><div class=\"line\">    //successMessage参数不一定非要是字符串类型，这里只是举个例子</div><div class=\"line\">    console.log(&quot;Yay! &quot; + successMessage);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"external\">mdn</a></li>\n<li><a href=\"http://javascript.ruanyifeng.com/\" target=\"_blank\" rel=\"external\">JavaScript 标准参考教程</a></li>\n<li>[JavaScript Promise](<a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/promises?hl=zh-cn\" target=\"_blank\" rel=\"external\">https://developers.google.com/web/fundamentals/getting-started/primers/promises?hl=zh-cn</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://mdn.mozillademos.org/files/8633/promises.png\" alt=\"promise\"><br>Promise 对象用于一个异步操作的最终完成（或失败）及其结果值的表示。(简单点说就是处理异步请求。。我们经常会做些承诺，如果我赢了你就嫁给我，如果输了我就嫁给你之类的诺言。这就是promise的中文含义。一个诺言，一个成功，一个失败。)</p>\n<p>new Promise(<br>    /<em> executor </em>/<br>    function(resolve, reject) {…}<br>);</p>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><h3 id=\"executor-resolve-reject\"><a href=\"#executor-resolve-reject\" class=\"headerlink\" title=\"executor(resolve, reject)\"></a>executor(resolve, reject)</h3><p>该函数会马上被调用，它带有两个参数的函数对象：<br>    executor是一个带有resolve和reject两个参数的函数 。executor 函数在Promise构造函数执行时同步执行，被传递resolve和reject函数（executor 函数在Promise构造函数返回新建对象前被调用）。resolve 和 reject 函数被调用时，分别将promise的状态改为fulfilled(完成)或rejected（失败）。executor 内部通常会执行一些异步操作，一旦完成，可以调用resolve函数来将promise状态改成fulfilled，或者在发生错误时将它的状态改为rejected</p>\n<h3 id=\"解决函数resolve\"><a href=\"#解决函数resolve\" class=\"headerlink\" title=\"解决函数resolve()\"></a>解决函数resolve()</h3><p>用特定值满足绑定的promise，或者把状态传递到一个已存在的promise。如果绑定的promise已经被解决（可能是一个值，也可能是一个rejection，或者是另一个promise），该方法不会做任何事。</p>\n<blockquote>\n<p>note: 用特定值满足绑定的promise，或者把状态传递到一个已存在的promise。如果绑定的promise已经被解决（可能是一个值，也可能是一个rejection，或者是另一个promise），该方法不会做任何事。</p>\n</blockquote>\n<hr>\n<h3 id=\"拒绝函数reject\"><a href=\"#拒绝函数reject\" class=\"headerlink\" title=\"拒绝函数reject()\"></a>拒绝函数reject()</h3><p>用特定原因拒绝绑定的promise。如果promise已经被解决了，不管是值，拒绝，还是另一个promise，这个方法都不会做任何事。</p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p><strong>Promise</strong> 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers ）。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象</p>\n<p>一个 Promise有以下几种状态:</p>\n<ul>\n<li>未完成状态(pending), 此时完成值还不可用，他是唯一一个能够转换为其他状态的状态。</li>\n<li>已完成状态(fulfilled), 此时完成值可用，完成值与promise永久绑定，可为任意值，包括undefined</li>\n<li>拒绝状态(rejected), 出现错误时，拒绝理由与promise永久绑定，可为任意值，包括undefined，一般情况下为Error对象</li>\n</ul>\n<p>pending 状态的 Promise 对象可能触发fulfilled 状态并传递一个值给相应的状态处理方法，也可能触发失败状态（rejected）并传递失败信息。当其中任一种情况出现时，Promise 对象的 then 方法绑定的处理方法（handlers ）就会被调用（then方法包含两个参数：onfulfilled 和 onrejected，它们都是 Function 类型。当Promise状态为fulfilled时，调用 then 的 onfulfilled 方法，当Promise状态为rejected时，调用 then 的 onrejected 方法， 所以在异步操作的完成和绑定处理方法之间不存在竞争）。</p>\n<p>因为 Promise.prototype.then 和 Promise.prototype.catch 方法返回promise 对象， 所以它们可以被链式调用。</p>\n<p>##构造函数<br>创建一个新的promise，初始化为等待状态，并提供解决函数的引用，用于改变其状态。<br>new Promise(executor);</p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"Promise-all-iterable\"><a href=\"#Promise-all-iterable\" class=\"headerlink\" title=\"Promise.all(iterable)\"></a>Promise.all(iterable)</h3><p>  这个方法返回一个新的promise对象，该promise对象在iterable参数对象里所有的promise对象都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise对象的失败。这个新的promise对象在触发成功状态以后，会把一个包含iterable里所有promise返回值的数组作为成功回调的返回值，顺序跟iterable的顺序保持一致；如果这个新的promise对象触发了失败状态，它会把iterable里第一个触发失败的promise对象的错误信息作为它的失败错误信息。Promise.all方法常被用于处理多个promise对象的状态集合。（可以参考jQuery.when方法—译者注）<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"number\">1337</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> p3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">  setTimeout(resolve, <span class=\"number\">100</span>, <span class=\"string\">\"foo\"</span>);</div><div class=\"line\">&#125;); </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Promise</span>.all([p1, p2, p3]).then(<span class=\"function\"><span class=\"params\">values</span> =&gt;</span> &#123; </div><div class=\"line\">  <span class=\"built_in\">console</span>.log(values); <span class=\"comment\">// [3, 1337, \"foo\"] </span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"Promise-race-iterable\"><a href=\"#Promise-race-iterable\" class=\"headerlink\" title=\"Promise.race(iterable)\"></a>Promise.race(iterable)</h3><p>  当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">ar p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123; </div><div class=\"line\">    setTimeout(resolve, <span class=\"number\">500</span>, <span class=\"string\">\"one\"</span>); </div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123; </div><div class=\"line\">    setTimeout(resolve, <span class=\"number\">100</span>, <span class=\"string\">\"two\"</span>); </div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Promise</span>.race([p1, p2]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(value); <span class=\"comment\">// \"two\"</span></div><div class=\"line\">  <span class=\"comment\">// 两个都完成，但 p2 更快</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123; </div><div class=\"line\">    setTimeout(resolve, <span class=\"number\">100</span>, <span class=\"string\">\"three\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> p4 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123; </div><div class=\"line\">    setTimeout(reject, <span class=\"number\">500</span>, <span class=\"string\">\"four\"</span>); </div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Promise</span>.race([p3, p4]).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(value); <span class=\"comment\">// \"three\"</span></div><div class=\"line\">  <span class=\"comment\">// p3 更快，所以它完成了              </span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 未被调用</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"Promise-reject-reason\"><a href=\"#Promise-reject-reason\" class=\"headerlink\" title=\"Promise.reject(reason)\"></a>Promise.reject(reason)</h3><p>  返回一个状态为失败的Promise对象，并将给定的失败信息传递给对应的处理方法<br>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.reject(<span class=\"string\">\"Testing static reject\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 未被调用</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(reason); <span class=\"comment\">// \"测试静态拒绝\"</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Promise</span>.reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"fail\"</span>)).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 未被调用</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(error); <span class=\"comment\">// 堆栈跟踪</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"Promise-resolve-value\"><a href=\"#Promise-resolve-value\" class=\"headerlink\" title=\"Promise.resolve(value)\"></a>Promise.resolve(value)</h3><p>  返回一个状态由给定value决定的Promise对象。如果该值是一个Promise对象，则直接返回该对象；如果该值是thenable(即，带有then方法的对象)，返回的Promise对象的最终状态由then方法执行决定；否则的话(该value为空，基本类型或者不带then方法的对象),返回的Promise对象状态为fulfilled，并且将该value传递给对应的then方法。通常而言，如果你不知道一个值是否是Promise对象，使用Promise.resolve(value) 来返回一个Promise对象,这样就能将该value以Promise对象形式使用。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Resolve另一个promise对象</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> original = <span class=\"built_in\">Promise</span>.resolve(<span class=\"literal\">true</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> cast = <span class=\"built_in\">Promise</span>.resolve(original);</div><div class=\"line\">cast.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(v); <span class=\"comment\">// true</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// resolve thenable的对象们并抛出错误</span></div><div class=\"line\"><span class=\"comment\">// Resolve一个thenable对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"built_in\">Promise</span>.resolve(&#123; </div><div class=\"line\">  <span class=\"attr\">then</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, onReject</span>) </span>&#123; resolve(<span class=\"string\">\"resolve!\"</span>); &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(p1 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) <span class=\"comment\">// true, 这是一个Promise对象</span></div><div class=\"line\"></div><div class=\"line\">p1.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(v); <span class=\"comment\">// 输出\"resolve!\"</span></div><div class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 不会被调用</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Thenable在callback之前抛出异常</span></div><div class=\"line\"><span class=\"comment\">// Promise rejects</span></div><div class=\"line\"><span class=\"keyword\">var</span> thenable = &#123; <span class=\"attr\">then</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"Throwing\"</span>);</div><div class=\"line\">  resolve(<span class=\"string\">\"Resolving\"</span>);</div><div class=\"line\">&#125;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"built_in\">Promise</span>.resolve(thenable);</div><div class=\"line\">p2.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 不会被调用</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(e); <span class=\"comment\">// TypeError: Throwing</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Thenable在callback之后抛出异常</span></div><div class=\"line\"><span class=\"comment\">// Promise resolves</span></div><div class=\"line\"><span class=\"keyword\">var</span> thenable = &#123; <span class=\"attr\">then</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) </span>&#123;</div><div class=\"line\">  resolve(<span class=\"string\">\"Resolving\"</span>);</div><div class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"Throwing\"</span>);</div><div class=\"line\">&#125;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p3 = <span class=\"built_in\">Promise</span>.resolve(thenable);</div><div class=\"line\">p3.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(v); <span class=\"comment\">// 输出\"Resolving\"</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 不会被调用</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"Promise-原型\"><a href=\"#Promise-原型\" class=\"headerlink\" title=\"Promise 原型\"></a>Promise 原型</h2><h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ul>\n<li><p>Promise.prototype.constructor</p>\n<p>返回创建了实例原型的函数.  默认为 Promise 函数.</p>\n<h3 id=\"方法-1\"><a href=\"#方法-1\" class=\"headerlink\" title=\"方法\"></a>方法</h3><ul>\n<li>Promise.prototype.catch(onRejected)</li>\n</ul>\n<p>添 p2 = Promise.resolve(thenable);<br>p2.then(function(v) {<br>// 不会被调用<br>}, function(e) {<br>console.log(e); // TypeError: Throwing<br>});</p>\n</li>\n</ul>\n<p>// Thenable在callback之后抛出异常<br>// Promise resolves<br>var thenable = { then: function(resolve) {<br>  resolve(“Resolving”);<br>  throw new TypeError(“Throwing”);<br>}};</p>\n<p>var p3 = Promise.resolve(thenable);<br>p3.then(function(v) {<br>  console.log(v); // 输出”Resolving”<br>}, function(e) {<br>  // 不会被调用<br>});<br><figure class=\"highlight plain\"><figcaption><span>回调到当前 promise, 返回一个新的promise。如果这个回调被调用，新 promise 将以它的返回值来resolve，否则如果当前promise 进入fulfilled状态，则以当前promise的肯定结果作为新promise的肯定结果.</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- Promise.prototype.then(onFulfilled, onRejected)</div><div class=\"line\"></div><div class=\"line\">添加肯定和否定回调到当前 promise, 返回一个新的 promise, 将以回调的返回值 来resolve.</div><div class=\"line\"></div><div class=\"line\">## 示例</div><div class=\"line\">```js</div><div class=\"line\">var myFirstPromise = new Promise(function(resolve, reject)&#123;</div><div class=\"line\">    //当异步代码执行成功时，我们才会调用resolve(...), 当异步代码失败时就会调用reject(...)</div><div class=\"line\">    //在本例中，我们使用setTimeout(...)来模拟异步代码，实际编码时可能是XHR请求或是HTML5的一些API方法.</div><div class=\"line\">    setTimeout(function()&#123;</div><div class=\"line\">        resolve(&quot;成功!&quot;); //代码正常执行！</div><div class=\"line\">    &#125;, 250);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">myFirstPromise.then(function(successMessage)&#123;</div><div class=\"line\">    //successMessage的值是上面调用resolve(...)方法传入的值.</div><div class=\"line\">    //successMessage参数不一定非要是字符串类型，这里只是举个例子</div><div class=\"line\">    console.log(&quot;Yay! &quot; + successMessage);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"external\">mdn</a></li>\n<li><a href=\"http://javascript.ruanyifeng.com/\" target=\"_blank\" rel=\"external\">JavaScript 标准参考教程</a></li>\n<li>[JavaScript Promise](<a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/promises?hl=zh-cn\" target=\"_blank\" rel=\"external\">https://developers.google.com/web/fundamentals/getting-started/primers/promises?hl=zh-cn</a></li>\n</ul>\n"},{"title":"单例模式(Singleton)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 单例模式的定义\n- 某个类只能有一个实例；\n- 它必须自行创建这个实例；\n- 它必须自行向整个系统提供这个实例。\n\n### 单例模式的实现过程中，需要注意如下三点：\n- 单例类的构造函数为私有；\n- 提供一个自身的静态私有成员变量；\n- 提供一个公有的静态工厂方法。\n\n---\n\n### ES6实现\n``` js\nclass Singleton {\n    constructor(data) {\n        if (Singleton.prototype.Instance === undefined) {\n            this.data = data;\n            Singleton.prototype.Instance = this;\n        }\n        return Singleton.prototype.Instance;\n    }\n}\n\nlet ob1 = new Singleton.getInstance();\nlet ob2 = new Singleton(\"two\");\n\nconsole.log(ob1 === ob2);\n```\n---\n\n### Typescript实现\n``` ts\nclass Singleton {\n  private static instance: Singleton;\n\n  constructor() {}\n\n  static get Instance() {\n      if (this.instance === null || this.instance === undefined) {\n          this.instance = new Singleton();\n      }\n      return this.instance;\n  }\n}\nlet ob1 = new Singleton(\"one\");\nlet ob2 = new Singleton(\"two\");\n\nconsole.log(ob1 === ob2);\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Singleton.md","raw":"---\ntitle: 单例模式(Singleton)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Creational Patterns]\ntags: [javasctipt, 单例模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 单例模式的定义\n- 某个类只能有一个实例；\n- 它必须自行创建这个实例；\n- 它必须自行向整个系统提供这个实例。\n\n### 单例模式的实现过程中，需要注意如下三点：\n- 单例类的构造函数为私有；\n- 提供一个自身的静态私有成员变量；\n- 提供一个公有的静态工厂方法。\n\n---\n\n### ES6实现\n``` js\nclass Singleton {\n    constructor(data) {\n        if (Singleton.prototype.Instance === undefined) {\n            this.data = data;\n            Singleton.prototype.Instance = this;\n        }\n        return Singleton.prototype.Instance;\n    }\n}\n\nlet ob1 = new Singleton.getInstance();\nlet ob2 = new Singleton(\"two\");\n\nconsole.log(ob1 === ob2);\n```\n---\n\n### Typescript实现\n``` ts\nclass Singleton {\n  private static instance: Singleton;\n\n  constructor() {}\n\n  static get Instance() {\n      if (this.instance === null || this.instance === undefined) {\n          this.instance = new Singleton();\n      }\n      return this.instance;\n  }\n}\nlet ob1 = new Singleton(\"one\");\nlet ob2 = new Singleton(\"two\");\n\nconsole.log(ob1 === ob2);\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Singleton","published":1,"updated":"2017-07-08T08:04:09.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52nth7b001ee0mwn7mcwr9a","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"单例模式的定义\"><a href=\"#单例模式的定义\" class=\"headerlink\" title=\"单例模式的定义\"></a>单例模式的定义</h3><ul>\n<li>某个类只能有一个实例；</li>\n<li>它必须自行创建这个实例；</li>\n<li>它必须自行向整个系统提供这个实例。</li>\n</ul>\n<h3 id=\"单例模式的实现过程中，需要注意如下三点：\"><a href=\"#单例模式的实现过程中，需要注意如下三点：\" class=\"headerlink\" title=\"单例模式的实现过程中，需要注意如下三点：\"></a>单例模式的实现过程中，需要注意如下三点：</h3><ul>\n<li>单例类的构造函数为私有；</li>\n<li>提供一个自身的静态私有成员变量；</li>\n<li>提供一个公有的静态工厂方法。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(data) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Singleton.prototype.Instance === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.data = data;</div><div class=\"line\">            Singleton.prototype.Instance = <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> Singleton.prototype.Instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> ob1 = <span class=\"keyword\">new</span> Singleton.getInstance();</div><div class=\"line\"><span class=\"keyword\">let</span> ob2 = <span class=\"keyword\">new</span> Singleton(<span class=\"string\">\"two\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(ob1 === ob2);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Singleton &#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> instance: Singleton;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">get</span> Instance() &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.instance === <span class=\"literal\">null</span> || <span class=\"keyword\">this</span>.instance === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">this</span>.instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.instance;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> ob1 = <span class=\"keyword\">new</span> Singleton(<span class=\"string\">\"one\"</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> ob2 = <span class=\"keyword\">new</span> Singleton(<span class=\"string\">\"two\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(ob1 === ob2);</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><p><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></p>\n</li>\n<li><p><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></p>\n</li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"单例模式的定义\"><a href=\"#单例模式的定义\" class=\"headerlink\" title=\"单例模式的定义\"></a>单例模式的定义</h3><ul>\n<li>某个类只能有一个实例；</li>\n<li>它必须自行创建这个实例；</li>\n<li>它必须自行向整个系统提供这个实例。</li>\n</ul>\n<h3 id=\"单例模式的实现过程中，需要注意如下三点：\"><a href=\"#单例模式的实现过程中，需要注意如下三点：\" class=\"headerlink\" title=\"单例模式的实现过程中，需要注意如下三点：\"></a>单例模式的实现过程中，需要注意如下三点：</h3><ul>\n<li>单例类的构造函数为私有；</li>\n<li>提供一个自身的静态私有成员变量；</li>\n<li>提供一个公有的静态工厂方法。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(data) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Singleton.prototype.Instance === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.data = data;</div><div class=\"line\">            Singleton.prototype.Instance = <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> Singleton.prototype.Instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> ob1 = <span class=\"keyword\">new</span> Singleton.getInstance();</div><div class=\"line\"><span class=\"keyword\">let</span> ob2 = <span class=\"keyword\">new</span> Singleton(<span class=\"string\">\"two\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(ob1 === ob2);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Singleton &#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> instance: Singleton;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">get</span> Instance() &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.instance === <span class=\"literal\">null</span> || <span class=\"keyword\">this</span>.instance === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">this</span>.instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.instance;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> ob1 = <span class=\"keyword\">new</span> Singleton(<span class=\"string\">\"one\"</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> ob2 = <span class=\"keyword\">new</span> Singleton(<span class=\"string\">\"two\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(ob1 === ob2);</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><p><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></p>\n</li>\n<li><p><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></p>\n</li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"简单工厂模式(Factory)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 简单工厂模式的定义\n- 简单工厂模式：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。\n\n### 简单工厂模式包含三个角色：\n- Factory-工厂角色负责实现创建所有实例的内部逻辑；\n- Product-抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口；\n- ConcreteProduct-具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。\n\n---\n\n### ES6实现\n``` js\nclass Product {\n    constructor() {\n        console.log('Product Class created');\n    }\n}\n\nclass ConcreteProduct extends Product {\n    constructor() {\n        super();\n        console.log('ConcreteProduct Class created');\n    }\n}\n\nclass Creator {\n    constructor() {\n        console.log('Creator Class created');\n    }\n\n    factoryMethod() {\n        console.log('Creator.factoryMethod created');\n    }\n\n    anOperation() {\n        console.log('Creator.anOperation created');\n        this.product = this.factoryMethod();\n        console.log(this.product instanceof ConcreteProduct);\n    }\n}\n\nclass ConcreteCreator extends Creator {\n\n    constructor() {\n        super();\n        console.log('ConcreteCreator Class created');\n    }\n\n    factoryMethod() {\n        return new ConcreteProduct();\n    }\n}\n\nvar factory = new ConcreteCreator();\nfactory.anOperation();\n```\n---\n\n### Typescript实现\n``` ts\ninterface AbstractProduct {\n    method(param?: any) : void;\n}\n\nclass ConcreteProductA implements AbstractProduct {\n    method = (param?: any) => {\n        return \"Method of ConcreteProductA\";\n    }\n}\n\nclass ConcreteProductB implements AbstractProduct {\n    method = (param?: any) => {\n        return \"Method of ConcreteProductB\";\n    }\n}\n\nclass ProductFactory {\n    public static createProduct(type: string) : AbstractProduct {\n        if (type === \"A\") {\n            return new ConcreteProductA();\n        } else if (type === \"B\") {\n            return new ConcreteProductB();\n        }\n\n        return null;\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/SimpleFactory.md","raw":"---\ntitle: 简单工厂模式(Factory)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Creational Patterns]\ntags: [javasctipt, 简单工厂模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 简单工厂模式的定义\n- 简单工厂模式：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。\n\n### 简单工厂模式包含三个角色：\n- Factory-工厂角色负责实现创建所有实例的内部逻辑；\n- Product-抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口；\n- ConcreteProduct-具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。\n\n---\n\n### ES6实现\n``` js\nclass Product {\n    constructor() {\n        console.log('Product Class created');\n    }\n}\n\nclass ConcreteProduct extends Product {\n    constructor() {\n        super();\n        console.log('ConcreteProduct Class created');\n    }\n}\n\nclass Creator {\n    constructor() {\n        console.log('Creator Class created');\n    }\n\n    factoryMethod() {\n        console.log('Creator.factoryMethod created');\n    }\n\n    anOperation() {\n        console.log('Creator.anOperation created');\n        this.product = this.factoryMethod();\n        console.log(this.product instanceof ConcreteProduct);\n    }\n}\n\nclass ConcreteCreator extends Creator {\n\n    constructor() {\n        super();\n        console.log('ConcreteCreator Class created');\n    }\n\n    factoryMethod() {\n        return new ConcreteProduct();\n    }\n}\n\nvar factory = new ConcreteCreator();\nfactory.anOperation();\n```\n---\n\n### Typescript实现\n``` ts\ninterface AbstractProduct {\n    method(param?: any) : void;\n}\n\nclass ConcreteProductA implements AbstractProduct {\n    method = (param?: any) => {\n        return \"Method of ConcreteProductA\";\n    }\n}\n\nclass ConcreteProductB implements AbstractProduct {\n    method = (param?: any) => {\n        return \"Method of ConcreteProductB\";\n    }\n}\n\nclass ProductFactory {\n    public static createProduct(type: string) : AbstractProduct {\n        if (type === \"A\") {\n            return new ConcreteProductA();\n        } else if (type === \"B\") {\n            return new ConcreteProductB();\n        }\n\n        return null;\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"SimpleFactory","published":1,"updated":"2017-07-08T08:04:09.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52nth7c001he0mwbbpblhju","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"简单工厂模式的定义\"><a href=\"#简单工厂模式的定义\" class=\"headerlink\" title=\"简单工厂模式的定义\"></a>简单工厂模式的定义</h3><ul>\n<li>简单工厂模式：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。</li>\n</ul>\n<h3 id=\"简单工厂模式包含三个角色：\"><a href=\"#简单工厂模式包含三个角色：\" class=\"headerlink\" title=\"简单工厂模式包含三个角色：\"></a>简单工厂模式包含三个角色：</h3><ul>\n<li>Factory-工厂角色负责实现创建所有实例的内部逻辑；</li>\n<li>Product-抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口；</li>\n<li>ConcreteProduct-具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Product Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteProduct</span> <span class=\"keyword\">extends</span> <span class=\"title\">Product</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteProduct Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Creator Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    factoryMethod() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Creator.factoryMethod created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    anOperation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Creator.anOperation created'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.product = <span class=\"keyword\">this</span>.factoryMethod();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.product <span class=\"keyword\">instanceof</span> ConcreteProduct);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteCreator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Creator</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteCreator Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    factoryMethod() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteProduct();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConcreteCreator();</div><div class=\"line\">factory.anOperation();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> AbstractProduct &#123;</div><div class=\"line\">    method(param?: <span class=\"built_in\">any</span>) : <span class=\"built_in\">void</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> ConcreteProductA <span class=\"keyword\">implements</span> AbstractProduct &#123;</div><div class=\"line\">    method = <span class=\"function\">(<span class=\"params\">param?: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Method of ConcreteProductA\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> ConcreteProductB <span class=\"keyword\">implements</span> AbstractProduct &#123;</div><div class=\"line\">    method = <span class=\"function\">(<span class=\"params\">param?: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Method of ConcreteProductB\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> ProductFactory &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> createProduct(<span class=\"keyword\">type</span>: <span class=\"built_in\">string</span>) : AbstractProduct &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">type</span> === <span class=\"string\">\"A\"</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteProductA();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">type</span> === <span class=\"string\">\"B\"</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteProductB();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><p><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></p>\n</li>\n<li><p><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></p>\n</li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"简单工厂模式的定义\"><a href=\"#简单工厂模式的定义\" class=\"headerlink\" title=\"简单工厂模式的定义\"></a>简单工厂模式的定义</h3><ul>\n<li>简单工厂模式：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。</li>\n</ul>\n<h3 id=\"简单工厂模式包含三个角色：\"><a href=\"#简单工厂模式包含三个角色：\" class=\"headerlink\" title=\"简单工厂模式包含三个角色：\"></a>简单工厂模式包含三个角色：</h3><ul>\n<li>Factory-工厂角色负责实现创建所有实例的内部逻辑；</li>\n<li>Product-抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口；</li>\n<li>ConcreteProduct-具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Product Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteProduct</span> <span class=\"keyword\">extends</span> <span class=\"title\">Product</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteProduct Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Creator Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    factoryMethod() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Creator.factoryMethod created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    anOperation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Creator.anOperation created'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.product = <span class=\"keyword\">this</span>.factoryMethod();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.product <span class=\"keyword\">instanceof</span> ConcreteProduct);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteCreator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Creator</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteCreator Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    factoryMethod() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteProduct();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConcreteCreator();</div><div class=\"line\">factory.anOperation();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> AbstractProduct &#123;</div><div class=\"line\">    method(param?: <span class=\"built_in\">any</span>) : <span class=\"built_in\">void</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> ConcreteProductA <span class=\"keyword\">implements</span> AbstractProduct &#123;</div><div class=\"line\">    method = <span class=\"function\">(<span class=\"params\">param?: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Method of ConcreteProductA\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> ConcreteProductB <span class=\"keyword\">implements</span> AbstractProduct &#123;</div><div class=\"line\">    method = <span class=\"function\">(<span class=\"params\">param?: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Method of ConcreteProductB\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> ProductFactory &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> createProduct(<span class=\"keyword\">type</span>: <span class=\"built_in\">string</span>) : AbstractProduct &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">type</span> === <span class=\"string\">\"A\"</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteProductA();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">type</span> === <span class=\"string\">\"B\"</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteProductB();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><p><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></p>\n</li>\n<li><p><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></p>\n</li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"状态模式(State)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 状态模式的定义\n- 状态模式允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。\n- 其别名为状态对象，状态模式是一种对象行为型模式。\n\n### 状态模式包含二个角色：\n- Context-环境类又称为上下文类，它是拥有状态的对象，在环境类中维护一个抽象状态类State的实例，这个实例定义当前状态，在具体实现时，它是一个State子类的对象，可以定义初始状态；\n- State-抽象状态类用于定义一个接口以封装与环境类的一个特定状态相关的行为；\n- ConcreteState-具体状态类是抽象状态类的子类，每一个子类实现一个与环境类的一个状态相关的行为，每一个具体状态类对应环境的一个具体状态，不同的具体状态类其行为有所不同。\n---\n\n### ES6实现\n``` js\nclass Context {\n    constructor(state) {\n        console.log(\"Context Class created\");\n        switch (state) {\n            case \"A\":\n                this.state = new ConcreteStateA()\n                break\n            case \"B\":\n                this.state = new ConcreteStateB()\n                break\n            default:\n                this.state = new ConcreteStateA()\n        }\n    }\n\n    request() {\n        console.log('Context.request invoked');\n        this.state.handle(this);\n    }\n}\n\nclass State {\n    constructor() {\n        console.log(\"State Class created\");\n    }\n\n    handle() {\n        console.log('State.handle invoked');\n    }\n}\n\nclass ConcreteStateA extends State {\n    constructor() {\n        super();\n        console.log(\"ConcreteStateA Class created\");\n    }\n\n    handle(context) {\n        console.log('ConcreteStateA.handle invoked');\n    }\n}\n\nclass ConcreteStateB extends State {\n    constructor() {\n        super();\n        console.log(\"ConcreteStateB Class created\");\n    }\n\n    handle(context) {\n        console.log('ConcreteStateB.handle invoked');\n    }\n}\n\nlet context = new Context(\"A\")\ncontext.request()\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace StatePattern {\n  export interface State {\n      handle(context: Context): void;\n  }\n\n  export class ConcreteStateA implements State {\n      public handle(context: Context): void {\n          console.log(\"`handle` method of ConcreteStateA is being called!\");\n          context.State = new ConcreteStateB();\n      }\n  }\n\n  export class ConcreteStateB implements State {\n      public handle(context: Context): void {\n          console.log(\"`handle` method of ConcreteStateB is being called!\");\n          context.State = new ConcreteStateA();\n      }\n  }\n\n  export class Context {\n      private state: State;\n\n      constructor(state: State) {\n          this.state = state;\n      }\n\n      get State(): State {\n          return this.state;\n      }\n\n      set State(state: State) {\n          this.state = state;\n      }\n\n      public request(): void {\n          console.log(\"request is being called!\");\n          this.state.handle(this);\n      }\n    }\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/State.md","raw":"---\ntitle: 状态模式(State)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Behavioral Patterns]\ntags: [javasctipt, 状态模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 状态模式的定义\n- 状态模式允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。\n- 其别名为状态对象，状态模式是一种对象行为型模式。\n\n### 状态模式包含二个角色：\n- Context-环境类又称为上下文类，它是拥有状态的对象，在环境类中维护一个抽象状态类State的实例，这个实例定义当前状态，在具体实现时，它是一个State子类的对象，可以定义初始状态；\n- State-抽象状态类用于定义一个接口以封装与环境类的一个特定状态相关的行为；\n- ConcreteState-具体状态类是抽象状态类的子类，每一个子类实现一个与环境类的一个状态相关的行为，每一个具体状态类对应环境的一个具体状态，不同的具体状态类其行为有所不同。\n---\n\n### ES6实现\n``` js\nclass Context {\n    constructor(state) {\n        console.log(\"Context Class created\");\n        switch (state) {\n            case \"A\":\n                this.state = new ConcreteStateA()\n                break\n            case \"B\":\n                this.state = new ConcreteStateB()\n                break\n            default:\n                this.state = new ConcreteStateA()\n        }\n    }\n\n    request() {\n        console.log('Context.request invoked');\n        this.state.handle(this);\n    }\n}\n\nclass State {\n    constructor() {\n        console.log(\"State Class created\");\n    }\n\n    handle() {\n        console.log('State.handle invoked');\n    }\n}\n\nclass ConcreteStateA extends State {\n    constructor() {\n        super();\n        console.log(\"ConcreteStateA Class created\");\n    }\n\n    handle(context) {\n        console.log('ConcreteStateA.handle invoked');\n    }\n}\n\nclass ConcreteStateB extends State {\n    constructor() {\n        super();\n        console.log(\"ConcreteStateB Class created\");\n    }\n\n    handle(context) {\n        console.log('ConcreteStateB.handle invoked');\n    }\n}\n\nlet context = new Context(\"A\")\ncontext.request()\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace StatePattern {\n  export interface State {\n      handle(context: Context): void;\n  }\n\n  export class ConcreteStateA implements State {\n      public handle(context: Context): void {\n          console.log(\"`handle` method of ConcreteStateA is being called!\");\n          context.State = new ConcreteStateB();\n      }\n  }\n\n  export class ConcreteStateB implements State {\n      public handle(context: Context): void {\n          console.log(\"`handle` method of ConcreteStateB is being called!\");\n          context.State = new ConcreteStateA();\n      }\n  }\n\n  export class Context {\n      private state: State;\n\n      constructor(state: State) {\n          this.state = state;\n      }\n\n      get State(): State {\n          return this.state;\n      }\n\n      set State(state: State) {\n          this.state = state;\n      }\n\n      public request(): void {\n          console.log(\"request is being called!\");\n          this.state.handle(this);\n      }\n    }\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"State","published":1,"updated":"2017-07-08T08:04:09.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52nth7f001le0mwgididst2","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"状态模式的定义\"><a href=\"#状态模式的定义\" class=\"headerlink\" title=\"状态模式的定义\"></a>状态模式的定义</h3><ul>\n<li>状态模式允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。</li>\n<li>其别名为状态对象，状态模式是一种对象行为型模式。</li>\n</ul>\n<h3 id=\"状态模式包含二个角色：\"><a href=\"#状态模式包含二个角色：\" class=\"headerlink\" title=\"状态模式包含二个角色：\"></a>状态模式包含二个角色：</h3><ul>\n<li>Context-环境类又称为上下文类，它是拥有状态的对象，在环境类中维护一个抽象状态类State的实例，这个实例定义当前状态，在具体实现时，它是一个State子类的对象，可以定义初始状态；</li>\n<li>State-抽象状态类用于定义一个接口以封装与环境类的一个特定状态相关的行为；</li>\n<li>ConcreteState-具体状态类是抽象状态类的子类，每一个子类实现一个与环境类的一个状态相关的行为，每一个具体状态类对应环境的一个具体状态，不同的具体状态类其行为有所不同。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(state) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Context Class created\"</span>);</div><div class=\"line\">        <span class=\"keyword\">switch</span> (state) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"A\"</span>:</div><div class=\"line\">                <span class=\"keyword\">this</span>.state = <span class=\"keyword\">new</span> ConcreteStateA()</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"B\"</span>:</div><div class=\"line\">                <span class=\"keyword\">this</span>.state = <span class=\"keyword\">new</span> ConcreteStateB()</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">this</span>.state = <span class=\"keyword\">new</span> ConcreteStateA()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    request() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context.request invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.state.handle(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">State</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"State Class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    handle() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'State.handle invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStateA</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcreteStateA Class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    handle(context) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteStateA.handle invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStateB</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcreteStateB Class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    handle(context) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteStateB.handle invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> context = <span class=\"keyword\">new</span> Context(<span class=\"string\">\"A\"</span>)</div><div class=\"line\">context.request()</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> StatePattern &#123;</div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> State &#123;</div><div class=\"line\">      handle(context: Context): <span class=\"built_in\">void</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteStateA <span class=\"keyword\">implements</span> State &#123;</div><div class=\"line\">      <span class=\"keyword\">public</span> handle(context: Context): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`handle` method of ConcreteStateA is being called!\"</span>);</div><div class=\"line\">          context.State = <span class=\"keyword\">new</span> ConcreteStateB();</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteStateB <span class=\"keyword\">implements</span> State &#123;</div><div class=\"line\">      <span class=\"keyword\">public</span> handle(context: Context): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`handle` method of ConcreteStateB is being called!\"</span>);</div><div class=\"line\">          context.State = <span class=\"keyword\">new</span> ConcreteStateA();</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Context &#123;</div><div class=\"line\">      <span class=\"keyword\">private</span> state: State;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">constructor</span>(<span class=\"params\">state: State</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">this</span>.state = state;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">get</span> State(): State &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.state;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">set</span> State(state: State) &#123;</div><div class=\"line\">          <span class=\"keyword\">this</span>.state = state;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">public</span> request(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">\"request is being called!\"</span>);</div><div class=\"line\">          <span class=\"keyword\">this</span>.state.handle(<span class=\"keyword\">this</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"状态模式的定义\"><a href=\"#状态模式的定义\" class=\"headerlink\" title=\"状态模式的定义\"></a>状态模式的定义</h3><ul>\n<li>状态模式允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。</li>\n<li>其别名为状态对象，状态模式是一种对象行为型模式。</li>\n</ul>\n<h3 id=\"状态模式包含二个角色：\"><a href=\"#状态模式包含二个角色：\" class=\"headerlink\" title=\"状态模式包含二个角色：\"></a>状态模式包含二个角色：</h3><ul>\n<li>Context-环境类又称为上下文类，它是拥有状态的对象，在环境类中维护一个抽象状态类State的实例，这个实例定义当前状态，在具体实现时，它是一个State子类的对象，可以定义初始状态；</li>\n<li>State-抽象状态类用于定义一个接口以封装与环境类的一个特定状态相关的行为；</li>\n<li>ConcreteState-具体状态类是抽象状态类的子类，每一个子类实现一个与环境类的一个状态相关的行为，每一个具体状态类对应环境的一个具体状态，不同的具体状态类其行为有所不同。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(state) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Context Class created\"</span>);</div><div class=\"line\">        <span class=\"keyword\">switch</span> (state) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"A\"</span>:</div><div class=\"line\">                <span class=\"keyword\">this</span>.state = <span class=\"keyword\">new</span> ConcreteStateA()</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"B\"</span>:</div><div class=\"line\">                <span class=\"keyword\">this</span>.state = <span class=\"keyword\">new</span> ConcreteStateB()</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">this</span>.state = <span class=\"keyword\">new</span> ConcreteStateA()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    request() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context.request invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.state.handle(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">State</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"State Class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    handle() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'State.handle invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStateA</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcreteStateA Class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    handle(context) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteStateA.handle invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStateB</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcreteStateB Class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    handle(context) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteStateB.handle invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> context = <span class=\"keyword\">new</span> Context(<span class=\"string\">\"A\"</span>)</div><div class=\"line\">context.request()</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> StatePattern &#123;</div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> State &#123;</div><div class=\"line\">      handle(context: Context): <span class=\"built_in\">void</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteStateA <span class=\"keyword\">implements</span> State &#123;</div><div class=\"line\">      <span class=\"keyword\">public</span> handle(context: Context): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`handle` method of ConcreteStateA is being called!\"</span>);</div><div class=\"line\">          context.State = <span class=\"keyword\">new</span> ConcreteStateB();</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteStateB <span class=\"keyword\">implements</span> State &#123;</div><div class=\"line\">      <span class=\"keyword\">public</span> handle(context: Context): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`handle` method of ConcreteStateB is being called!\"</span>);</div><div class=\"line\">          context.State = <span class=\"keyword\">new</span> ConcreteStateA();</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Context &#123;</div><div class=\"line\">      <span class=\"keyword\">private</span> state: State;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">constructor</span>(<span class=\"params\">state: State</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">this</span>.state = state;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">get</span> State(): State &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.state;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">set</span> State(state: State) &#123;</div><div class=\"line\">          <span class=\"keyword\">this</span>.state = state;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">public</span> request(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">\"request is being called!\"</span>);</div><div class=\"line\">          <span class=\"keyword\">this</span>.state.handle(<span class=\"keyword\">this</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"策略模式(Strategy)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 策略模式的定义\n- 策略模式(Strategy Pattern)：定义一系列算法，将每一个算法封装起来，并让它们可以相互替换。\n- 策略模式让算法独立于使用它的客户而变化，也称为政策模式(Policy)。。\n\n### 策略模式包含三个角色：\n- Context-环境类在解决某个问题时可以采用多种策略，在环境类中维护一个对抽象策略类的引用实例;\n- Strategy-抽象策略类为所支持的算法声明了抽象方法，是所有策略类的父类;\n- ConcreteStrategy-具体策略类实现了在抽象策略类中定义的算法。\n---\n\n### ES6实现\n``` js\nclass Context {\n    constructor(type) {\n        console.log('Context Class created!');\n        switch (type) {\n            case \"A\":\n                this.strategy = new ConcreteStrategyA()\n                break\n            case \"B\":\n                this.strategy = new ConcreteStrategyB()\n                break\n            default:\n                this.strategy = new ConcreteStrategyA()\n        }\n    }\n\n    contextInterface() {\n        console.log('Context.contextInterface invoked');\n        this.strategy.algorithmInterface()\n    }\n}\n\nclass Strategy {\n    constructor() {\n        console.log('Strategy Class created!');\n    }\n\n    algorithmInterface() {\n        console.log('Strategy.algorithmInterface invoked');\n    }\n}\n\nclass ConcreteStrategyA extends Strategy {\n    constructor() {\n        super();\n        console.log('ConcreteStrategyA Class created!');\n    }\n\n    algorithmInterface() {\n        console.log('ConcreteStrategyA.algorithmInterface invoked');\n    }\n}\n\nclass ConcreteStrategyB extends Strategy {\n    constructor() {\n        super();\n        console.log('ConcreteStrategyB Class created!');\n    }\n\n    algorithmInterface() {\n        console.log('ConcreteStrategyB.algorithmInterface invoked');\n    }\n}\n\nlet contextA = new Context(\"A\");\ncontextA.contextInterface();\nlet contextB = new Context(\"B\");\ncontextB.contextInterface();\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace StrategyPattern {\n    export interface Strategy {\n        execute(): void;\n    }\n\n    export class ConcreteStrategy1 implements Strategy {\n        public execute(): void {\n            console.log(\"`execute` method of ConcreteStrategy1 is being called\");\n        }\n    }\n\n    export class ConcreteStrategy2 implements Strategy {\n        public execute(): void {\n            console.log(\"`execute` method of ConcreteStrategy2 is being called\");\n        }\n    }\n\n    export class ConcreteStrategy3 implements Strategy {\n        public execute(): void {\n            console.log(\"`execute` method of ConcreteStrategy3 is being called\");\n        }\n    }\n\n    export class Context {\n        private strategy: Strategy;\n\n        constructor(strategy: Strategy) {\n            this.strategy = strategy;\n        }\n\n        public executeStrategy(): void {\n            this.strategy.execute();\n        }\n    }\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Strategy.md","raw":"---\ntitle: 策略模式(Strategy)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Behavioral Patterns]\ntags: [javasctipt, 策略模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 策略模式的定义\n- 策略模式(Strategy Pattern)：定义一系列算法，将每一个算法封装起来，并让它们可以相互替换。\n- 策略模式让算法独立于使用它的客户而变化，也称为政策模式(Policy)。。\n\n### 策略模式包含三个角色：\n- Context-环境类在解决某个问题时可以采用多种策略，在环境类中维护一个对抽象策略类的引用实例;\n- Strategy-抽象策略类为所支持的算法声明了抽象方法，是所有策略类的父类;\n- ConcreteStrategy-具体策略类实现了在抽象策略类中定义的算法。\n---\n\n### ES6实现\n``` js\nclass Context {\n    constructor(type) {\n        console.log('Context Class created!');\n        switch (type) {\n            case \"A\":\n                this.strategy = new ConcreteStrategyA()\n                break\n            case \"B\":\n                this.strategy = new ConcreteStrategyB()\n                break\n            default:\n                this.strategy = new ConcreteStrategyA()\n        }\n    }\n\n    contextInterface() {\n        console.log('Context.contextInterface invoked');\n        this.strategy.algorithmInterface()\n    }\n}\n\nclass Strategy {\n    constructor() {\n        console.log('Strategy Class created!');\n    }\n\n    algorithmInterface() {\n        console.log('Strategy.algorithmInterface invoked');\n    }\n}\n\nclass ConcreteStrategyA extends Strategy {\n    constructor() {\n        super();\n        console.log('ConcreteStrategyA Class created!');\n    }\n\n    algorithmInterface() {\n        console.log('ConcreteStrategyA.algorithmInterface invoked');\n    }\n}\n\nclass ConcreteStrategyB extends Strategy {\n    constructor() {\n        super();\n        console.log('ConcreteStrategyB Class created!');\n    }\n\n    algorithmInterface() {\n        console.log('ConcreteStrategyB.algorithmInterface invoked');\n    }\n}\n\nlet contextA = new Context(\"A\");\ncontextA.contextInterface();\nlet contextB = new Context(\"B\");\ncontextB.contextInterface();\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace StrategyPattern {\n    export interface Strategy {\n        execute(): void;\n    }\n\n    export class ConcreteStrategy1 implements Strategy {\n        public execute(): void {\n            console.log(\"`execute` method of ConcreteStrategy1 is being called\");\n        }\n    }\n\n    export class ConcreteStrategy2 implements Strategy {\n        public execute(): void {\n            console.log(\"`execute` method of ConcreteStrategy2 is being called\");\n        }\n    }\n\n    export class ConcreteStrategy3 implements Strategy {\n        public execute(): void {\n            console.log(\"`execute` method of ConcreteStrategy3 is being called\");\n        }\n    }\n\n    export class Context {\n        private strategy: Strategy;\n\n        constructor(strategy: Strategy) {\n            this.strategy = strategy;\n        }\n\n        public executeStrategy(): void {\n            this.strategy.execute();\n        }\n    }\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Strategy","published":1,"updated":"2017-07-08T08:04:09.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52nth7h001oe0mwbbknsufd","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"策略模式的定义\"><a href=\"#策略模式的定义\" class=\"headerlink\" title=\"策略模式的定义\"></a>策略模式的定义</h3><ul>\n<li>策略模式(Strategy Pattern)：定义一系列算法，将每一个算法封装起来，并让它们可以相互替换。</li>\n<li>策略模式让算法独立于使用它的客户而变化，也称为政策模式(Policy)。。</li>\n</ul>\n<h3 id=\"策略模式包含三个角色：\"><a href=\"#策略模式包含三个角色：\" class=\"headerlink\" title=\"策略模式包含三个角色：\"></a>策略模式包含三个角色：</h3><ul>\n<li>Context-环境类在解决某个问题时可以采用多种策略，在环境类中维护一个对抽象策略类的引用实例;</li>\n<li>Strategy-抽象策略类为所支持的算法声明了抽象方法，是所有策略类的父类;</li>\n<li>ConcreteStrategy-具体策略类实现了在抽象策略类中定义的算法。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(type) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context Class created!'</span>);</div><div class=\"line\">        <span class=\"keyword\">switch</span> (type) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"A\"</span>:</div><div class=\"line\">                <span class=\"keyword\">this</span>.strategy = <span class=\"keyword\">new</span> ConcreteStrategyA()</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"B\"</span>:</div><div class=\"line\">                <span class=\"keyword\">this</span>.strategy = <span class=\"keyword\">new</span> ConcreteStrategyB()</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">this</span>.strategy = <span class=\"keyword\">new</span> ConcreteStrategyA()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    contextInterface() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context.contextInterface invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.strategy.algorithmInterface()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Strategy</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Strategy Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    algorithmInterface() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Strategy.algorithmInterface invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStrategyA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Strategy</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteStrategyA Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    algorithmInterface() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteStrategyA.algorithmInterface invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStrategyB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Strategy</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteStrategyB Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    algorithmInterface() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteStrategyB.algorithmInterface invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> contextA = <span class=\"keyword\">new</span> Context(<span class=\"string\">\"A\"</span>);</div><div class=\"line\">contextA.contextInterface();</div><div class=\"line\"><span class=\"keyword\">let</span> contextB = <span class=\"keyword\">new</span> Context(<span class=\"string\">\"B\"</span>);</div><div class=\"line\">contextB.contextInterface();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> StrategyPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Strategy &#123;</div><div class=\"line\">        execute(): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteStrategy1 <span class=\"keyword\">implements</span> Strategy &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> execute(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`execute` method of ConcreteStrategy1 is being called\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteStrategy2 <span class=\"keyword\">implements</span> Strategy &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> execute(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`execute` method of ConcreteStrategy2 is being called\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteStrategy3 <span class=\"keyword\">implements</span> Strategy &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> execute(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`execute` method of ConcreteStrategy3 is being called\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Context &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> strategy: Strategy;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">strategy: Strategy</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.strategy = strategy;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> executeStrategy(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.strategy.execute();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"策略模式的定义\"><a href=\"#策略模式的定义\" class=\"headerlink\" title=\"策略模式的定义\"></a>策略模式的定义</h3><ul>\n<li>策略模式(Strategy Pattern)：定义一系列算法，将每一个算法封装起来，并让它们可以相互替换。</li>\n<li>策略模式让算法独立于使用它的客户而变化，也称为政策模式(Policy)。。</li>\n</ul>\n<h3 id=\"策略模式包含三个角色：\"><a href=\"#策略模式包含三个角色：\" class=\"headerlink\" title=\"策略模式包含三个角色：\"></a>策略模式包含三个角色：</h3><ul>\n<li>Context-环境类在解决某个问题时可以采用多种策略，在环境类中维护一个对抽象策略类的引用实例;</li>\n<li>Strategy-抽象策略类为所支持的算法声明了抽象方法，是所有策略类的父类;</li>\n<li>ConcreteStrategy-具体策略类实现了在抽象策略类中定义的算法。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(type) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context Class created!'</span>);</div><div class=\"line\">        <span class=\"keyword\">switch</span> (type) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"A\"</span>:</div><div class=\"line\">                <span class=\"keyword\">this</span>.strategy = <span class=\"keyword\">new</span> ConcreteStrategyA()</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"B\"</span>:</div><div class=\"line\">                <span class=\"keyword\">this</span>.strategy = <span class=\"keyword\">new</span> ConcreteStrategyB()</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">this</span>.strategy = <span class=\"keyword\">new</span> ConcreteStrategyA()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    contextInterface() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context.contextInterface invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.strategy.algorithmInterface()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Strategy</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Strategy Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    algorithmInterface() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Strategy.algorithmInterface invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStrategyA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Strategy</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteStrategyA Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    algorithmInterface() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteStrategyA.algorithmInterface invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStrategyB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Strategy</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteStrategyB Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    algorithmInterface() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteStrategyB.algorithmInterface invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> contextA = <span class=\"keyword\">new</span> Context(<span class=\"string\">\"A\"</span>);</div><div class=\"line\">contextA.contextInterface();</div><div class=\"line\"><span class=\"keyword\">let</span> contextB = <span class=\"keyword\">new</span> Context(<span class=\"string\">\"B\"</span>);</div><div class=\"line\">contextB.contextInterface();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> StrategyPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Strategy &#123;</div><div class=\"line\">        execute(): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteStrategy1 <span class=\"keyword\">implements</span> Strategy &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> execute(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`execute` method of ConcreteStrategy1 is being called\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteStrategy2 <span class=\"keyword\">implements</span> Strategy &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> execute(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`execute` method of ConcreteStrategy2 is being called\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteStrategy3 <span class=\"keyword\">implements</span> Strategy &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> execute(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`execute` method of ConcreteStrategy3 is being called\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Context &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> strategy: Strategy;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">strategy: Strategy</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.strategy = strategy;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> executeStrategy(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.strategy.execute();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"模板方法模式(TemplateMethod)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 模板方法模式的定义\n- 表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。\n\n---\n\n### ES6实现\n``` js\nclass AbstractClass {\n    constructor() {\n        console.log('AbstractClass Class created!');\n    }\n\n    templateMethod() {\n        console.log('AbstractClass.templateMethod invoked');\n        this.primitiveOperation1();\n        this.primitiveOperation2();\n    }\n\n    primitiveOperation1() {\n        console.log('AbstractClass.primitiveOperation1 invoked');\n    }\n\n    primitiveOperation2() {\n        console.log('AbstractClass.primitiveOperation2 invoked');\n    }\n}\n\nclass ConcreteClass extends AbstractClass {\n    constructor() {\n        super();\n        console.log('ConcreteClass Class created!');\n    }\n\n    primitiveOperation1() {\n        console.log('ConcreteClass.primitiveOperation1 invoked');\n    }\n\n    primitiveOperation2() {\n        console.log('ConcreteClass.primitiveOperation2 invoked');\n    }\n}\n\nlet obj = new ConcreteClass();\nobj.templateMethod();\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace TemplateMethodPattern {\n    export class AbstractClass {\n        public method1(): void {\n            throw new Error(\"Abstract Method\");\n        }\n\n        public method2(): void {\n            throw new Error(\"Abstract Method\");\n        }\n\n        public method3(): void {\n            throw new Error(\"Abstract Method\");\n        }\n\n        public templateMethod(): void {\n            console.log(\"templateMethod is being called\");\n            this.method1();\n            this.method2();\n            this.method3();\n        }\n    }\n\n    export class ConcreteClass1 extends AbstractClass {\n        public method1(): void {\n            console.log(\"method1 of ConcreteClass1\");\n        }\n\n        public method2(): void {\n            console.log(\"method2 of ConcreteClass1\");\n        }\n\n        public method3(): void {\n            console.log(\"method3 of ConcreteClass1\");\n        }\n    }\n\n    export class ConcreteClass2 extends AbstractClass {\n        public method1(): void {\n            console.log(\"method1 of ConcreteClass2\");\n        }\n\n        public method2(): void {\n            console.log(\"method2 of ConcreteClass2\");\n        }\n\n        public method3(): void {\n            console.log(\"method3 of ConcreteClass2\");\n        }\n    }\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/TemplateMethod.md","raw":"---\ntitle: 模板方法模式(TemplateMethod)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Behavioral Patterns]\ntags: [javasctipt, 模板方法模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 模板方法模式的定义\n- 表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。\n\n---\n\n### ES6实现\n``` js\nclass AbstractClass {\n    constructor() {\n        console.log('AbstractClass Class created!');\n    }\n\n    templateMethod() {\n        console.log('AbstractClass.templateMethod invoked');\n        this.primitiveOperation1();\n        this.primitiveOperation2();\n    }\n\n    primitiveOperation1() {\n        console.log('AbstractClass.primitiveOperation1 invoked');\n    }\n\n    primitiveOperation2() {\n        console.log('AbstractClass.primitiveOperation2 invoked');\n    }\n}\n\nclass ConcreteClass extends AbstractClass {\n    constructor() {\n        super();\n        console.log('ConcreteClass Class created!');\n    }\n\n    primitiveOperation1() {\n        console.log('ConcreteClass.primitiveOperation1 invoked');\n    }\n\n    primitiveOperation2() {\n        console.log('ConcreteClass.primitiveOperation2 invoked');\n    }\n}\n\nlet obj = new ConcreteClass();\nobj.templateMethod();\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace TemplateMethodPattern {\n    export class AbstractClass {\n        public method1(): void {\n            throw new Error(\"Abstract Method\");\n        }\n\n        public method2(): void {\n            throw new Error(\"Abstract Method\");\n        }\n\n        public method3(): void {\n            throw new Error(\"Abstract Method\");\n        }\n\n        public templateMethod(): void {\n            console.log(\"templateMethod is being called\");\n            this.method1();\n            this.method2();\n            this.method3();\n        }\n    }\n\n    export class ConcreteClass1 extends AbstractClass {\n        public method1(): void {\n            console.log(\"method1 of ConcreteClass1\");\n        }\n\n        public method2(): void {\n            console.log(\"method2 of ConcreteClass1\");\n        }\n\n        public method3(): void {\n            console.log(\"method3 of ConcreteClass1\");\n        }\n    }\n\n    export class ConcreteClass2 extends AbstractClass {\n        public method1(): void {\n            console.log(\"method1 of ConcreteClass2\");\n        }\n\n        public method2(): void {\n            console.log(\"method2 of ConcreteClass2\");\n        }\n\n        public method3(): void {\n            console.log(\"method3 of ConcreteClass2\");\n        }\n    }\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"TemplateMethod","published":1,"updated":"2017-07-08T08:04:09.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52nth7k001te0mwb1cp3l88","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"模板方法模式的定义\"><a href=\"#模板方法模式的定义\" class=\"headerlink\" title=\"模板方法模式的定义\"></a>模板方法模式的定义</h3><ul>\n<li>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractClass Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    templateMethod() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractClass.templateMethod invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.primitiveOperation1();</div><div class=\"line\">        <span class=\"keyword\">this</span>.primitiveOperation2();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    primitiveOperation1() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractClass.primitiveOperation1 invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    primitiveOperation2() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractClass.primitiveOperation2 invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteClass Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    primitiveOperation1() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteClass.primitiveOperation1 invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    primitiveOperation2() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteClass.primitiveOperation2 invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> ConcreteClass();</div><div class=\"line\">obj.templateMethod();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> TemplateMethodPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AbstractClass &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> method1(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract Method\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> method2(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract Method\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> method3(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract Method\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> templateMethod(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"templateMethod is being called\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.method1();</div><div class=\"line\">            <span class=\"keyword\">this</span>.method2();</div><div class=\"line\">            <span class=\"keyword\">this</span>.method3();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteClass1 <span class=\"keyword\">extends</span> AbstractClass &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> method1(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"method1 of ConcreteClass1\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> method2(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"method2 of ConcreteClass1\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> method3(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"method3 of ConcreteClass1\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteClass2 <span class=\"keyword\">extends</span> AbstractClass &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> method1(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"method1 of ConcreteClass2\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> method2(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"method2 of ConcreteClass2\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> method3(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"method3 of ConcreteClass2\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"模板方法模式的定义\"><a href=\"#模板方法模式的定义\" class=\"headerlink\" title=\"模板方法模式的定义\"></a>模板方法模式的定义</h3><ul>\n<li>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractClass Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    templateMethod() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractClass.templateMethod invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.primitiveOperation1();</div><div class=\"line\">        <span class=\"keyword\">this</span>.primitiveOperation2();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    primitiveOperation1() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractClass.primitiveOperation1 invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    primitiveOperation2() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractClass.primitiveOperation2 invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteClass Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    primitiveOperation1() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteClass.primitiveOperation1 invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    primitiveOperation2() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteClass.primitiveOperation2 invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> ConcreteClass();</div><div class=\"line\">obj.templateMethod();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> TemplateMethodPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AbstractClass &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> method1(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract Method\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> method2(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract Method\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> method3(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract Method\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> templateMethod(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"templateMethod is being called\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.method1();</div><div class=\"line\">            <span class=\"keyword\">this</span>.method2();</div><div class=\"line\">            <span class=\"keyword\">this</span>.method3();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteClass1 <span class=\"keyword\">extends</span> AbstractClass &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> method1(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"method1 of ConcreteClass1\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> method2(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"method2 of ConcreteClass1\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> method3(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"method3 of ConcreteClass1\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteClass2 <span class=\"keyword\">extends</span> AbstractClass &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> method1(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"method1 of ConcreteClass2\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> method2(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"method2 of ConcreteClass2\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> method3(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"method3 of ConcreteClass2\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"访问者模式(Visitor)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 访问者模式的定义\n- 表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。\n\n---\n\n### ES6实现\n``` js\nclass Visitor {\n    constructor() {\n        console.log('Visitor Class created!');\n    }\n\n    visitConcreteElementA(ConcreteElementA) {\n        console.log('Visitor.visitConcreteElementA invoked');\n    }\n\n    visitConcreteElementB(ConcreteElementB) {\n        console.log('Visitor.visitConcreteElementB invoked');\n    }\n}\n\nclass ConcreteVisitor1 extends Visitor {\n    constructor() {\n        super();\n        console.log('ConcreteVisitor1 Class created!');\n    }\n\n    visitConcreteElementA(ConcreteElementA) {\n        console.log('ConcreteVisitor1.visitConcreteElementA invoked');\n    }\n\n    visitConcreteElementB(ConcreteElementB) {\n        console.log('ConcreteVisitor1.visitConcreteElementB invoked');\n    }\n}\n\nclass ConcreteVisitor2 extends Visitor {\n    constructor() {\n        super();\n        console.log('ConcreteVisitor2 Class created!');\n    }\n\n    visitConcreteElementA(ConcreteElementA) {\n        console.log('ConcreteVisitor2.visitConcreteElementA invoked');\n    }\n\n    visitConcreteElementB(ConcreteElementB) {\n        console.log('ConcreteVisitor2.visitConcreteElementB invoked');\n    }\n}\n\nclass ObjectStructure {\n    constructor() {\n        console.log('ObjectStructure Class created!');\n    }\n}\n\nclass Element {\n    constructor() {\n        console.log('Element Class created!');\n    }\n\n    Accept(visitor) {\n        console.log('Element.visitConcreteElementB invoked');\n    }\n}\n\nclass ConcreteElementA extends Element {\n    constructor() {\n        super();\n        console.log('ConcreteElementA Class created!');\n    }\n\n    accept(visitor) {\n        console.log('ConcreteElementA.accept invoked');\n        visitor.visitConcreteElementA(this);\n    }\n\n    operationA() {\n        console.log('ConcreteElementA.operationA invoked');\n    }\n}\n\nclass ConcreteElementB extends Element {\n    constructor() {\n        super();\n        console.log('ConcreteElementB Class created!');\n    }\n\n    accept(visitor) {\n        console.log('ConcreteElementB.accept invoked');\n        visitor.visitConcreteElementB(this);\n    }\n\n    operationB() {\n        console.log('ConcreteElementB.operationB invoked');\n    }\n}\n\nlet visitor1 = new ConcreteVisitor1();\nlet visitor2 = new ConcreteVisitor2();\nlet elementA = new ConcreteElementA();\nlet elementB = new ConcreteElementB();\nelementA.accept(visitor1);\nelementB.accept(visitor2);\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace VisitorPattern {\n    export interface Visitor {\n        visitConcreteElement1(concreteElement1: ConcreteElement1): void;\n        visitConcreteElement2(concreteElement2: ConcreteElement2): void;\n    }\n\n    export class ConcreteVisitor1 implements Visitor {\n        public visitConcreteElement1(concreteElement1: ConcreteElement1): void {\n            console.log(\"`visitConcreteElement1` of ConcreteVisitor1 is being called!\");\n        }\n\n        public visitConcreteElement2(concreteElement2: ConcreteElement2): void {\n            console.log(\"`visitConcreteElement2` of ConcreteVisitor1 is being called!\");\n        }\n    }\n\n    export class ConcreteVisitor2 implements Visitor {\n        public visitConcreteElement1(concreteElement1: ConcreteElement1): void {\n            console.log(\"`visitConcreteElement1` of ConcreteVisitor2 is being called!\");\n        }\n\n        public visitConcreteElement2(concreteElement2: ConcreteElement2): void {\n            console.log(\"`visitConcreteElement2` of ConcreteVisitor2 is being called!\");\n        }\n    }\n\n\n    export interface Element {\n        operate(visitor: Visitor): void;\n    }\n\n    export class ConcreteElement1 implements Element {\n        public operate(visitor: Visitor): void {\n            console.log(\"`operate` of ConcreteElement1 is being called!\");\n            visitor.visitConcreteElement1(this);\n        }\n    }\n\n    export class ConcreteElement2 implements Element {\n        public operate(visitor: Visitor): void {\n            console.log(\"`operate` of ConcreteElement2 is being called!\");\n            visitor.visitConcreteElement2(this);\n        }\n    }\n\n    export class Objs {\n        private elements: Element[] = [];\n\n        public attach(e: Element): void {\n            this.elements.push(e);\n        }\n\n        public detach(e: Element): void {\n            var index = this.elements.indexOf(e);\n            this.elements.splice(index, 1);\n        }\n\n        public operate(visitor: Visitor): void {\n            var i = 0,\n                max = this.elements.length;\n\n            for(; i < max; i += 1) {\n                this.elements[i].operate(visitor);\n            }\n        }\n    }\n\n}\n\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Visitor.md","raw":"---\ntitle: 访问者模式(Visitor)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Behavioral Patterns]\ntags: [javasctipt, 访问者模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 访问者模式的定义\n- 表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。\n\n---\n\n### ES6实现\n``` js\nclass Visitor {\n    constructor() {\n        console.log('Visitor Class created!');\n    }\n\n    visitConcreteElementA(ConcreteElementA) {\n        console.log('Visitor.visitConcreteElementA invoked');\n    }\n\n    visitConcreteElementB(ConcreteElementB) {\n        console.log('Visitor.visitConcreteElementB invoked');\n    }\n}\n\nclass ConcreteVisitor1 extends Visitor {\n    constructor() {\n        super();\n        console.log('ConcreteVisitor1 Class created!');\n    }\n\n    visitConcreteElementA(ConcreteElementA) {\n        console.log('ConcreteVisitor1.visitConcreteElementA invoked');\n    }\n\n    visitConcreteElementB(ConcreteElementB) {\n        console.log('ConcreteVisitor1.visitConcreteElementB invoked');\n    }\n}\n\nclass ConcreteVisitor2 extends Visitor {\n    constructor() {\n        super();\n        console.log('ConcreteVisitor2 Class created!');\n    }\n\n    visitConcreteElementA(ConcreteElementA) {\n        console.log('ConcreteVisitor2.visitConcreteElementA invoked');\n    }\n\n    visitConcreteElementB(ConcreteElementB) {\n        console.log('ConcreteVisitor2.visitConcreteElementB invoked');\n    }\n}\n\nclass ObjectStructure {\n    constructor() {\n        console.log('ObjectStructure Class created!');\n    }\n}\n\nclass Element {\n    constructor() {\n        console.log('Element Class created!');\n    }\n\n    Accept(visitor) {\n        console.log('Element.visitConcreteElementB invoked');\n    }\n}\n\nclass ConcreteElementA extends Element {\n    constructor() {\n        super();\n        console.log('ConcreteElementA Class created!');\n    }\n\n    accept(visitor) {\n        console.log('ConcreteElementA.accept invoked');\n        visitor.visitConcreteElementA(this);\n    }\n\n    operationA() {\n        console.log('ConcreteElementA.operationA invoked');\n    }\n}\n\nclass ConcreteElementB extends Element {\n    constructor() {\n        super();\n        console.log('ConcreteElementB Class created!');\n    }\n\n    accept(visitor) {\n        console.log('ConcreteElementB.accept invoked');\n        visitor.visitConcreteElementB(this);\n    }\n\n    operationB() {\n        console.log('ConcreteElementB.operationB invoked');\n    }\n}\n\nlet visitor1 = new ConcreteVisitor1();\nlet visitor2 = new ConcreteVisitor2();\nlet elementA = new ConcreteElementA();\nlet elementB = new ConcreteElementB();\nelementA.accept(visitor1);\nelementB.accept(visitor2);\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace VisitorPattern {\n    export interface Visitor {\n        visitConcreteElement1(concreteElement1: ConcreteElement1): void;\n        visitConcreteElement2(concreteElement2: ConcreteElement2): void;\n    }\n\n    export class ConcreteVisitor1 implements Visitor {\n        public visitConcreteElement1(concreteElement1: ConcreteElement1): void {\n            console.log(\"`visitConcreteElement1` of ConcreteVisitor1 is being called!\");\n        }\n\n        public visitConcreteElement2(concreteElement2: ConcreteElement2): void {\n            console.log(\"`visitConcreteElement2` of ConcreteVisitor1 is being called!\");\n        }\n    }\n\n    export class ConcreteVisitor2 implements Visitor {\n        public visitConcreteElement1(concreteElement1: ConcreteElement1): void {\n            console.log(\"`visitConcreteElement1` of ConcreteVisitor2 is being called!\");\n        }\n\n        public visitConcreteElement2(concreteElement2: ConcreteElement2): void {\n            console.log(\"`visitConcreteElement2` of ConcreteVisitor2 is being called!\");\n        }\n    }\n\n\n    export interface Element {\n        operate(visitor: Visitor): void;\n    }\n\n    export class ConcreteElement1 implements Element {\n        public operate(visitor: Visitor): void {\n            console.log(\"`operate` of ConcreteElement1 is being called!\");\n            visitor.visitConcreteElement1(this);\n        }\n    }\n\n    export class ConcreteElement2 implements Element {\n        public operate(visitor: Visitor): void {\n            console.log(\"`operate` of ConcreteElement2 is being called!\");\n            visitor.visitConcreteElement2(this);\n        }\n    }\n\n    export class Objs {\n        private elements: Element[] = [];\n\n        public attach(e: Element): void {\n            this.elements.push(e);\n        }\n\n        public detach(e: Element): void {\n            var index = this.elements.indexOf(e);\n            this.elements.splice(index, 1);\n        }\n\n        public operate(visitor: Visitor): void {\n            var i = 0,\n                max = this.elements.length;\n\n            for(; i < max; i += 1) {\n                this.elements[i].operate(visitor);\n            }\n        }\n    }\n\n}\n\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Visitor","published":1,"updated":"2017-07-08T08:04:09.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52nth7m001we0mwng2isdf5","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"访问者模式的定义\"><a href=\"#访问者模式的定义\" class=\"headerlink\" title=\"访问者模式的定义\"></a>访问者模式的定义</h3><ul>\n<li>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Visitor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Visitor Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    visitConcreteElementA(ConcreteElementA) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Visitor.visitConcreteElementA invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    visitConcreteElementB(ConcreteElementB) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Visitor.visitConcreteElementB invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteVisitor1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Visitor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteVisitor1 Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    visitConcreteElementA(ConcreteElementA) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteVisitor1.visitConcreteElementA invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    visitConcreteElementB(ConcreteElementB) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteVisitor1.visitConcreteElementB invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteVisitor2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Visitor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteVisitor2 Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    visitConcreteElementA(ConcreteElementA) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteVisitor2.visitConcreteElementA invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    visitConcreteElementB(ConcreteElementB) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteVisitor2.visitConcreteElementB invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObjectStructure</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ObjectStructure Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Element</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Element Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Accept(visitor) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Element.visitConcreteElementB invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteElementA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Element</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteElementA Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    accept(visitor) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteElementA.accept invoked'</span>);</div><div class=\"line\">        visitor.visitConcreteElementA(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationA() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteElementA.operationA invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteElementB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Element</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteElementB Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    accept(visitor) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteElementB.accept invoked'</span>);</div><div class=\"line\">        visitor.visitConcreteElementB(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationB() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteElementB.operationB invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> visitor1 = <span class=\"keyword\">new</span> ConcreteVisitor1();</div><div class=\"line\"><span class=\"keyword\">let</span> visitor2 = <span class=\"keyword\">new</span> ConcreteVisitor2();</div><div class=\"line\"><span class=\"keyword\">let</span> elementA = <span class=\"keyword\">new</span> ConcreteElementA();</div><div class=\"line\"><span class=\"keyword\">let</span> elementB = <span class=\"keyword\">new</span> ConcreteElementB();</div><div class=\"line\">elementA.accept(visitor1);</div><div class=\"line\">elementB.accept(visitor2);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> VisitorPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Visitor &#123;</div><div class=\"line\">        visitConcreteElement1(concreteElement1: ConcreteElement1): <span class=\"built_in\">void</span>;</div><div class=\"line\">        visitConcreteElement2(concreteElement2: ConcreteElement2): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteVisitor1 <span class=\"keyword\">implements</span> Visitor &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> visitConcreteElement1(concreteElement1: ConcreteElement1): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`visitConcreteElement1` of ConcreteVisitor1 is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> visitConcreteElement2(concreteElement2: ConcreteElement2): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`visitConcreteElement2` of ConcreteVisitor1 is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteVisitor2 <span class=\"keyword\">implements</span> Visitor &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> visitConcreteElement1(concreteElement1: ConcreteElement1): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`visitConcreteElement1` of ConcreteVisitor2 is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> visitConcreteElement2(concreteElement2: ConcreteElement2): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`visitConcreteElement2` of ConcreteVisitor2 is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Element &#123;</div><div class=\"line\">        operate(visitor: Visitor): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteElement1 <span class=\"keyword\">implements</span> Element &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> operate(visitor: Visitor): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operate` of ConcreteElement1 is being called!\"</span>);</div><div class=\"line\">            visitor.visitConcreteElement1(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteElement2 <span class=\"keyword\">implements</span> Element &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> operate(visitor: Visitor): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operate` of ConcreteElement2 is being called!\"</span>);</div><div class=\"line\">            visitor.visitConcreteElement2(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Objs &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> elements: Element[] = [];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> attach(e: Element): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.elements.push(e);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> detach(e: Element): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> index = <span class=\"keyword\">this</span>.elements.indexOf(e);</div><div class=\"line\">            <span class=\"keyword\">this</span>.elements.splice(index, <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operate(visitor: Visitor): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,</div><div class=\"line\">                max = <span class=\"keyword\">this</span>.elements.length;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span>(; i &lt; max; i += <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.elements[i].operate(visitor);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"访问者模式的定义\"><a href=\"#访问者模式的定义\" class=\"headerlink\" title=\"访问者模式的定义\"></a>访问者模式的定义</h3><ul>\n<li>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Visitor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Visitor Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    visitConcreteElementA(ConcreteElementA) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Visitor.visitConcreteElementA invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    visitConcreteElementB(ConcreteElementB) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Visitor.visitConcreteElementB invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteVisitor1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Visitor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteVisitor1 Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    visitConcreteElementA(ConcreteElementA) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteVisitor1.visitConcreteElementA invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    visitConcreteElementB(ConcreteElementB) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteVisitor1.visitConcreteElementB invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteVisitor2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Visitor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteVisitor2 Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    visitConcreteElementA(ConcreteElementA) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteVisitor2.visitConcreteElementA invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    visitConcreteElementB(ConcreteElementB) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteVisitor2.visitConcreteElementB invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObjectStructure</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ObjectStructure Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Element</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Element Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Accept(visitor) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Element.visitConcreteElementB invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteElementA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Element</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteElementA Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    accept(visitor) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteElementA.accept invoked'</span>);</div><div class=\"line\">        visitor.visitConcreteElementA(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationA() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteElementA.operationA invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteElementB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Element</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteElementB Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    accept(visitor) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteElementB.accept invoked'</span>);</div><div class=\"line\">        visitor.visitConcreteElementB(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationB() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteElementB.operationB invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> visitor1 = <span class=\"keyword\">new</span> ConcreteVisitor1();</div><div class=\"line\"><span class=\"keyword\">let</span> visitor2 = <span class=\"keyword\">new</span> ConcreteVisitor2();</div><div class=\"line\"><span class=\"keyword\">let</span> elementA = <span class=\"keyword\">new</span> ConcreteElementA();</div><div class=\"line\"><span class=\"keyword\">let</span> elementB = <span class=\"keyword\">new</span> ConcreteElementB();</div><div class=\"line\">elementA.accept(visitor1);</div><div class=\"line\">elementB.accept(visitor2);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> VisitorPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Visitor &#123;</div><div class=\"line\">        visitConcreteElement1(concreteElement1: ConcreteElement1): <span class=\"built_in\">void</span>;</div><div class=\"line\">        visitConcreteElement2(concreteElement2: ConcreteElement2): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteVisitor1 <span class=\"keyword\">implements</span> Visitor &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> visitConcreteElement1(concreteElement1: ConcreteElement1): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`visitConcreteElement1` of ConcreteVisitor1 is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> visitConcreteElement2(concreteElement2: ConcreteElement2): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`visitConcreteElement2` of ConcreteVisitor1 is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteVisitor2 <span class=\"keyword\">implements</span> Visitor &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> visitConcreteElement1(concreteElement1: ConcreteElement1): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`visitConcreteElement1` of ConcreteVisitor2 is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> visitConcreteElement2(concreteElement2: ConcreteElement2): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`visitConcreteElement2` of ConcreteVisitor2 is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Element &#123;</div><div class=\"line\">        operate(visitor: Visitor): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteElement1 <span class=\"keyword\">implements</span> Element &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> operate(visitor: Visitor): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operate` of ConcreteElement1 is being called!\"</span>);</div><div class=\"line\">            visitor.visitConcreteElement1(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteElement2 <span class=\"keyword\">implements</span> Element &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> operate(visitor: Visitor): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operate` of ConcreteElement2 is being called!\"</span>);</div><div class=\"line\">            visitor.visitConcreteElement2(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Objs &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> elements: Element[] = [];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> attach(e: Element): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.elements.push(e);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> detach(e: Element): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> index = <span class=\"keyword\">this</span>.elements.indexOf(e);</div><div class=\"line\">            <span class=\"keyword\">this</span>.elements.splice(index, <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operate(visitor: Visitor): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,</div><div class=\"line\">                max = <span class=\"keyword\">this</span>.elements.length;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span>(; i &lt; max; i += <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.elements[i].operate(visitor);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"责任链模式(Chain of Responsibility)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n\n\n### ES6实现\n``` js\n'use strict';\nclass Handler {\n    constructor() {\n        console.log('Handler Class created');\n    }\n\n    handleRequest() {\n        console.log('Handler.handleRequest invoked');\n    }\n}\n\nclass ConcreteHandler1 extends Handler {\n    constructor() {\n        super();\n        console.log('ConcreteHandler1 Class created');\n    }\n\n    setSuccessor(successor) {\n        this.successor = successor;\n        console.log('ConcreteHandler1.setSuccessor invoked');\n    }\n\n    handleRequest(request) {\n        console.log('ConcreteHandler1.handleRequest invoked');\n        if (request === 'run')\n            console.log('ConcreteHandler1 has handled the request');\n        else {\n            console.log('ConcreteHandler1 calls his successor');\n            this.successor.handleRequest(request);\n        }\n    }\n}\n\nclass ConcreteHandler2 extends Handler {\n    constructor() {\n        super();\n        console.log('ConcreteHandler2 Class created');\n    }\n\n    handleRequest(request) {\n        console.log('ConcreteHandler2.handleRequest invoked');\n    }\n}\n\nlet handle1 = new ConcreteHandler1();\nlet handle2 = new ConcreteHandler2();\nhandle1.setSuccessor(handle2);\nhandle1.handleRequest('run');\nhandle1.handleRequest('stay');\n\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace ChainOfResponsibilityPattern {\n\n    export class Handler {\n        private handler: Handler;\n        private req: number;\n\n        constructor(req: number) {\n            this.req = req;\n        }\n\n        public setHandler(handler: Handler): void {\n            this.handler = handler;\n        }\n\n        public operation(msg: string, req: number): void {\n            if (req <= this.req) {\n                this.handlerRequest(msg)\n            } else if (this.handler !== null && this.handler !== undefined) {\n                this.handler.operation(msg, req);\n            }\n        }\n\n        public handlerRequest(msg: string): void {\n            throw new Error(\"Abstract method!\");\n        }\n    }\n\n    export class ConcreteHandler1 extends Handler {\n        constructor(req: number) {\n            super(req);\n        }\n        public handlerRequest(msg: string) {\n            console.log(\"Message (ConcreteHandler1) :: \", msg);\n        }\n    }\n\n\n    export class ConcreteHandler2 extends Handler {\n        constructor(req: number) {\n            super(req);\n        }\n        public handlerRequest(msg: string) {\n            console.log(\"Message :: (ConcreteHandler2) \", msg);\n        }\n    }\n\n    export class ConcreteHandler3 extends Handler {\n        constructor(req: number) {\n            super(req);\n        }\n        public handlerRequest(msg: string) {\n            console.log(\"Message :: (ConcreteHandler3) \", msg);\n        }\n    }\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/chainOfResponsibility.md","raw":"---\ntitle: 责任链模式(Chain of Responsibility)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Behavioral Patterns]\ntags: [javasctipt, 责任链模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n\n\n### ES6实现\n``` js\n'use strict';\nclass Handler {\n    constructor() {\n        console.log('Handler Class created');\n    }\n\n    handleRequest() {\n        console.log('Handler.handleRequest invoked');\n    }\n}\n\nclass ConcreteHandler1 extends Handler {\n    constructor() {\n        super();\n        console.log('ConcreteHandler1 Class created');\n    }\n\n    setSuccessor(successor) {\n        this.successor = successor;\n        console.log('ConcreteHandler1.setSuccessor invoked');\n    }\n\n    handleRequest(request) {\n        console.log('ConcreteHandler1.handleRequest invoked');\n        if (request === 'run')\n            console.log('ConcreteHandler1 has handled the request');\n        else {\n            console.log('ConcreteHandler1 calls his successor');\n            this.successor.handleRequest(request);\n        }\n    }\n}\n\nclass ConcreteHandler2 extends Handler {\n    constructor() {\n        super();\n        console.log('ConcreteHandler2 Class created');\n    }\n\n    handleRequest(request) {\n        console.log('ConcreteHandler2.handleRequest invoked');\n    }\n}\n\nlet handle1 = new ConcreteHandler1();\nlet handle2 = new ConcreteHandler2();\nhandle1.setSuccessor(handle2);\nhandle1.handleRequest('run');\nhandle1.handleRequest('stay');\n\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace ChainOfResponsibilityPattern {\n\n    export class Handler {\n        private handler: Handler;\n        private req: number;\n\n        constructor(req: number) {\n            this.req = req;\n        }\n\n        public setHandler(handler: Handler): void {\n            this.handler = handler;\n        }\n\n        public operation(msg: string, req: number): void {\n            if (req <= this.req) {\n                this.handlerRequest(msg)\n            } else if (this.handler !== null && this.handler !== undefined) {\n                this.handler.operation(msg, req);\n            }\n        }\n\n        public handlerRequest(msg: string): void {\n            throw new Error(\"Abstract method!\");\n        }\n    }\n\n    export class ConcreteHandler1 extends Handler {\n        constructor(req: number) {\n            super(req);\n        }\n        public handlerRequest(msg: string) {\n            console.log(\"Message (ConcreteHandler1) :: \", msg);\n        }\n    }\n\n\n    export class ConcreteHandler2 extends Handler {\n        constructor(req: number) {\n            super(req);\n        }\n        public handlerRequest(msg: string) {\n            console.log(\"Message :: (ConcreteHandler2) \", msg);\n        }\n    }\n\n    export class ConcreteHandler3 extends Handler {\n        constructor(req: number) {\n            super(req);\n        }\n        public handlerRequest(msg: string) {\n            console.log(\"Message :: (ConcreteHandler3) \", msg);\n        }\n    }\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"chainOfResponsibility","published":1,"updated":"2017-07-08T08:04:09.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52nth7o0020e0mwp6l4qsoj","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Handler Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    handleRequest() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Handler.handleRequest invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteHandler1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler1 Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setSuccessor(successor) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.successor = successor;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler1.setSuccessor invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    handleRequest(request) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler1.handleRequest invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (request === <span class=\"string\">'run'</span>)</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler1 has handled the request'</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler1 calls his successor'</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.successor.handleRequest(request);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteHandler2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler2 Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    handleRequest(request) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler2.handleRequest invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> handle1 = <span class=\"keyword\">new</span> ConcreteHandler1();</div><div class=\"line\"><span class=\"keyword\">let</span> handle2 = <span class=\"keyword\">new</span> ConcreteHandler2();</div><div class=\"line\">handle1.setSuccessor(handle2);</div><div class=\"line\">handle1.handleRequest(<span class=\"string\">'run'</span>);</div><div class=\"line\">handle1.handleRequest(<span class=\"string\">'stay'</span>);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> ChainOfResponsibilityPattern &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Handler &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> handler: Handler;</div><div class=\"line\">        <span class=\"keyword\">private</span> req: <span class=\"built_in\">number</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">req: <span class=\"built_in\">number</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.req = req;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> setHandler(handler: Handler): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.handler = handler;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(msg: <span class=\"built_in\">string</span>, req: <span class=\"built_in\">number</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (req &lt;= <span class=\"keyword\">this</span>.req) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.handlerRequest(msg)</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.handler !== <span class=\"literal\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.handler !== <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.handler.operation(msg, req);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> handlerRequest(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract method!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteHandler1 <span class=\"keyword\">extends</span> Handler &#123;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">req: <span class=\"built_in\">number</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(req);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">public</span> handlerRequest(msg: <span class=\"built_in\">string</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Message (ConcreteHandler1) :: \"</span>, msg);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteHandler2 <span class=\"keyword\">extends</span> Handler &#123;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">req: <span class=\"built_in\">number</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(req);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">public</span> handlerRequest(msg: <span class=\"built_in\">string</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Message :: (ConcreteHandler2) \"</span>, msg);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteHandler3 <span class=\"keyword\">extends</span> Handler &#123;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">req: <span class=\"built_in\">number</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(req);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">public</span> handlerRequest(msg: <span class=\"built_in\">string</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Message :: (ConcreteHandler3) \"</span>, msg);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Handler Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    handleRequest() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Handler.handleRequest invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteHandler1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler1 Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setSuccessor(successor) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.successor = successor;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler1.setSuccessor invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    handleRequest(request) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler1.handleRequest invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (request === <span class=\"string\">'run'</span>)</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler1 has handled the request'</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler1 calls his successor'</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.successor.handleRequest(request);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteHandler2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler2 Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    handleRequest(request) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler2.handleRequest invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> handle1 = <span class=\"keyword\">new</span> ConcreteHandler1();</div><div class=\"line\"><span class=\"keyword\">let</span> handle2 = <span class=\"keyword\">new</span> ConcreteHandler2();</div><div class=\"line\">handle1.setSuccessor(handle2);</div><div class=\"line\">handle1.handleRequest(<span class=\"string\">'run'</span>);</div><div class=\"line\">handle1.handleRequest(<span class=\"string\">'stay'</span>);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> ChainOfResponsibilityPattern &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Handler &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> handler: Handler;</div><div class=\"line\">        <span class=\"keyword\">private</span> req: <span class=\"built_in\">number</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">req: <span class=\"built_in\">number</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.req = req;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> setHandler(handler: Handler): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.handler = handler;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(msg: <span class=\"built_in\">string</span>, req: <span class=\"built_in\">number</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (req &lt;= <span class=\"keyword\">this</span>.req) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.handlerRequest(msg)</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.handler !== <span class=\"literal\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.handler !== <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.handler.operation(msg, req);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> handlerRequest(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract method!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteHandler1 <span class=\"keyword\">extends</span> Handler &#123;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">req: <span class=\"built_in\">number</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(req);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">public</span> handlerRequest(msg: <span class=\"built_in\">string</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Message (ConcreteHandler1) :: \"</span>, msg);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteHandler2 <span class=\"keyword\">extends</span> Handler &#123;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">req: <span class=\"built_in\">number</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(req);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">public</span> handlerRequest(msg: <span class=\"built_in\">string</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Message :: (ConcreteHandler2) \"</span>, msg);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteHandler3 <span class=\"keyword\">extends</span> Handler &#123;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">req: <span class=\"built_in\">number</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(req);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">public</span> handlerRequest(msg: <span class=\"built_in\">string</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Message :: (ConcreteHandler3) \"</span>, msg);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"生成器(Generator)","date":"2017-07-09T05:08:27.000Z","_content":"## 生成器对象\n生成器对象是由一个 generator function 返回的,并且它符合可迭代协议和迭代器协议。\n### 语法\n```js\nfunction* gen() { \n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nlet g = gen(); \n```\n\n### 方法\n- Generator.prototype.next() \n\n  返回一个由 yield表达式生成的值。\n- Generator.prototype.return()\n\n  返回给定的值并结束生成器。\n- Generator.prototype.throw()\n  向生成器抛出一个错误。\n\n## function * \nfunction* 这种声明方式(function关键字后跟一个星号）会定义一个生成器函数 (generator function)，它返回一个  Generator  对象。\n### 语法\nfunction* name([param[, param[, ... param]]]) { statements }\n\n### 描述\n生成器函数在执行时能中途退出，后面又能重新进入继续执行。而且在函数内定义的变量的状态都会保留，不受中途退出的影响。\n\n调用一个生成器函数并不会马上执行它里面的语句，而是返回一个这个生成器的迭代器（iterator）对象。当这个迭代器的 next() 方法被首次（后续）调用时，其内的语句会执行到第一个（后续）出现yield表达式的位置为止，该表达式定义了迭代器要返回的值，或者被 yield*委派至另一个生成器函数。next()方法返回一个对象，这个对象包含两个属性：value 和 done，value 属性表示本次 yield 表达式的返回值，done 属性为布尔类型，表示生成器是否已经产出了它最后的值，即生成器函数是否已经返回。\n\n调用 next() 方法时，如果传入了参数，那么这个参数会取代生成器函数中对应执行位置的 yield 表达式（整个表达式被这个值替换）\n\n当在生成器函数中显式 return 时，会导致生成器立即变为完成状态，即调用 next() 方法返回的对象的 done 为 true。如果 return 了一个值，那么这个值会作为下次调用 next() 方法返回的 value 值。\n\n### 示例\n#### 简单示例\n```js\nfunction* idMaker(){\n  var index = 0;\n  while(index<3)\n    yield index++;\n}\n\nvar gen = idMaker();\n\nconsole.log(gen.next().value); // 0\nconsole.log(gen.next().value); // 1\nconsole.log(gen.next().value); // 2\nconsole.log(gen.next().value); // undefined\n// ...\n```\n#### yield*的示例\n```js\nfunction* anotherGenerator(i) {\n  yield i + 1;\n  yield i + 2;\n  yield i + 3;\n}\n\nfunction* generator(i){\n  yield i;\n  yield* anotherGenerator(i);\n  yield i + 10;\n}\n\nvar gen = generator(10);\n\nconsole.log(gen.next().value); // 10\nconsole.log(gen.next().value); // 11\nconsole.log(gen.next().value); // 12\nconsole.log(gen.next().value); // 13\nconsole.log(gen.next().value); // 20\n```\n#### 传递参数\n```js\nfunction* logGenerator() {\n  console.log(yield);//首次执行的中断处\n  console.log(yield);\n  console.log(yield);\n}\n\nvar gen = logGenerator();\n\n// 首次调用 next() 会执行到第一个 yield 语句处\ngen.next(); \ngen.next('pretzel'); // pretzel\ngen.next('california'); // california\ngen.next('mayonnaise'); // mayonnaise\n```\n#### 显式返回\n```js\nfunction* yieldAndReturn() {\n  yield \"Y\";\n  return \"R\";//显式返回处\n  yield \"unreachable\";\n}\n\nvar gen = yieldAndReturn()\nconsole.log(gen.next()); // { value: \"Y\", done: false }\nconsole.log(gen.next()); // { value: \"R\", done: true }\nconsole.log(gen.next()); // { value: undefined, done: true }\n```\n#### 生成器函数不能当构造器使用\n```js\nfunction* f() {}\nvar obj = new f; // throws \"TypeError: f is not a constructor\"\n```\n##  yield* expression 用于委托给另一个generator 或可迭代对象。\n### 语法\nyield* [[expression]];\n\n### 描述\nyield * 表达式迭代操作数，并yield 它返回的每个值。\n\nyield * 表达式本身的值是当迭代器关闭时返回的值(即，当done时为true)。\n\n### 示例\n例子：委托给其他生成器\n\n以下代码中，g1() yield 出去的每个值都会在 g2() 的 next() 方法中返回，就像那些 yield 语句是写在 g2() 里一样。\n```js\nfunction* g1() {\n  yield 2;\n  yield 3;\n  yield 4;\n}\n\nfunction* g2() {\n  yield 1;\n  yield* g1();\n  yield 5;\n}\n\nvar iterator = g2();\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: 4, done: false }\nconsole.log(iterator.next()); // { value: 5, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n## 参考：\n- [mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript)\n- [迭代器和生成器](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators)","source":"_posts/generatorAndIterator.md","raw":"---\ntitle: 生成器(Generator)\ndate: 2017-07-09 13:08:27\ncategories: [javascript, MDN]\ntags: [生成器]\n---\n## 生成器对象\n生成器对象是由一个 generator function 返回的,并且它符合可迭代协议和迭代器协议。\n### 语法\n```js\nfunction* gen() { \n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nlet g = gen(); \n```\n\n### 方法\n- Generator.prototype.next() \n\n  返回一个由 yield表达式生成的值。\n- Generator.prototype.return()\n\n  返回给定的值并结束生成器。\n- Generator.prototype.throw()\n  向生成器抛出一个错误。\n\n## function * \nfunction* 这种声明方式(function关键字后跟一个星号）会定义一个生成器函数 (generator function)，它返回一个  Generator  对象。\n### 语法\nfunction* name([param[, param[, ... param]]]) { statements }\n\n### 描述\n生成器函数在执行时能中途退出，后面又能重新进入继续执行。而且在函数内定义的变量的状态都会保留，不受中途退出的影响。\n\n调用一个生成器函数并不会马上执行它里面的语句，而是返回一个这个生成器的迭代器（iterator）对象。当这个迭代器的 next() 方法被首次（后续）调用时，其内的语句会执行到第一个（后续）出现yield表达式的位置为止，该表达式定义了迭代器要返回的值，或者被 yield*委派至另一个生成器函数。next()方法返回一个对象，这个对象包含两个属性：value 和 done，value 属性表示本次 yield 表达式的返回值，done 属性为布尔类型，表示生成器是否已经产出了它最后的值，即生成器函数是否已经返回。\n\n调用 next() 方法时，如果传入了参数，那么这个参数会取代生成器函数中对应执行位置的 yield 表达式（整个表达式被这个值替换）\n\n当在生成器函数中显式 return 时，会导致生成器立即变为完成状态，即调用 next() 方法返回的对象的 done 为 true。如果 return 了一个值，那么这个值会作为下次调用 next() 方法返回的 value 值。\n\n### 示例\n#### 简单示例\n```js\nfunction* idMaker(){\n  var index = 0;\n  while(index<3)\n    yield index++;\n}\n\nvar gen = idMaker();\n\nconsole.log(gen.next().value); // 0\nconsole.log(gen.next().value); // 1\nconsole.log(gen.next().value); // 2\nconsole.log(gen.next().value); // undefined\n// ...\n```\n#### yield*的示例\n```js\nfunction* anotherGenerator(i) {\n  yield i + 1;\n  yield i + 2;\n  yield i + 3;\n}\n\nfunction* generator(i){\n  yield i;\n  yield* anotherGenerator(i);\n  yield i + 10;\n}\n\nvar gen = generator(10);\n\nconsole.log(gen.next().value); // 10\nconsole.log(gen.next().value); // 11\nconsole.log(gen.next().value); // 12\nconsole.log(gen.next().value); // 13\nconsole.log(gen.next().value); // 20\n```\n#### 传递参数\n```js\nfunction* logGenerator() {\n  console.log(yield);//首次执行的中断处\n  console.log(yield);\n  console.log(yield);\n}\n\nvar gen = logGenerator();\n\n// 首次调用 next() 会执行到第一个 yield 语句处\ngen.next(); \ngen.next('pretzel'); // pretzel\ngen.next('california'); // california\ngen.next('mayonnaise'); // mayonnaise\n```\n#### 显式返回\n```js\nfunction* yieldAndReturn() {\n  yield \"Y\";\n  return \"R\";//显式返回处\n  yield \"unreachable\";\n}\n\nvar gen = yieldAndReturn()\nconsole.log(gen.next()); // { value: \"Y\", done: false }\nconsole.log(gen.next()); // { value: \"R\", done: true }\nconsole.log(gen.next()); // { value: undefined, done: true }\n```\n#### 生成器函数不能当构造器使用\n```js\nfunction* f() {}\nvar obj = new f; // throws \"TypeError: f is not a constructor\"\n```\n##  yield* expression 用于委托给另一个generator 或可迭代对象。\n### 语法\nyield* [[expression]];\n\n### 描述\nyield * 表达式迭代操作数，并yield 它返回的每个值。\n\nyield * 表达式本身的值是当迭代器关闭时返回的值(即，当done时为true)。\n\n### 示例\n例子：委托给其他生成器\n\n以下代码中，g1() yield 出去的每个值都会在 g2() 的 next() 方法中返回，就像那些 yield 语句是写在 g2() 里一样。\n```js\nfunction* g1() {\n  yield 2;\n  yield 3;\n  yield 4;\n}\n\nfunction* g2() {\n  yield 1;\n  yield* g1();\n  yield 5;\n}\n\nvar iterator = g2();\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: 4, done: false }\nconsole.log(iterator.next()); // { value: 5, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n## 参考：\n- [mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript)\n- [迭代器和生成器](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators)","slug":"generatorAndIterator","published":1,"updated":"2017-07-13T16:44:13.163Z","_id":"cj52nth7p0023e0mwhiph4i5z","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"生成器对象\"><a href=\"#生成器对象\" class=\"headerlink\" title=\"生成器对象\"></a>生成器对象</h2><p>生成器对象是由一个 generator function 返回的,并且它符合可迭代协议和迭代器协议。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> g = gen();</div></pre></td></tr></table></figure>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><ul>\n<li><p>Generator.prototype.next() </p>\n<p>返回一个由 yield表达式生成的值。</p>\n</li>\n<li><p>Generator.prototype.return()</p>\n<p>返回给定的值并结束生成器。</p>\n</li>\n<li>Generator.prototype.throw()<br>向生成器抛出一个错误。</li>\n</ul>\n<h2 id=\"function\"><a href=\"#function\" class=\"headerlink\" title=\"function *\"></a>function *</h2><p>function* 这种声明方式(function关键字后跟一个星号）会定义一个生成器函数 (generator function)，它返回一个  Generator  对象。</p>\n<h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>function* name([param[, param[, … param]]]) { statements }</p>\n<h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>生成器函数在执行时能中途退出，后面又能重新进入继续执行。而且在函数内定义的变量的状态都会保留，不受中途退出的影响。</p>\n<p>调用一个生成器函数并不会马上执行它里面的语句，而是返回一个这个生成器的迭代器（iterator）对象。当这个迭代器的 next() 方法被首次（后续）调用时，其内的语句会执行到第一个（后续）出现yield表达式的位置为止，该表达式定义了迭代器要返回的值，或者被 yield*委派至另一个生成器函数。next()方法返回一个对象，这个对象包含两个属性：value 和 done，value 属性表示本次 yield 表达式的返回值，done 属性为布尔类型，表示生成器是否已经产出了它最后的值，即生成器函数是否已经返回。</p>\n<p>调用 next() 方法时，如果传入了参数，那么这个参数会取代生成器函数中对应执行位置的 yield 表达式（整个表达式被这个值替换）</p>\n<p>当在生成器函数中显式 return 时，会导致生成器立即变为完成状态，即调用 next() 方法返回的对象的 done 为 true。如果 return 了一个值，那么这个值会作为下次调用 next() 方法返回的 value 值。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><h4 id=\"简单示例\"><a href=\"#简单示例\" class=\"headerlink\" title=\"简单示例\"></a>简单示例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">idMaker</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> index = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">while</span>(index&lt;<span class=\"number\">3</span>)</div><div class=\"line\">    <span class=\"keyword\">yield</span> index++;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> gen = idMaker();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// 0</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// undefined</span></div><div class=\"line\"><span class=\"comment\">// ...</span></div></pre></td></tr></table></figure>\n<h4 id=\"yield-的示例\"><a href=\"#yield-的示例\" class=\"headerlink\" title=\"yield*的示例\"></a>yield*的示例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">anotherGenerator</span>(<span class=\"params\">i</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> i + <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> i + <span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> i + <span class=\"number\">3</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">generator</span>(<span class=\"params\">i</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> i;</div><div class=\"line\">  <span class=\"keyword\">yield</span>* anotherGenerator(i);</div><div class=\"line\">  <span class=\"keyword\">yield</span> i + <span class=\"number\">10</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> gen = generator(<span class=\"number\">10</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// 10</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// 11</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// 12</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// 13</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// 20</span></div></pre></td></tr></table></figure>\n<h4 id=\"传递参数\"><a href=\"#传递参数\" class=\"headerlink\" title=\"传递参数\"></a>传递参数</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">logGenerator</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">yield</span>);<span class=\"comment\">//首次执行的中断处</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">yield</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">yield</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> gen = logGenerator();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 首次调用 next() 会执行到第一个 yield 语句处</span></div><div class=\"line\">gen.next(); </div><div class=\"line\">gen.next(<span class=\"string\">'pretzel'</span>); <span class=\"comment\">// pretzel</span></div><div class=\"line\">gen.next(<span class=\"string\">'california'</span>); <span class=\"comment\">// california</span></div><div class=\"line\">gen.next(<span class=\"string\">'mayonnaise'</span>); <span class=\"comment\">// mayonnaise</span></div></pre></td></tr></table></figure>\n<h4 id=\"显式返回\"><a href=\"#显式返回\" class=\"headerlink\" title=\"显式返回\"></a>显式返回</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">yieldAndReturn</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"Y\"</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"R\"</span>;<span class=\"comment\">//显式返回处</span></div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"unreachable\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> gen = yieldAndReturn()</div><div class=\"line\"><span class=\"built_in\">console</span>.log(gen.next()); <span class=\"comment\">// &#123; value: \"Y\", done: false &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(gen.next()); <span class=\"comment\">// &#123; value: \"R\", done: true &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(gen.next()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure>\n<h4 id=\"生成器函数不能当构造器使用\"><a href=\"#生成器函数不能当构造器使用\" class=\"headerlink\" title=\"生成器函数不能当构造器使用\"></a>生成器函数不能当构造器使用</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> f; <span class=\"comment\">// throws \"TypeError: f is not a constructor\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"yield-expression-用于委托给另一个generator-或可迭代对象。\"><a href=\"#yield-expression-用于委托给另一个generator-或可迭代对象。\" class=\"headerlink\" title=\"yield* expression 用于委托给另一个generator 或可迭代对象。\"></a>yield* expression 用于委托给另一个generator 或可迭代对象。</h2><h3 id=\"语法-2\"><a href=\"#语法-2\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>yield* [[expression]];</p>\n<h3 id=\"描述-1\"><a href=\"#描述-1\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>yield * 表达式迭代操作数，并yield 它返回的每个值。</p>\n<p>yield * 表达式本身的值是当迭代器关闭时返回的值(即，当done时为true)。</p>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>例子：委托给其他生成器</p>\n<p>以下代码中，g1() yield 出去的每个值都会在 g2() 的 next() 方法中返回，就像那些 yield 语句是写在 g2() 里一样。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g1</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">4</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g2</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span>* g1();</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">5</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> iterator = g2();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 4, done: false &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 5, done: false &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\" target=\"_blank\" rel=\"external\">mdn</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators\" target=\"_blank\" rel=\"external\">迭代器和生成器</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"生成器对象\"><a href=\"#生成器对象\" class=\"headerlink\" title=\"生成器对象\"></a>生成器对象</h2><p>生成器对象是由一个 generator function 返回的,并且它符合可迭代协议和迭代器协议。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> g = gen();</div></pre></td></tr></table></figure>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><ul>\n<li><p>Generator.prototype.next() </p>\n<p>返回一个由 yield表达式生成的值。</p>\n</li>\n<li><p>Generator.prototype.return()</p>\n<p>返回给定的值并结束生成器。</p>\n</li>\n<li>Generator.prototype.throw()<br>向生成器抛出一个错误。</li>\n</ul>\n<h2 id=\"function\"><a href=\"#function\" class=\"headerlink\" title=\"function *\"></a>function *</h2><p>function* 这种声明方式(function关键字后跟一个星号）会定义一个生成器函数 (generator function)，它返回一个  Generator  对象。</p>\n<h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>function* name([param[, param[, … param]]]) { statements }</p>\n<h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>生成器函数在执行时能中途退出，后面又能重新进入继续执行。而且在函数内定义的变量的状态都会保留，不受中途退出的影响。</p>\n<p>调用一个生成器函数并不会马上执行它里面的语句，而是返回一个这个生成器的迭代器（iterator）对象。当这个迭代器的 next() 方法被首次（后续）调用时，其内的语句会执行到第一个（后续）出现yield表达式的位置为止，该表达式定义了迭代器要返回的值，或者被 yield*委派至另一个生成器函数。next()方法返回一个对象，这个对象包含两个属性：value 和 done，value 属性表示本次 yield 表达式的返回值，done 属性为布尔类型，表示生成器是否已经产出了它最后的值，即生成器函数是否已经返回。</p>\n<p>调用 next() 方法时，如果传入了参数，那么这个参数会取代生成器函数中对应执行位置的 yield 表达式（整个表达式被这个值替换）</p>\n<p>当在生成器函数中显式 return 时，会导致生成器立即变为完成状态，即调用 next() 方法返回的对象的 done 为 true。如果 return 了一个值，那么这个值会作为下次调用 next() 方法返回的 value 值。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><h4 id=\"简单示例\"><a href=\"#简单示例\" class=\"headerlink\" title=\"简单示例\"></a>简单示例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">idMaker</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> index = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">while</span>(index&lt;<span class=\"number\">3</span>)</div><div class=\"line\">    <span class=\"keyword\">yield</span> index++;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> gen = idMaker();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// 0</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// 2</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// undefined</span></div><div class=\"line\"><span class=\"comment\">// ...</span></div></pre></td></tr></table></figure>\n<h4 id=\"yield-的示例\"><a href=\"#yield-的示例\" class=\"headerlink\" title=\"yield*的示例\"></a>yield*的示例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">anotherGenerator</span>(<span class=\"params\">i</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> i + <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> i + <span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> i + <span class=\"number\">3</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">generator</span>(<span class=\"params\">i</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> i;</div><div class=\"line\">  <span class=\"keyword\">yield</span>* anotherGenerator(i);</div><div class=\"line\">  <span class=\"keyword\">yield</span> i + <span class=\"number\">10</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> gen = generator(<span class=\"number\">10</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// 10</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// 11</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// 12</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// 13</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(gen.next().value); <span class=\"comment\">// 20</span></div></pre></td></tr></table></figure>\n<h4 id=\"传递参数\"><a href=\"#传递参数\" class=\"headerlink\" title=\"传递参数\"></a>传递参数</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">logGenerator</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">yield</span>);<span class=\"comment\">//首次执行的中断处</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">yield</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">yield</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> gen = logGenerator();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 首次调用 next() 会执行到第一个 yield 语句处</span></div><div class=\"line\">gen.next(); </div><div class=\"line\">gen.next(<span class=\"string\">'pretzel'</span>); <span class=\"comment\">// pretzel</span></div><div class=\"line\">gen.next(<span class=\"string\">'california'</span>); <span class=\"comment\">// california</span></div><div class=\"line\">gen.next(<span class=\"string\">'mayonnaise'</span>); <span class=\"comment\">// mayonnaise</span></div></pre></td></tr></table></figure>\n<h4 id=\"显式返回\"><a href=\"#显式返回\" class=\"headerlink\" title=\"显式返回\"></a>显式返回</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">yieldAndReturn</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"Y\"</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"R\"</span>;<span class=\"comment\">//显式返回处</span></div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">\"unreachable\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> gen = yieldAndReturn()</div><div class=\"line\"><span class=\"built_in\">console</span>.log(gen.next()); <span class=\"comment\">// &#123; value: \"Y\", done: false &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(gen.next()); <span class=\"comment\">// &#123; value: \"R\", done: true &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(gen.next()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure>\n<h4 id=\"生成器函数不能当构造器使用\"><a href=\"#生成器函数不能当构造器使用\" class=\"headerlink\" title=\"生成器函数不能当构造器使用\"></a>生成器函数不能当构造器使用</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> f; <span class=\"comment\">// throws \"TypeError: f is not a constructor\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"yield-expression-用于委托给另一个generator-或可迭代对象。\"><a href=\"#yield-expression-用于委托给另一个generator-或可迭代对象。\" class=\"headerlink\" title=\"yield* expression 用于委托给另一个generator 或可迭代对象。\"></a>yield* expression 用于委托给另一个generator 或可迭代对象。</h2><h3 id=\"语法-2\"><a href=\"#语法-2\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>yield* [[expression]];</p>\n<h3 id=\"描述-1\"><a href=\"#描述-1\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>yield * 表达式迭代操作数，并yield 它返回的每个值。</p>\n<p>yield * 表达式本身的值是当迭代器关闭时返回的值(即，当done时为true)。</p>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>例子：委托给其他生成器</p>\n<p>以下代码中，g1() yield 出去的每个值都会在 g2() 的 next() 方法中返回，就像那些 yield 语句是写在 g2() 里一样。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g1</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">4</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g2</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span>* g1();</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">5</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> iterator = g2();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 4, done: false &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 5, done: false &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\" target=\"_blank\" rel=\"external\">mdn</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators\" target=\"_blank\" rel=\"external\">迭代器和生成器</a></li>\n</ul>\n"},{"title":"js对象属性判断","date":"2017-07-09T05:08:27.000Z","_content":"## [constructor](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n所有对象都会从它的原型上继承一个 constructor 属性 ,返回一个指向创建了该对象原型的函数引用\n```js### 语法\n\nobject instanceof constructor\nfunction Tree(name) {\n   this.name = name;\n}\n\nvar myTree = new Tree(\"Redwood\");\nconsole.log(myTree.constructor ) // ===> function Tree(name) {this.name = name};\n```\n---\n## [isPrototypeOf](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf) \n### 语法\nprototypeObj.isPrototypeOf(object)\n### 作用\n用于测试一个对象是否**存在**于另一个对象的原型链上。\n\n当需要判断对象的后代是否在特定原型链上，例如，以保证一定的方法或属性将存在该对象上，这时候就需要用到 instanceof。\n\n## [instanceof](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof)\n### 语法\nobject instanceof constructor\n> Object.prototype.constructor 特定的函数，用于创建一个对象的原型。\n- instanof 是用来检测一个对象的原型链是否存在参数Oject的原型链上，js中的继承是基于原型链继承，\n- 类似的 Object.getPrototypeOf(child) === parent.protorype返回true\n- 相对比 Object.getPrototypeOf(child) === grandparent.protorype返回false\n- child instanceof grandparernt返回true\n\n### 作用\ninstanceof 运算符用来测试 对象(object) 在其原型链(__proto__) 中是否存在构造函数(constructor) 的 prototype 属性。\n\n- \\_\\_proto\\_\\_ 是每个 **对象** 的的属性 \n- prototype 是每个 **函数** 的属性, Object构造器生成的对象没有prototype属性，Object构造器本身就是一个Function\n- [Object.prototype 属性表示 Object 的原型对象。](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype)\n---\n\n```js\nfunction A(a){\n  this.varA = a;\n}\n\nA.prototype = {\n  varA : null,\n  doSomething : function(){\n    // ...\n  }\n}\n\nfunction B(a, b){\n  A.call(this, a);\n  this.varB = b;\n}\nB.prototype = Object.create(A.prototype, {\n  varB : {\n    value: null, \n    enumerable: true, \n    configurable: true, \n    writable: true \n  },\n  doSomething : { \n    value: function(){ // override\n      A.prototype.doSomething.apply(this, arguments); // call super\n      // ...\n    },\n    enumerable: true,\n    configurable: true, \n    writable: true\n  }\n});\n\nvar b = new B();\nb.doSomething()\n\nb instanceOf B // ===>true\nb instanceOf A // ===>true\nObject.getPrototypeOf(b) === B.prototype // ===> true\nObject.getPrototypeOf(b) === A.prototype // ===> false\n```\n另外对于A B的两个函数对象，B继承A\n参考： [继承与原型链](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)\n\n```js\nB instanceof A // ===> false 是继承关系不是实例构造\nObject.getPrototypeOf(B.prototype) === A.prototype // ===> true B函数的prototype的原型是A函数的prototype,以此来实现js的原型继承\n```\n---\n\n\n## Object.prototype.toString.call\n\n```js\nvar myObj = {}\nvar myArr = []\nvar myNumber = 1\nvar myStr = 'a'\n\nObject.prototype.toString.call(myObj) // ===> '[object Object]' \nObject.prototype.toString.call(myArr) // ===> '[object Array]' \nObject.prototype.toString.call(myNumber) // ===> '[object Number]'\nObject.prototype.toString.call(myStr) // ===> '[object String]'\nObject.prototype.toString.call(undefined) // ===> '[object undefined]'\nObject.prototype.toString.call(null) // ===> '[object null]'\nvar a = function () {\n  this.nimei = 'nimie'\n  this.say = function () {\n    console.log('nimei')\n  }\n}\nvar b ;\nb. \nb.say()\n\n```\n\n---\n\n## typeof\n```js\nvar myArr = []\nvar myNumber = 1\nvar myStr = 'a'\nconsole.log(typeof myObj)  // ===> 'object'\nconsole.log(typeof myArr)  // ===> 'object'\nconsole.log(typeof myNumber)  // ===> 'number'\nconsole.log(typeof myStr)  // ===> 'string'\nconsole.log(typeof undefined)  // ===> 'undefined'\nconsole.log(typeof null)  // ===> 'object'\n```\n\n**so, 相对比typeof ,Object.prototype.toString.call 来判断会对象会更加的准确，在使用typeof Array 和 typeof null 结果与 typeof Ojbect 一样是 'object'**\n\n---\n\n## Array.isArray() \n用于确定传递的值是否是一个 Array\n\n## Number.isNan() \n用于确定传递的值是否是Nan\n\n## 参考：\n- [mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript)\n- [JavaScript判断对象的类型](http://www.cnblogs.com/zhenchaoni/p/JavaScript_Determine_Types.html)","source":"_posts/instanceTypeofContructor.md","raw":"---\ntitle: js对象属性判断\ndate: 2017-07-09 13:08:27\ncategories: [javascript, MDN]\ntags: [js对象属性判断]\n---\n## [constructor](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\n所有对象都会从它的原型上继承一个 constructor 属性 ,返回一个指向创建了该对象原型的函数引用\n```js### 语法\n\nobject instanceof constructor\nfunction Tree(name) {\n   this.name = name;\n}\n\nvar myTree = new Tree(\"Redwood\");\nconsole.log(myTree.constructor ) // ===> function Tree(name) {this.name = name};\n```\n---\n## [isPrototypeOf](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf) \n### 语法\nprototypeObj.isPrototypeOf(object)\n### 作用\n用于测试一个对象是否**存在**于另一个对象的原型链上。\n\n当需要判断对象的后代是否在特定原型链上，例如，以保证一定的方法或属性将存在该对象上，这时候就需要用到 instanceof。\n\n## [instanceof](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof)\n### 语法\nobject instanceof constructor\n> Object.prototype.constructor 特定的函数，用于创建一个对象的原型。\n- instanof 是用来检测一个对象的原型链是否存在参数Oject的原型链上，js中的继承是基于原型链继承，\n- 类似的 Object.getPrototypeOf(child) === parent.protorype返回true\n- 相对比 Object.getPrototypeOf(child) === grandparent.protorype返回false\n- child instanceof grandparernt返回true\n\n### 作用\ninstanceof 运算符用来测试 对象(object) 在其原型链(__proto__) 中是否存在构造函数(constructor) 的 prototype 属性。\n\n- \\_\\_proto\\_\\_ 是每个 **对象** 的的属性 \n- prototype 是每个 **函数** 的属性, Object构造器生成的对象没有prototype属性，Object构造器本身就是一个Function\n- [Object.prototype 属性表示 Object 的原型对象。](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype)\n---\n\n```js\nfunction A(a){\n  this.varA = a;\n}\n\nA.prototype = {\n  varA : null,\n  doSomething : function(){\n    // ...\n  }\n}\n\nfunction B(a, b){\n  A.call(this, a);\n  this.varB = b;\n}\nB.prototype = Object.create(A.prototype, {\n  varB : {\n    value: null, \n    enumerable: true, \n    configurable: true, \n    writable: true \n  },\n  doSomething : { \n    value: function(){ // override\n      A.prototype.doSomething.apply(this, arguments); // call super\n      // ...\n    },\n    enumerable: true,\n    configurable: true, \n    writable: true\n  }\n});\n\nvar b = new B();\nb.doSomething()\n\nb instanceOf B // ===>true\nb instanceOf A // ===>true\nObject.getPrototypeOf(b) === B.prototype // ===> true\nObject.getPrototypeOf(b) === A.prototype // ===> false\n```\n另外对于A B的两个函数对象，B继承A\n参考： [继承与原型链](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)\n\n```js\nB instanceof A // ===> false 是继承关系不是实例构造\nObject.getPrototypeOf(B.prototype) === A.prototype // ===> true B函数的prototype的原型是A函数的prototype,以此来实现js的原型继承\n```\n---\n\n\n## Object.prototype.toString.call\n\n```js\nvar myObj = {}\nvar myArr = []\nvar myNumber = 1\nvar myStr = 'a'\n\nObject.prototype.toString.call(myObj) // ===> '[object Object]' \nObject.prototype.toString.call(myArr) // ===> '[object Array]' \nObject.prototype.toString.call(myNumber) // ===> '[object Number]'\nObject.prototype.toString.call(myStr) // ===> '[object String]'\nObject.prototype.toString.call(undefined) // ===> '[object undefined]'\nObject.prototype.toString.call(null) // ===> '[object null]'\nvar a = function () {\n  this.nimei = 'nimie'\n  this.say = function () {\n    console.log('nimei')\n  }\n}\nvar b ;\nb. \nb.say()\n\n```\n\n---\n\n## typeof\n```js\nvar myArr = []\nvar myNumber = 1\nvar myStr = 'a'\nconsole.log(typeof myObj)  // ===> 'object'\nconsole.log(typeof myArr)  // ===> 'object'\nconsole.log(typeof myNumber)  // ===> 'number'\nconsole.log(typeof myStr)  // ===> 'string'\nconsole.log(typeof undefined)  // ===> 'undefined'\nconsole.log(typeof null)  // ===> 'object'\n```\n\n**so, 相对比typeof ,Object.prototype.toString.call 来判断会对象会更加的准确，在使用typeof Array 和 typeof null 结果与 typeof Ojbect 一样是 'object'**\n\n---\n\n## Array.isArray() \n用于确定传递的值是否是一个 Array\n\n## Number.isNan() \n用于确定传递的值是否是Nan\n\n## 参考：\n- [mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript)\n- [JavaScript判断对象的类型](http://www.cnblogs.com/zhenchaoni/p/JavaScript_Determine_Types.html)","slug":"instanceTypeofContructor","published":1,"updated":"2017-07-13T13:16:09.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52nth7r0027e0mwsvnfwmsu","content":"<h2 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\" target=\"_blank\" rel=\"external\">constructor</a></h2><p>所有对象都会从它的原型上继承一个 constructor 属性 ,返回一个指向创建了该对象原型的函数引用<br><figure class=\"highlight plain\"><figcaption><span>语法</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">object instanceof constructor</div><div class=\"line\">function Tree(name) &#123;</div><div class=\"line\">   this.name = name;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var myTree = new Tree(&quot;Redwood&quot;);</div><div class=\"line\">console.log(myTree.constructor ) // ===&gt; function Tree(name) &#123;this.name = name&#125;;</div></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"isPrototypeOf-NaN\"><a href=\"#isPrototypeOf-NaN\" class=\"headerlink\" title=\"isPrototypeOf\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\" target=\"_blank\" rel=\"external\">isPrototypeOf</a></h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>prototypeObj.isPrototypeOf(object)</p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>用于测试一个对象是否<strong>存在</strong>于另一个对象的原型链上。</p>\n<p>当需要判断对象的后代是否在特定原型链上，例如，以保证一定的方法或属性将存在该对象上，这时候就需要用到 instanceof。</p>\n<h2 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof\" target=\"_blank\" rel=\"external\">instanceof</a></h2><h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>object instanceof constructor</p>\n<blockquote>\n<p>Object.prototype.constructor 特定的函数，用于创建一个对象的原型。</p>\n<ul>\n<li>instanof 是用来检测一个对象的原型链是否存在参数Oject的原型链上，js中的继承是基于原型链继承，</li>\n<li>类似的 Object.getPrototypeOf(child) === parent.protorype返回true</li>\n<li>相对比 Object.getPrototypeOf(child) === grandparent.protorype返回false</li>\n<li>child instanceof grandparernt返回true</li>\n</ul>\n</blockquote>\n<h3 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>instanceof 运算符用来测试 对象(object) 在其原型链(<strong>proto</strong>) 中是否存在构造函数(constructor) 的 prototype 属性。</p>\n<ul>\n<li>__proto__ 是每个 <strong>对象</strong> 的的属性 </li>\n<li>prototype 是每个 <strong>函数</strong> 的属性, Object构造器生成的对象没有prototype属性，Object构造器本身就是一个Function</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\" target=\"_blank\" rel=\"external\">Object.prototype 属性表示 Object 的原型对象。</a></li>\n</ul>\n<hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.varA = a;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">A.prototype = &#123;</div><div class=\"line\">  <span class=\"attr\">varA</span> : <span class=\"literal\">null</span>,</div><div class=\"line\">  <span class=\"attr\">doSomething</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\">a, b</span>)</span>&#123;</div><div class=\"line\">  A.call(<span class=\"keyword\">this</span>, a);</div><div class=\"line\">  <span class=\"keyword\">this</span>.varB = b;</div><div class=\"line\">&#125;</div><div class=\"line\">B.prototype = <span class=\"built_in\">Object</span>.create(A.prototype, &#123;</div><div class=\"line\">  <span class=\"attr\">varB</span> : &#123;</div><div class=\"line\">    <span class=\"attr\">value</span>: <span class=\"literal\">null</span>, </div><div class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>, </div><div class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>, </div><div class=\"line\">    <span class=\"attr\">writable</span>: <span class=\"literal\">true</span> </div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">doSomething</span> : &#123; </div><div class=\"line\">    <span class=\"attr\">value</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">// override</span></div><div class=\"line\">      A.prototype.doSomething.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>); <span class=\"comment\">// call super</span></div><div class=\"line\">      <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>, </div><div class=\"line\">    <span class=\"attr\">writable</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> B();</div><div class=\"line\">b.doSomething()</div><div class=\"line\"></div><div class=\"line\">b instanceOf B <span class=\"comment\">// ===&gt;true</span></div><div class=\"line\">b instanceOf A <span class=\"comment\">// ===&gt;true</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(b) === B.prototype <span class=\"comment\">// ===&gt; true</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(b) === A.prototype <span class=\"comment\">// ===&gt; false</span></div></pre></td></tr></table></figure>\n<p>另外对于A B的两个函数对象，B继承A<br>参考： <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"external\">继承与原型链</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">B <span class=\"keyword\">instanceof</span> A <span class=\"comment\">// ===&gt; false 是继承关系不是实例构造</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(B.prototype) === A.prototype <span class=\"comment\">// ===&gt; true B函数的prototype的原型是A函数的prototype,以此来实现js的原型继承</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Object-prototype-toString-call\"><a href=\"#Object-prototype-toString-call\" class=\"headerlink\" title=\"Object.prototype.toString.call\"></a>Object.prototype.toString.call</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myObj = &#123;&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> myArr = []</div><div class=\"line\"><span class=\"keyword\">var</span> myNumber = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">var</span> myStr = <span class=\"string\">'a'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(myObj) <span class=\"comment\">// ===&gt; '[object Object]' </span></div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(myArr) <span class=\"comment\">// ===&gt; '[object Array]' </span></div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(myNumber) <span class=\"comment\">// ===&gt; '[object Number]'</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(myStr) <span class=\"comment\">// ===&gt; '[object String]'</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">undefined</span>) <span class=\"comment\">// ===&gt; '[object undefined]'</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">null</span>) <span class=\"comment\">// ===&gt; '[object null]'</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.nimei = <span class=\"string\">'nimie'</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'nimei'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> b ;</div><div class=\"line\">b. </div><div class=\"line\">b.say()</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myArr = []</div><div class=\"line\"><span class=\"keyword\">var</span> myNumber = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">var</span> myStr = <span class=\"string\">'a'</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> myObj)  <span class=\"comment\">// ===&gt; 'object'</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> myArr)  <span class=\"comment\">// ===&gt; 'object'</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> myNumber)  <span class=\"comment\">// ===&gt; 'number'</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> myStr)  <span class=\"comment\">// ===&gt; 'string'</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>)  <span class=\"comment\">// ===&gt; 'undefined'</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>)  <span class=\"comment\">// ===&gt; 'object'</span></div></pre></td></tr></table></figure>\n<p><strong>so, 相对比typeof ,Object.prototype.toString.call 来判断会对象会更加的准确，在使用typeof Array 和 typeof null 结果与 typeof Ojbect 一样是 ‘object’</strong></p>\n<hr>\n<h2 id=\"Array-isArray\"><a href=\"#Array-isArray\" class=\"headerlink\" title=\"Array.isArray()\"></a>Array.isArray()</h2><p>用于确定传递的值是否是一个 Array</p>\n<h2 id=\"Number-isNan\"><a href=\"#Number-isNan\" class=\"headerlink\" title=\"Number.isNan()\"></a>Number.isNan()</h2><p>用于确定传递的值是否是Nan</p>\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\" target=\"_blank\" rel=\"external\">mdn</a></li>\n<li><a href=\"http://www.cnblogs.com/zhenchaoni/p/JavaScript_Determine_Types.html\" target=\"_blank\" rel=\"external\">JavaScript判断对象的类型</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\" target=\"_blank\" rel=\"external\">constructor</a></h2><p>所有对象都会从它的原型上继承一个 constructor 属性 ,返回一个指向创建了该对象原型的函数引用<br><figure class=\"highlight plain\"><figcaption><span>语法</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">object instanceof constructor</div><div class=\"line\">function Tree(name) &#123;</div><div class=\"line\">   this.name = name;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var myTree = new Tree(&quot;Redwood&quot;);</div><div class=\"line\">console.log(myTree.constructor ) // ===&gt; function Tree(name) &#123;this.name = name&#125;;</div></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"isPrototypeOf-NaN\"><a href=\"#isPrototypeOf-NaN\" class=\"headerlink\" title=\"isPrototypeOf\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\" target=\"_blank\" rel=\"external\">isPrototypeOf</a></h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>prototypeObj.isPrototypeOf(object)</p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>用于测试一个对象是否<strong>存在</strong>于另一个对象的原型链上。</p>\n<p>当需要判断对象的后代是否在特定原型链上，例如，以保证一定的方法或属性将存在该对象上，这时候就需要用到 instanceof。</p>\n<h2 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof\" target=\"_blank\" rel=\"external\">instanceof</a></h2><h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>object instanceof constructor</p>\n<blockquote>\n<p>Object.prototype.constructor 特定的函数，用于创建一个对象的原型。</p>\n<ul>\n<li>instanof 是用来检测一个对象的原型链是否存在参数Oject的原型链上，js中的继承是基于原型链继承，</li>\n<li>类似的 Object.getPrototypeOf(child) === parent.protorype返回true</li>\n<li>相对比 Object.getPrototypeOf(child) === grandparent.protorype返回false</li>\n<li>child instanceof grandparernt返回true</li>\n</ul>\n</blockquote>\n<h3 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>instanceof 运算符用来测试 对象(object) 在其原型链(<strong>proto</strong>) 中是否存在构造函数(constructor) 的 prototype 属性。</p>\n<ul>\n<li>__proto__ 是每个 <strong>对象</strong> 的的属性 </li>\n<li>prototype 是每个 <strong>函数</strong> 的属性, Object构造器生成的对象没有prototype属性，Object构造器本身就是一个Function</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\" target=\"_blank\" rel=\"external\">Object.prototype 属性表示 Object 的原型对象。</a></li>\n</ul>\n<hr>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.varA = a;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">A.prototype = &#123;</div><div class=\"line\">  <span class=\"attr\">varA</span> : <span class=\"literal\">null</span>,</div><div class=\"line\">  <span class=\"attr\">doSomething</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\">a, b</span>)</span>&#123;</div><div class=\"line\">  A.call(<span class=\"keyword\">this</span>, a);</div><div class=\"line\">  <span class=\"keyword\">this</span>.varB = b;</div><div class=\"line\">&#125;</div><div class=\"line\">B.prototype = <span class=\"built_in\">Object</span>.create(A.prototype, &#123;</div><div class=\"line\">  <span class=\"attr\">varB</span> : &#123;</div><div class=\"line\">    <span class=\"attr\">value</span>: <span class=\"literal\">null</span>, </div><div class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>, </div><div class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>, </div><div class=\"line\">    <span class=\"attr\">writable</span>: <span class=\"literal\">true</span> </div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">doSomething</span> : &#123; </div><div class=\"line\">    <span class=\"attr\">value</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">// override</span></div><div class=\"line\">      A.prototype.doSomething.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>); <span class=\"comment\">// call super</span></div><div class=\"line\">      <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>, </div><div class=\"line\">    <span class=\"attr\">writable</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> B();</div><div class=\"line\">b.doSomething()</div><div class=\"line\"></div><div class=\"line\">b instanceOf B <span class=\"comment\">// ===&gt;true</span></div><div class=\"line\">b instanceOf A <span class=\"comment\">// ===&gt;true</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(b) === B.prototype <span class=\"comment\">// ===&gt; true</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(b) === A.prototype <span class=\"comment\">// ===&gt; false</span></div></pre></td></tr></table></figure>\n<p>另外对于A B的两个函数对象，B继承A<br>参考： <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"external\">继承与原型链</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">B <span class=\"keyword\">instanceof</span> A <span class=\"comment\">// ===&gt; false 是继承关系不是实例构造</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(B.prototype) === A.prototype <span class=\"comment\">// ===&gt; true B函数的prototype的原型是A函数的prototype,以此来实现js的原型继承</span></div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Object-prototype-toString-call\"><a href=\"#Object-prototype-toString-call\" class=\"headerlink\" title=\"Object.prototype.toString.call\"></a>Object.prototype.toString.call</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myObj = &#123;&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> myArr = []</div><div class=\"line\"><span class=\"keyword\">var</span> myNumber = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">var</span> myStr = <span class=\"string\">'a'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(myObj) <span class=\"comment\">// ===&gt; '[object Object]' </span></div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(myArr) <span class=\"comment\">// ===&gt; '[object Array]' </span></div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(myNumber) <span class=\"comment\">// ===&gt; '[object Number]'</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(myStr) <span class=\"comment\">// ===&gt; '[object String]'</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">undefined</span>) <span class=\"comment\">// ===&gt; '[object undefined]'</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">null</span>) <span class=\"comment\">// ===&gt; '[object null]'</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.nimei = <span class=\"string\">'nimie'</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'nimei'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> b ;</div><div class=\"line\">b. </div><div class=\"line\">b.say()</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myArr = []</div><div class=\"line\"><span class=\"keyword\">var</span> myNumber = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">var</span> myStr = <span class=\"string\">'a'</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> myObj)  <span class=\"comment\">// ===&gt; 'object'</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> myArr)  <span class=\"comment\">// ===&gt; 'object'</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> myNumber)  <span class=\"comment\">// ===&gt; 'number'</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> myStr)  <span class=\"comment\">// ===&gt; 'string'</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>)  <span class=\"comment\">// ===&gt; 'undefined'</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>)  <span class=\"comment\">// ===&gt; 'object'</span></div></pre></td></tr></table></figure>\n<p><strong>so, 相对比typeof ,Object.prototype.toString.call 来判断会对象会更加的准确，在使用typeof Array 和 typeof null 结果与 typeof Ojbect 一样是 ‘object’</strong></p>\n<hr>\n<h2 id=\"Array-isArray\"><a href=\"#Array-isArray\" class=\"headerlink\" title=\"Array.isArray()\"></a>Array.isArray()</h2><p>用于确定传递的值是否是一个 Array</p>\n<h2 id=\"Number-isNan\"><a href=\"#Number-isNan\" class=\"headerlink\" title=\"Number.isNan()\"></a>Number.isNan()</h2><p>用于确定传递的值是否是Nan</p>\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\" target=\"_blank\" rel=\"external\">mdn</a></li>\n<li><a href=\"http://www.cnblogs.com/zhenchaoni/p/JavaScript_Determine_Types.html\" target=\"_blank\" rel=\"external\">JavaScript判断对象的类型</a></li>\n</ul>\n"},{"title":"prototype和__proto__(个人理解)","_content":"## 放关系图\n![prototype and __proto__](http://harttle.com/assets/img/blog/javascript/js-proto.png)\n\n## [Object](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object)构造函数，创建一个对象包装器。\n \n## [Function构造函数](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function)， 创建一个新的Function对象。 在 JavaScript 中, 每个函数实际上都是一个Function对象。\n### 引用ECMAScript的解释\n\n> [Each constructor is a function that has a property named “prototype” that is used to implement prototype-based inheritance and shared properties](https://www.ecma-international.org/ecma-262/5.1/#sec-15%EF%BC%8C_%E9%B8%A1%E5%92%8C%E8%9B%8B_%E7%9A%84%E9%97%AE%E9%A2%98%E5%B0%B1%E6%98%AF%E8%BF%99%E4%B9%88%E5%87%BA%E7%8E%B0%E5%92%8C%E8%AE%BE%E8%AE%A1%E7%9A%84%EF%BC%9A**%60Function%60%E7%BB%A7%E6%89%BF%60Function%60%E6%9C%AC%E8%BA%AB%EF%BC%8C%60Function.prototype%60%E7%BB%A7%E6%89%BF%60Object.prototype%60%E3%80%82)\n\n> 翻译： 每个构造器都是有着“prototype\"属性的函数，用于实现基于原型的继承和共享属性\n\n在javascript中， 有且只有Function构造器的prototype === \\_\\_proto\\_\\_\n ```js\n Function.ptototype === Function.__proto__ // === true\n ```\n为什么Function构造器会有这样的设计，原因是因为js没有类的机制，是通过对象的\\_\\_proto\\_\\_属性指向父类的prototype属性实现\n\n ### 引用ECMAScript的解释\n ---\n ![how_Prototypal_Inheritance works](http://i.imgur.com/cCzkv.png)\n\n> CF is a constructor (and also an object). Five objects have been created by using new expressions: cf1, cf2, cf3, cf4, and cf5. Each of these objects contains properties named q1 and q2. The dashed lines represent the implicit prototype relationship; so, for example, cf3’s prototype is CFp. The constructor, CF, has two properties itself, named P1 and P2, which are not visible to CFp, cf1, cf2, cf3, cf4, or cf5. The property named CFP1 in CFp is shared by cf1, cf2, cf3, cf4, and cf5 (but not by CF), as are any properties found in CFp’s implicit prototype chain that are not named q1, q2, or CFP1. Notice that there is no implicit prototype link between CF and CFp.\n> Unlike class-based object languages, properties can be added to objects dynamically by assigning values to them. That is, constructors are not required to name or assign values to all or any of the constructed object’s properties. In the above diagram, one could add a new shared property for cf1, cf2, cf3, cf4, and cf5 by assigning a new value to the property in CFp.\n\n翻译： \n\n> CF是一个构造（以及一个对象）。五个对象已经通过使用创建的new：表达式 CF 1，CF 2，CF 3，CF 4，和CF 5。每个对象包含一个名为性质Q1和Q2。虚线表示隐式原型关系; 因此，例如， CF 3的原型是CF p。的构造，CF，有两个属性本身，命名为P1和P2，这是不可见CF p，CF 1，CF 2，CF 3， CF 4，或CF 5。命名属性CFP1在 CF p是由共享CF 1，CF 2，CF 3， CF 4，和CF 5（而不是由CF），因为是在发现的任何属性 CF p未命名的隐式原型链Q1， Q2，或CFP1。请注意，之间不存在隐式原型链接CF和CF p。\n\n> 不像基于类的对象的语言，属性可以动态地将它们赋值被添加到对象。也就是说，构造函数不需要命名或赋值构造的对象的属性的全部或任何。另外，在上述图中，人们可以添加对新的共享属性CF 1，CF 2，CF 3， CF 4，和CF 5 通过在属性分配一个新的值CF p。\n\n---\n### 实现一个函数的声明以及在这个函数的prototype属性加一个属性\n```js\nfunction Animate (name) {\n  this.name = name \n}\nAnimate.prototype.sayName = function () {\n  console.log(this.name)\n}\nvar myAnimate = new Animate('nini')\n\n```\n因为我们在声明Animate函数时，broswer runtime 载入Function构造器，Animate.prototype有两个属性{constructor: XX，\\_\\_proto\\_\\_:xxx},\n```js\nAnimate.prototype.__proto__ === Function.prototype.__proto__  && Animate.prototype.__proto__ === Object.prototype \nAnimate.__proto__ === Function.__proto__\nanimate.__proto__ !== Animate.prototype && Animate.__proto__.__proto__ === Animate.prototype.__proto__, \nAnimate.__proto__.__proto__ === Animate.prototype.__proto__\n```\nanimate.\\_\\_proto\\_\\_ 和 animate.prototype 的原型链(\\_\\_proto\\_\\_)都指向Object.prototype\n### NOTE: 前面我们说过了Function构造器是js中唯一一个prototype属性 等于 原型链（\\_\\_proto\\_\\_)属性的对象( Function.prototype === Function.\\_\\_proto\\_\\_)\n> 为构造函数设置一个prototype属性。\n> 这个属性包含一个对象（以下简称\"prototype对象\"），所有实例对象需要共享的属性和方法，都放在这个对象里面；那些不需要共享的属性和方法，就放在构造函数里面。\n> 实例对象一旦创建，将自动引用prototype对象的属性和方法(Function.prototype === Function.\\_\\_proto\\_\\_ 的设计就是为了实现这个功能)\n> 也就是说，实例对象的属性和方法，分成两种，一种是本地的，另一种是引用的。\n\n---\n\n在例子new Animate('nini')时，一个新对象被创建。它继承自Animate.prototype\n## 实现一个简单的继承类\n\n```js\nfunction Animate (name) {\n  this.name = name \n}\nAnimate.prototype.sayName = function () {\n  console.log(this.name)\n}\n\n\nfunction Dog (name, color) {\n  Animate.call(this, name)\n  this.color = color\n}\nDog.prototype = Object.create(Animate.prototype,{  // 设置Dog.prototype的\\_\\_proto\\_\\_为animate.prototype\n  sayColor: {\n    value: function  () {\n      console.log(this.color)\n    },\n    enumerable: true,\n    configurable: true,\n    writable: true\n  }\n})\n\nvar myAnimate = new Animate('nini')\nvar myDog = new Dog('jiji', 'red');\n\nmyAnimate.sayName() // ===> 'nini'\nmyDog.sayName() // ===> 'jiji'\nmyDog.sayColor() // ===> 'red'\nDog.say() // Uncaught TypeError: Dog.say is not a function\nAnimate.say() // Uncaught TypeError: Animate.say is not a function\n\n```\n\n## 参考：\n- [mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript)","source":"_posts/prototypeAndProto.md","raw":"---\ntitle: prototype和__proto__(个人理解)\ncategories: [javascript, MDN]\ntags: [prototype和__proto__]\n---\n## 放关系图\n![prototype and __proto__](http://harttle.com/assets/img/blog/javascript/js-proto.png)\n\n## [Object](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object)构造函数，创建一个对象包装器。\n \n## [Function构造函数](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function)， 创建一个新的Function对象。 在 JavaScript 中, 每个函数实际上都是一个Function对象。\n### 引用ECMAScript的解释\n\n> [Each constructor is a function that has a property named “prototype” that is used to implement prototype-based inheritance and shared properties](https://www.ecma-international.org/ecma-262/5.1/#sec-15%EF%BC%8C_%E9%B8%A1%E5%92%8C%E8%9B%8B_%E7%9A%84%E9%97%AE%E9%A2%98%E5%B0%B1%E6%98%AF%E8%BF%99%E4%B9%88%E5%87%BA%E7%8E%B0%E5%92%8C%E8%AE%BE%E8%AE%A1%E7%9A%84%EF%BC%9A**%60Function%60%E7%BB%A7%E6%89%BF%60Function%60%E6%9C%AC%E8%BA%AB%EF%BC%8C%60Function.prototype%60%E7%BB%A7%E6%89%BF%60Object.prototype%60%E3%80%82)\n\n> 翻译： 每个构造器都是有着“prototype\"属性的函数，用于实现基于原型的继承和共享属性\n\n在javascript中， 有且只有Function构造器的prototype === \\_\\_proto\\_\\_\n ```js\n Function.ptototype === Function.__proto__ // === true\n ```\n为什么Function构造器会有这样的设计，原因是因为js没有类的机制，是通过对象的\\_\\_proto\\_\\_属性指向父类的prototype属性实现\n\n ### 引用ECMAScript的解释\n ---\n ![how_Prototypal_Inheritance works](http://i.imgur.com/cCzkv.png)\n\n> CF is a constructor (and also an object). Five objects have been created by using new expressions: cf1, cf2, cf3, cf4, and cf5. Each of these objects contains properties named q1 and q2. The dashed lines represent the implicit prototype relationship; so, for example, cf3’s prototype is CFp. The constructor, CF, has two properties itself, named P1 and P2, which are not visible to CFp, cf1, cf2, cf3, cf4, or cf5. The property named CFP1 in CFp is shared by cf1, cf2, cf3, cf4, and cf5 (but not by CF), as are any properties found in CFp’s implicit prototype chain that are not named q1, q2, or CFP1. Notice that there is no implicit prototype link between CF and CFp.\n> Unlike class-based object languages, properties can be added to objects dynamically by assigning values to them. That is, constructors are not required to name or assign values to all or any of the constructed object’s properties. In the above diagram, one could add a new shared property for cf1, cf2, cf3, cf4, and cf5 by assigning a new value to the property in CFp.\n\n翻译： \n\n> CF是一个构造（以及一个对象）。五个对象已经通过使用创建的new：表达式 CF 1，CF 2，CF 3，CF 4，和CF 5。每个对象包含一个名为性质Q1和Q2。虚线表示隐式原型关系; 因此，例如， CF 3的原型是CF p。的构造，CF，有两个属性本身，命名为P1和P2，这是不可见CF p，CF 1，CF 2，CF 3， CF 4，或CF 5。命名属性CFP1在 CF p是由共享CF 1，CF 2，CF 3， CF 4，和CF 5（而不是由CF），因为是在发现的任何属性 CF p未命名的隐式原型链Q1， Q2，或CFP1。请注意，之间不存在隐式原型链接CF和CF p。\n\n> 不像基于类的对象的语言，属性可以动态地将它们赋值被添加到对象。也就是说，构造函数不需要命名或赋值构造的对象的属性的全部或任何。另外，在上述图中，人们可以添加对新的共享属性CF 1，CF 2，CF 3， CF 4，和CF 5 通过在属性分配一个新的值CF p。\n\n---\n### 实现一个函数的声明以及在这个函数的prototype属性加一个属性\n```js\nfunction Animate (name) {\n  this.name = name \n}\nAnimate.prototype.sayName = function () {\n  console.log(this.name)\n}\nvar myAnimate = new Animate('nini')\n\n```\n因为我们在声明Animate函数时，broswer runtime 载入Function构造器，Animate.prototype有两个属性{constructor: XX，\\_\\_proto\\_\\_:xxx},\n```js\nAnimate.prototype.__proto__ === Function.prototype.__proto__  && Animate.prototype.__proto__ === Object.prototype \nAnimate.__proto__ === Function.__proto__\nanimate.__proto__ !== Animate.prototype && Animate.__proto__.__proto__ === Animate.prototype.__proto__, \nAnimate.__proto__.__proto__ === Animate.prototype.__proto__\n```\nanimate.\\_\\_proto\\_\\_ 和 animate.prototype 的原型链(\\_\\_proto\\_\\_)都指向Object.prototype\n### NOTE: 前面我们说过了Function构造器是js中唯一一个prototype属性 等于 原型链（\\_\\_proto\\_\\_)属性的对象( Function.prototype === Function.\\_\\_proto\\_\\_)\n> 为构造函数设置一个prototype属性。\n> 这个属性包含一个对象（以下简称\"prototype对象\"），所有实例对象需要共享的属性和方法，都放在这个对象里面；那些不需要共享的属性和方法，就放在构造函数里面。\n> 实例对象一旦创建，将自动引用prototype对象的属性和方法(Function.prototype === Function.\\_\\_proto\\_\\_ 的设计就是为了实现这个功能)\n> 也就是说，实例对象的属性和方法，分成两种，一种是本地的，另一种是引用的。\n\n---\n\n在例子new Animate('nini')时，一个新对象被创建。它继承自Animate.prototype\n## 实现一个简单的继承类\n\n```js\nfunction Animate (name) {\n  this.name = name \n}\nAnimate.prototype.sayName = function () {\n  console.log(this.name)\n}\n\n\nfunction Dog (name, color) {\n  Animate.call(this, name)\n  this.color = color\n}\nDog.prototype = Object.create(Animate.prototype,{  // 设置Dog.prototype的\\_\\_proto\\_\\_为animate.prototype\n  sayColor: {\n    value: function  () {\n      console.log(this.color)\n    },\n    enumerable: true,\n    configurable: true,\n    writable: true\n  }\n})\n\nvar myAnimate = new Animate('nini')\nvar myDog = new Dog('jiji', 'red');\n\nmyAnimate.sayName() // ===> 'nini'\nmyDog.sayName() // ===> 'jiji'\nmyDog.sayColor() // ===> 'red'\nDog.say() // Uncaught TypeError: Dog.say is not a function\nAnimate.say() // Uncaught TypeError: Animate.say is not a function\n\n```\n\n## 参考：\n- [mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript)","slug":"prototypeAndProto","published":1,"date":"2017-07-13T08:08:04.834Z","updated":"2017-07-13T08:08:04.834Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj52nth7s002be0mw2ulkjhnj","content":"<h2 id=\"放关系图\"><a href=\"#放关系图\" class=\"headerlink\" title=\"放关系图\"></a>放关系图</h2><p><img src=\"http://harttle.com/assets/img/blog/javascript/js-proto.png\" alt=\"prototype and __proto__\"></p>\n<h2 id=\"Object构造函数，创建一个对象包装器。\"><a href=\"#Object构造函数，创建一个对象包装器。\" class=\"headerlink\" title=\"Object构造函数，创建一个对象包装器。\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\" target=\"_blank\" rel=\"external\">Object</a>构造函数，创建一个对象包装器。</h2><h2 id=\"Function构造函数，-创建一个新的Function对象。-在-JavaScript-中-每个函数实际上都是一个Function对象。\"><a href=\"#Function构造函数，-创建一个新的Function对象。-在-JavaScript-中-每个函数实际上都是一个Function对象。\" class=\"headerlink\" title=\"Function构造函数， 创建一个新的Function对象。 在 JavaScript 中, 每个函数实际上都是一个Function对象。\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function\" target=\"_blank\" rel=\"external\">Function构造函数</a>， 创建一个新的Function对象。 在 JavaScript 中, 每个函数实际上都是一个Function对象。</h2><h3 id=\"引用ECMAScript的解释\"><a href=\"#引用ECMAScript的解释\" class=\"headerlink\" title=\"引用ECMAScript的解释\"></a>引用ECMAScript的解释</h3><blockquote>\n<p><a href=\"https://www.ecma-international.org/ecma-262/5.1/#sec-15%EF%BC%8C_%E9%B8%A1%E5%92%8C%E8%9B%8B_%E7%9A%84%E9%97%AE%E9%A2%98%E5%B0%B1%E6%98%AF%E8%BF%99%E4%B9%88%E5%87%BA%E7%8E%B0%E5%92%8C%E8%AE%BE%E8%AE%A1%E7%9A%84%EF%BC%9A**%60Function%60%E7%BB%A7%E6%89%BF%60Function%60%E6%9C%AC%E8%BA%AB%EF%BC%8C%60Function.prototype%60%E7%BB%A7%E6%89%BF%60Object.prototype%60%E3%80%82\" target=\"_blank\" rel=\"external\">Each constructor is a function that has a property named “prototype” that is used to implement prototype-based inheritance and shared properties</a></p>\n<p>翻译： 每个构造器都是有着“prototype”属性的函数，用于实现基于原型的继承和共享属性</p>\n</blockquote>\n<p>在javascript中， 有且只有Function构造器的prototype === __proto__<br> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Function</span>.ptototype === <span class=\"built_in\">Function</span>.__proto__ <span class=\"comment\">// === true</span></div></pre></td></tr></table></figure></p>\n<p>为什么Function构造器会有这样的设计，原因是因为js没有类的机制，是通过对象的__proto__属性指向父类的prototype属性实现</p>\n<h3 id=\"引用ECMAScript的解释-1\"><a href=\"#引用ECMAScript的解释-1\" class=\"headerlink\" title=\"引用ECMAScript的解释\"></a>引用ECMAScript的解释</h3><hr>\n<p> <img src=\"http://i.imgur.com/cCzkv.png\" alt=\"how_Prototypal_Inheritance works\"></p>\n<blockquote>\n<p>CF is a constructor (and also an object). Five objects have been created by using new expressions: cf1, cf2, cf3, cf4, and cf5. Each of these objects contains properties named q1 and q2. The dashed lines represent the implicit prototype relationship; so, for example, cf3’s prototype is CFp. The constructor, CF, has two properties itself, named P1 and P2, which are not visible to CFp, cf1, cf2, cf3, cf4, or cf5. The property named CFP1 in CFp is shared by cf1, cf2, cf3, cf4, and cf5 (but not by CF), as are any properties found in CFp’s implicit prototype chain that are not named q1, q2, or CFP1. Notice that there is no implicit prototype link between CF and CFp.<br>Unlike class-based object languages, properties can be added to objects dynamically by assigning values to them. That is, constructors are not required to name or assign values to all or any of the constructed object’s properties. In the above diagram, one could add a new shared property for cf1, cf2, cf3, cf4, and cf5 by assigning a new value to the property in CFp.</p>\n</blockquote>\n<p>翻译： </p>\n<blockquote>\n<p>CF是一个构造（以及一个对象）。五个对象已经通过使用创建的new：表达式 CF 1，CF 2，CF 3，CF 4，和CF 5。每个对象包含一个名为性质Q1和Q2。虚线表示隐式原型关系; 因此，例如， CF 3的原型是CF p。的构造，CF，有两个属性本身，命名为P1和P2，这是不可见CF p，CF 1，CF 2，CF 3， CF 4，或CF 5。命名属性CFP1在 CF p是由共享CF 1，CF 2，CF 3， CF 4，和CF 5（而不是由CF），因为是在发现的任何属性 CF p未命名的隐式原型链Q1， Q2，或CFP1。请注意，之间不存在隐式原型链接CF和CF p。</p>\n<p>不像基于类的对象的语言，属性可以动态地将它们赋值被添加到对象。也就是说，构造函数不需要命名或赋值构造的对象的属性的全部或任何。另外，在上述图中，人们可以添加对新的共享属性CF 1，CF 2，CF 3， CF 4，和CF 5 通过在属性分配一个新的值CF p。</p>\n</blockquote>\n<hr>\n<h3 id=\"实现一个函数的声明以及在这个函数的prototype属性加一个属性\"><a href=\"#实现一个函数的声明以及在这个函数的prototype属性加一个属性\" class=\"headerlink\" title=\"实现一个函数的声明以及在这个函数的prototype属性加一个属性\"></a>实现一个函数的声明以及在这个函数的prototype属性加一个属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animate</span> (<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name </div><div class=\"line\">&#125;</div><div class=\"line\">Animate.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> myAnimate = <span class=\"keyword\">new</span> Animate(<span class=\"string\">'nini'</span>)</div></pre></td></tr></table></figure>\n<p>因为我们在声明Animate函数时，broswer runtime 载入Function构造器，Animate.prototype有两个属性{constructor: XX，__proto__:xxx},<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Animate.prototype.__proto__ === <span class=\"built_in\">Function</span>.prototype.__proto__  &amp;&amp; Animate.prototype.__proto__ === <span class=\"built_in\">Object</span>.prototype </div><div class=\"line\">Animate.__proto__ === <span class=\"built_in\">Function</span>.__proto__</div><div class=\"line\">animate.__proto__ !== Animate.prototype &amp;&amp; Animate.__proto__.__proto__ === Animate.prototype.__proto__, </div><div class=\"line\">Animate.__proto__.__proto__ === Animate.prototype.__proto__</div></pre></td></tr></table></figure></p>\n<p>animate.__proto__ 和 animate.prototype 的原型链(__proto__)都指向Object.prototype</p>\n<h3 id=\"NOTE-前面我们说过了Function构造器是js中唯一一个prototype属性-等于-原型链（-proto-属性的对象-Function-prototype-Function-proto\"><a href=\"#NOTE-前面我们说过了Function构造器是js中唯一一个prototype属性-等于-原型链（-proto-属性的对象-Function-prototype-Function-proto\" class=\"headerlink\" title=\"NOTE: 前面我们说过了Function构造器是js中唯一一个prototype属性 等于 原型链（__proto__)属性的对象( Function.prototype === Function.__proto__)\"></a>NOTE: 前面我们说过了Function构造器是js中唯一一个prototype属性 等于 原型链（__proto__)属性的对象( Function.prototype === Function.__proto__)</h3><blockquote>\n<p>为构造函数设置一个prototype属性。<br>这个属性包含一个对象（以下简称”prototype对象”），所有实例对象需要共享的属性和方法，都放在这个对象里面；那些不需要共享的属性和方法，就放在构造函数里面。<br>实例对象一旦创建，将自动引用prototype对象的属性和方法(Function.prototype === Function.__proto__ 的设计就是为了实现这个功能)<br>也就是说，实例对象的属性和方法，分成两种，一种是本地的，另一种是引用的。</p>\n</blockquote>\n<hr>\n<p>在例子new Animate(‘nini’)时，一个新对象被创建。它继承自Animate.prototype</p>\n<h2 id=\"实现一个简单的继承类\"><a href=\"#实现一个简单的继承类\" class=\"headerlink\" title=\"实现一个简单的继承类\"></a>实现一个简单的继承类</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animate</span> (<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name </div><div class=\"line\">&#125;</div><div class=\"line\">Animate.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span> (<span class=\"params\">name, color</span>) </span>&#123;</div><div class=\"line\">  Animate.call(<span class=\"keyword\">this</span>, name)</div><div class=\"line\">  <span class=\"keyword\">this</span>.color = color</div><div class=\"line\">&#125;</div><div class=\"line\">Dog.prototype = <span class=\"built_in\">Object</span>.create(Animate.prototype,&#123;  <span class=\"comment\">// 设置Dog.prototype的\\_\\_proto\\_\\_为animate.prototype</span></div><div class=\"line\">  sayColor: &#123;</div><div class=\"line\">    <span class=\"attr\">value</span>: <span class=\"function\"><span class=\"keyword\">function</span>  (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.color)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">writable</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> myAnimate = <span class=\"keyword\">new</span> Animate(<span class=\"string\">'nini'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> myDog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'jiji'</span>, <span class=\"string\">'red'</span>);</div><div class=\"line\"></div><div class=\"line\">myAnimate.sayName() <span class=\"comment\">// ===&gt; 'nini'</span></div><div class=\"line\">myDog.sayName() <span class=\"comment\">// ===&gt; 'jiji'</span></div><div class=\"line\">myDog.sayColor() <span class=\"comment\">// ===&gt; 'red'</span></div><div class=\"line\">Dog.say() <span class=\"comment\">// Uncaught TypeError: Dog.say is not a function</span></div><div class=\"line\">Animate.say() <span class=\"comment\">// Uncaught TypeError: Animate.say is not a function</span></div></pre></td></tr></table></figure>\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\" target=\"_blank\" rel=\"external\">mdn</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"放关系图\"><a href=\"#放关系图\" class=\"headerlink\" title=\"放关系图\"></a>放关系图</h2><p><img src=\"http://harttle.com/assets/img/blog/javascript/js-proto.png\" alt=\"prototype and __proto__\"></p>\n<h2 id=\"Object构造函数，创建一个对象包装器。\"><a href=\"#Object构造函数，创建一个对象包装器。\" class=\"headerlink\" title=\"Object构造函数，创建一个对象包装器。\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\" target=\"_blank\" rel=\"external\">Object</a>构造函数，创建一个对象包装器。</h2><h2 id=\"Function构造函数，-创建一个新的Function对象。-在-JavaScript-中-每个函数实际上都是一个Function对象。\"><a href=\"#Function构造函数，-创建一个新的Function对象。-在-JavaScript-中-每个函数实际上都是一个Function对象。\" class=\"headerlink\" title=\"Function构造函数， 创建一个新的Function对象。 在 JavaScript 中, 每个函数实际上都是一个Function对象。\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function\" target=\"_blank\" rel=\"external\">Function构造函数</a>， 创建一个新的Function对象。 在 JavaScript 中, 每个函数实际上都是一个Function对象。</h2><h3 id=\"引用ECMAScript的解释\"><a href=\"#引用ECMAScript的解释\" class=\"headerlink\" title=\"引用ECMAScript的解释\"></a>引用ECMAScript的解释</h3><blockquote>\n<p><a href=\"https://www.ecma-international.org/ecma-262/5.1/#sec-15%EF%BC%8C_%E9%B8%A1%E5%92%8C%E8%9B%8B_%E7%9A%84%E9%97%AE%E9%A2%98%E5%B0%B1%E6%98%AF%E8%BF%99%E4%B9%88%E5%87%BA%E7%8E%B0%E5%92%8C%E8%AE%BE%E8%AE%A1%E7%9A%84%EF%BC%9A**%60Function%60%E7%BB%A7%E6%89%BF%60Function%60%E6%9C%AC%E8%BA%AB%EF%BC%8C%60Function.prototype%60%E7%BB%A7%E6%89%BF%60Object.prototype%60%E3%80%82\" target=\"_blank\" rel=\"external\">Each constructor is a function that has a property named “prototype” that is used to implement prototype-based inheritance and shared properties</a></p>\n<p>翻译： 每个构造器都是有着“prototype”属性的函数，用于实现基于原型的继承和共享属性</p>\n</blockquote>\n<p>在javascript中， 有且只有Function构造器的prototype === __proto__<br> <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Function</span>.ptototype === <span class=\"built_in\">Function</span>.__proto__ <span class=\"comment\">// === true</span></div></pre></td></tr></table></figure></p>\n<p>为什么Function构造器会有这样的设计，原因是因为js没有类的机制，是通过对象的__proto__属性指向父类的prototype属性实现</p>\n<h3 id=\"引用ECMAScript的解释-1\"><a href=\"#引用ECMAScript的解释-1\" class=\"headerlink\" title=\"引用ECMAScript的解释\"></a>引用ECMAScript的解释</h3><hr>\n<p> <img src=\"http://i.imgur.com/cCzkv.png\" alt=\"how_Prototypal_Inheritance works\"></p>\n<blockquote>\n<p>CF is a constructor (and also an object). Five objects have been created by using new expressions: cf1, cf2, cf3, cf4, and cf5. Each of these objects contains properties named q1 and q2. The dashed lines represent the implicit prototype relationship; so, for example, cf3’s prototype is CFp. The constructor, CF, has two properties itself, named P1 and P2, which are not visible to CFp, cf1, cf2, cf3, cf4, or cf5. The property named CFP1 in CFp is shared by cf1, cf2, cf3, cf4, and cf5 (but not by CF), as are any properties found in CFp’s implicit prototype chain that are not named q1, q2, or CFP1. Notice that there is no implicit prototype link between CF and CFp.<br>Unlike class-based object languages, properties can be added to objects dynamically by assigning values to them. That is, constructors are not required to name or assign values to all or any of the constructed object’s properties. In the above diagram, one could add a new shared property for cf1, cf2, cf3, cf4, and cf5 by assigning a new value to the property in CFp.</p>\n</blockquote>\n<p>翻译： </p>\n<blockquote>\n<p>CF是一个构造（以及一个对象）。五个对象已经通过使用创建的new：表达式 CF 1，CF 2，CF 3，CF 4，和CF 5。每个对象包含一个名为性质Q1和Q2。虚线表示隐式原型关系; 因此，例如， CF 3的原型是CF p。的构造，CF，有两个属性本身，命名为P1和P2，这是不可见CF p，CF 1，CF 2，CF 3， CF 4，或CF 5。命名属性CFP1在 CF p是由共享CF 1，CF 2，CF 3， CF 4，和CF 5（而不是由CF），因为是在发现的任何属性 CF p未命名的隐式原型链Q1， Q2，或CFP1。请注意，之间不存在隐式原型链接CF和CF p。</p>\n<p>不像基于类的对象的语言，属性可以动态地将它们赋值被添加到对象。也就是说，构造函数不需要命名或赋值构造的对象的属性的全部或任何。另外，在上述图中，人们可以添加对新的共享属性CF 1，CF 2，CF 3， CF 4，和CF 5 通过在属性分配一个新的值CF p。</p>\n</blockquote>\n<hr>\n<h3 id=\"实现一个函数的声明以及在这个函数的prototype属性加一个属性\"><a href=\"#实现一个函数的声明以及在这个函数的prototype属性加一个属性\" class=\"headerlink\" title=\"实现一个函数的声明以及在这个函数的prototype属性加一个属性\"></a>实现一个函数的声明以及在这个函数的prototype属性加一个属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animate</span> (<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name </div><div class=\"line\">&#125;</div><div class=\"line\">Animate.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> myAnimate = <span class=\"keyword\">new</span> Animate(<span class=\"string\">'nini'</span>)</div></pre></td></tr></table></figure>\n<p>因为我们在声明Animate函数时，broswer runtime 载入Function构造器，Animate.prototype有两个属性{constructor: XX，__proto__:xxx},<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Animate.prototype.__proto__ === <span class=\"built_in\">Function</span>.prototype.__proto__  &amp;&amp; Animate.prototype.__proto__ === <span class=\"built_in\">Object</span>.prototype </div><div class=\"line\">Animate.__proto__ === <span class=\"built_in\">Function</span>.__proto__</div><div class=\"line\">animate.__proto__ !== Animate.prototype &amp;&amp; Animate.__proto__.__proto__ === Animate.prototype.__proto__, </div><div class=\"line\">Animate.__proto__.__proto__ === Animate.prototype.__proto__</div></pre></td></tr></table></figure></p>\n<p>animate.__proto__ 和 animate.prototype 的原型链(__proto__)都指向Object.prototype</p>\n<h3 id=\"NOTE-前面我们说过了Function构造器是js中唯一一个prototype属性-等于-原型链（-proto-属性的对象-Function-prototype-Function-proto\"><a href=\"#NOTE-前面我们说过了Function构造器是js中唯一一个prototype属性-等于-原型链（-proto-属性的对象-Function-prototype-Function-proto\" class=\"headerlink\" title=\"NOTE: 前面我们说过了Function构造器是js中唯一一个prototype属性 等于 原型链（__proto__)属性的对象( Function.prototype === Function.__proto__)\"></a>NOTE: 前面我们说过了Function构造器是js中唯一一个prototype属性 等于 原型链（__proto__)属性的对象( Function.prototype === Function.__proto__)</h3><blockquote>\n<p>为构造函数设置一个prototype属性。<br>这个属性包含一个对象（以下简称”prototype对象”），所有实例对象需要共享的属性和方法，都放在这个对象里面；那些不需要共享的属性和方法，就放在构造函数里面。<br>实例对象一旦创建，将自动引用prototype对象的属性和方法(Function.prototype === Function.__proto__ 的设计就是为了实现这个功能)<br>也就是说，实例对象的属性和方法，分成两种，一种是本地的，另一种是引用的。</p>\n</blockquote>\n<hr>\n<p>在例子new Animate(‘nini’)时，一个新对象被创建。它继承自Animate.prototype</p>\n<h2 id=\"实现一个简单的继承类\"><a href=\"#实现一个简单的继承类\" class=\"headerlink\" title=\"实现一个简单的继承类\"></a>实现一个简单的继承类</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animate</span> (<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name </div><div class=\"line\">&#125;</div><div class=\"line\">Animate.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span> (<span class=\"params\">name, color</span>) </span>&#123;</div><div class=\"line\">  Animate.call(<span class=\"keyword\">this</span>, name)</div><div class=\"line\">  <span class=\"keyword\">this</span>.color = color</div><div class=\"line\">&#125;</div><div class=\"line\">Dog.prototype = <span class=\"built_in\">Object</span>.create(Animate.prototype,&#123;  <span class=\"comment\">// 设置Dog.prototype的\\_\\_proto\\_\\_为animate.prototype</span></div><div class=\"line\">  sayColor: &#123;</div><div class=\"line\">    <span class=\"attr\">value</span>: <span class=\"function\"><span class=\"keyword\">function</span>  (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.color)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">writable</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> myAnimate = <span class=\"keyword\">new</span> Animate(<span class=\"string\">'nini'</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> myDog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'jiji'</span>, <span class=\"string\">'red'</span>);</div><div class=\"line\"></div><div class=\"line\">myAnimate.sayName() <span class=\"comment\">// ===&gt; 'nini'</span></div><div class=\"line\">myDog.sayName() <span class=\"comment\">// ===&gt; 'jiji'</span></div><div class=\"line\">myDog.sayColor() <span class=\"comment\">// ===&gt; 'red'</span></div><div class=\"line\">Dog.say() <span class=\"comment\">// Uncaught TypeError: Dog.say is not a function</span></div><div class=\"line\">Animate.say() <span class=\"comment\">// Uncaught TypeError: Animate.say is not a function</span></div></pre></td></tr></table></figure>\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\" target=\"_blank\" rel=\"external\">mdn</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj52nth6d0008e0mwhx2p54sh","category_id":"cj52nth670004e0mw86tjtstr","_id":"cj52nth6x000te0mwsxcslhcx"},{"post_id":"cj52nth6d0008e0mwhx2p54sh","category_id":"cj52nth6s000je0mwa2bc10q2","_id":"cj52nth70000ye0mww2408ocm"},{"post_id":"cj52nth5x0000e0mwbjwq193l","category_id":"cj52nth670004e0mw86tjtstr","_id":"cj52nth740010e0mw2tg33yla"},{"post_id":"cj52nth5x0000e0mwbjwq193l","category_id":"cj52nth6v000oe0mw5iwfijy4","_id":"cj52nth750014e0mwjkgq183w"},{"post_id":"cj52nth6z000xe0mw6zsum0w2","category_id":"cj52nth670004e0mw86tjtstr","_id":"cj52nth760017e0mwe9lw9u4w"},{"post_id":"cj52nth6z000xe0mw6zsum0w2","category_id":"cj52nth6y000ve0mwwewjjppx","_id":"cj52nth7a001ce0mwjxxvm5qa"},{"post_id":"cj52nth6g0009e0mw0tfiegpu","category_id":"cj52nth670004e0mw86tjtstr","_id":"cj52nth7b001fe0mws6izso1v"},{"post_id":"cj52nth6g0009e0mw0tfiegpu","category_id":"cj52nth6y000ve0mwwewjjppx","_id":"cj52nth7e001je0mwnabedaq5"},{"post_id":"cj52nth72000ze0mwqp9v1yfd","category_id":"cj52nth670004e0mw86tjtstr","_id":"cj52nth7h001ne0mw0r69d0iq"},{"post_id":"cj52nth72000ze0mwqp9v1yfd","category_id":"cj52nth6y000ve0mwwewjjppx","_id":"cj52nth7k001re0mwsml10tss"},{"post_id":"cj52nth750013e0mwhuso5e4o","category_id":"cj52nth670004e0mw86tjtstr","_id":"cj52nth7m001ue0mwin21wklq"},{"post_id":"cj52nth750013e0mwhuso5e4o","category_id":"cj52nth6s000je0mwa2bc10q2","_id":"cj52nth7o001ye0mwu4qfvssn"},{"post_id":"cj52nth760016e0mwoc0ocgf7","category_id":"cj52nth670004e0mw86tjtstr","_id":"cj52nth7p0021e0mw11xk81ot"},{"post_id":"cj52nth760016e0mwoc0ocgf7","category_id":"cj52nth6v000oe0mw5iwfijy4","_id":"cj52nth7q0025e0mwgehuw1xu"},{"post_id":"cj52nth640002e0mwg9bzagsx","category_id":"cj52nth670004e0mw86tjtstr","_id":"cj52nth7r0029e0mwco75d83m"},{"post_id":"cj52nth640002e0mwg9bzagsx","category_id":"cj52nth6v000oe0mw5iwfijy4","_id":"cj52nth7t002de0mwiewxflzy"},{"post_id":"cj52nth7b001ee0mwn7mcwr9a","category_id":"cj52nth670004e0mw86tjtstr","_id":"cj52nth7t002fe0mwxdh9duhm"},{"post_id":"cj52nth7b001ee0mwn7mcwr9a","category_id":"cj52nth6s000je0mwa2bc10q2","_id":"cj52nth7u002je0mwugf1kns6"},{"post_id":"cj52nth7c001he0mwbbpblhju","category_id":"cj52nth670004e0mw86tjtstr","_id":"cj52nth7u002le0mwr16u4lmw"},{"post_id":"cj52nth7c001he0mwbbpblhju","category_id":"cj52nth6s000je0mwa2bc10q2","_id":"cj52nth7v002oe0mwcifri2j9"},{"post_id":"cj52nth6n000de0mwjehcihm2","category_id":"cj52nth670004e0mw86tjtstr","_id":"cj52nth7v002qe0mwr6xkc6ig"},{"post_id":"cj52nth6n000de0mwjehcihm2","category_id":"cj52nth6v000oe0mw5iwfijy4","_id":"cj52nth7w002te0mwhrjiedlj"},{"post_id":"cj52nth7f001le0mwgididst2","category_id":"cj52nth670004e0mw86tjtstr","_id":"cj52nth7x002ve0mw1poexh4e"},{"post_id":"cj52nth7f001le0mwgididst2","category_id":"cj52nth6y000ve0mwwewjjppx","_id":"cj52nth7x002ze0mw78gs2jr5"},{"post_id":"cj52nth7h001oe0mwbbknsufd","category_id":"cj52nth670004e0mw86tjtstr","_id":"cj52nth7x0031e0mwrtox0qqo"},{"post_id":"cj52nth7h001oe0mwbbknsufd","category_id":"cj52nth6y000ve0mwwewjjppx","_id":"cj52nth7y0034e0mwigq78kj4"},{"post_id":"cj52nth6q000ge0mwx8lb8286","category_id":"cj52nth670004e0mw86tjtstr","_id":"cj52nth7y0037e0mwxq9y99q7"},{"post_id":"cj52nth6q000ge0mwx8lb8286","category_id":"cj52nth6v000oe0mw5iwfijy4","_id":"cj52nth7y003ae0mw9vfqr2cy"},{"post_id":"cj52nth7k001te0mwb1cp3l88","category_id":"cj52nth670004e0mw86tjtstr","_id":"cj52nth7z003ce0mw2k2h4g0y"},{"post_id":"cj52nth7k001te0mwb1cp3l88","category_id":"cj52nth6y000ve0mwwewjjppx","_id":"cj52nth80003fe0mwi4iz7ccz"},{"post_id":"cj52nth7m001we0mwng2isdf5","category_id":"cj52nth670004e0mw86tjtstr","_id":"cj52nth80003ie0mwnklzpiqv"},{"post_id":"cj52nth7m001we0mwng2isdf5","category_id":"cj52nth6y000ve0mwwewjjppx","_id":"cj52nth81003le0mwhnt4t99r"},{"post_id":"cj52nth6a0006e0mwhvzng9em","category_id":"cj52nth670004e0mw86tjtstr","_id":"cj52nth83003oe0mweizw2wxc"},{"post_id":"cj52nth6a0006e0mwhvzng9em","category_id":"cj52nth6s000je0mwa2bc10q2","_id":"cj52nth84003re0mw1fcfy3ii"},{"post_id":"cj52nth7o0020e0mwp6l4qsoj","category_id":"cj52nth670004e0mw86tjtstr","_id":"cj52nth84003te0mw0rf825pk"},{"post_id":"cj52nth7o0020e0mwp6l4qsoj","category_id":"cj52nth6y000ve0mwwewjjppx","_id":"cj52nth85003we0mwxw4gh2cs"},{"post_id":"cj52nth6r000ie0mwpmze6qip","category_id":"cj52nth670004e0mw86tjtstr","_id":"cj52nth85003ye0mwofu7xj8y"},{"post_id":"cj52nth6r000ie0mwpmze6qip","category_id":"cj52nth6v000oe0mw5iwfijy4","_id":"cj52nth850040e0mw9obccfli"},{"post_id":"cj52nth6u000ne0mwrvrbc5gy","category_id":"cj52nth670004e0mw86tjtstr","_id":"cj52nth860042e0mw9kumz3iw"},{"post_id":"cj52nth6u000ne0mwrvrbc5gy","category_id":"cj52nth6v000oe0mw5iwfijy4","_id":"cj52nth860044e0mw0nl9wshl"},{"post_id":"cj52nth6w000qe0mwlmmihsyj","category_id":"cj52nth670004e0mw86tjtstr","_id":"cj52nth860046e0mwupwudypr"},{"post_id":"cj52nth6w000qe0mwlmmihsyj","category_id":"cj52nth6y000ve0mwwewjjppx","_id":"cj52nth860049e0mwwj1mwcpo"},{"post_id":"cj52nth6x000se0mwlv9igxcc","category_id":"cj52nth670004e0mw86tjtstr","_id":"cj52nth87004be0mwvj7s9nvn"},{"post_id":"cj52nth6x000se0mwlv9igxcc","category_id":"cj52nth6y000ve0mwwewjjppx","_id":"cj52nth87004de0mw8ursz5is"},{"post_id":"cj52nth6m000ce0mwwbjxk9l1","category_id":"cj52nth740011e0mwz4bbeucz","_id":"cj52nth87004ge0mwxvgv1xqi"},{"post_id":"cj52nth6m000ce0mwwbjxk9l1","category_id":"cj52nth7x002xe0mwofif4cop","_id":"cj52nth88004ie0mwfjmw27ya"},{"post_id":"cj52nth780019e0mw6q37np0x","category_id":"cj52nth740011e0mwz4bbeucz","_id":"cj52nth88004ke0mw5trvl1ld"},{"post_id":"cj52nth780019e0mw6q37np0x","category_id":"cj52nth7x002xe0mwofif4cop","_id":"cj52nth88004me0mwcqhx2re9"},{"post_id":"cj52nth7p0023e0mwhiph4i5z","category_id":"cj52nth740011e0mwz4bbeucz","_id":"cj52nth88004pe0mwgaa72pqc"},{"post_id":"cj52nth7p0023e0mwhiph4i5z","category_id":"cj52nth7x002xe0mwofif4cop","_id":"cj52nth89004re0mw5kkdgccc"},{"post_id":"cj52nth7r0027e0mwsvnfwmsu","category_id":"cj52nth740011e0mwz4bbeucz","_id":"cj52nth89004ue0mw72tv9lts"},{"post_id":"cj52nth7r0027e0mwsvnfwmsu","category_id":"cj52nth7x002xe0mwofif4cop","_id":"cj52nth8a004we0mwkmefkvdh"},{"post_id":"cj52nth7s002be0mw2ulkjhnj","category_id":"cj52nth740011e0mwz4bbeucz","_id":"cj52nth8a004ye0mwca64yx2r"},{"post_id":"cj52nth7s002be0mw2ulkjhnj","category_id":"cj52nth7x002xe0mwofif4cop","_id":"cj52nth8b0051e0mwwcfflixk"},{"post_id":"cj52nth6t000me0mwwjka6l1r","category_id":"cj52nth740011e0mwz4bbeucz","_id":"cj52nth8b0053e0mw9wroyg7q"},{"post_id":"cj52nth6t000me0mwwjka6l1r","category_id":"cj52nth7x002xe0mwofif4cop","_id":"cj52nth8c0055e0mwqososhi3"}],"PostTag":[{"post_id":"cj52nth5x0000e0mwbjwq193l","tag_id":"cj52nth690005e0mwsuknldbr","_id":"cj52nth6q000he0mw60hx7xpu"},{"post_id":"cj52nth5x0000e0mwbjwq193l","tag_id":"cj52nth6i000be0mwtytx2fvg","_id":"cj52nth6t000ke0mwtqjkyabl"},{"post_id":"cj52nth640002e0mwg9bzagsx","tag_id":"cj52nth690005e0mwsuknldbr","_id":"cj52nth6x000re0mwhqcdjbi4"},{"post_id":"cj52nth640002e0mwg9bzagsx","tag_id":"cj52nth6t000le0mwg3ox3k3k","_id":"cj52nth6x000ue0mwuuax8ja2"},{"post_id":"cj52nth6a0006e0mwhvzng9em","tag_id":"cj52nth690005e0mwsuknldbr","_id":"cj52nth750015e0mwa0c7reom"},{"post_id":"cj52nth6a0006e0mwhvzng9em","tag_id":"cj52nth6y000we0mwriadcch8","_id":"cj52nth780018e0mwt6krpd2y"},{"post_id":"cj52nth6d0008e0mwhx2p54sh","tag_id":"cj52nth690005e0mwsuknldbr","_id":"cj52nth7a001de0mwpzfvi5w8"},{"post_id":"cj52nth6d0008e0mwhx2p54sh","tag_id":"cj52nth740012e0mwyvn2zh6m","_id":"cj52nth7c001ge0mwgw4eh8tn"},{"post_id":"cj52nth6g0009e0mw0tfiegpu","tag_id":"cj52nth690005e0mwsuknldbr","_id":"cj52nth7h001me0mwsnzx5jo2"},{"post_id":"cj52nth6g0009e0mw0tfiegpu","tag_id":"cj52nth79001be0mw8ozs85n5","_id":"cj52nth7i001qe0mwmb8ee5cd"},{"post_id":"cj52nth6m000ce0mwwbjxk9l1","tag_id":"cj52nth7e001ke0mw5xxd293r","_id":"cj52nth7m001ve0mw0hd3x2wd"},{"post_id":"cj52nth6n000de0mwjehcihm2","tag_id":"cj52nth690005e0mwsuknldbr","_id":"cj52nth7p0022e0mwsahgegdh"},{"post_id":"cj52nth6n000de0mwjehcihm2","tag_id":"cj52nth7k001se0mwauwl21xd","_id":"cj52nth7q0026e0mw6kddq61s"},{"post_id":"cj52nth6q000ge0mwx8lb8286","tag_id":"cj52nth690005e0mwsuknldbr","_id":"cj52nth7s002ae0mwxpckt5x9"},{"post_id":"cj52nth6q000ge0mwx8lb8286","tag_id":"cj52nth7o001ze0mwcwrmlxd8","_id":"cj52nth7t002ee0mwog9a4z25"},{"post_id":"cj52nth6r000ie0mwpmze6qip","tag_id":"cj52nth690005e0mwsuknldbr","_id":"cj52nth7u002ie0mwsrhr4ppz"},{"post_id":"cj52nth6r000ie0mwpmze6qip","tag_id":"cj52nth7r0028e0mwjqcx1823","_id":"cj52nth7u002ke0mwe9d74u1w"},{"post_id":"cj52nth6t000me0mwwjka6l1r","tag_id":"cj52nth7t002ge0mw4uph6914","_id":"cj52nth7v002pe0mw40l9ux8z"},{"post_id":"cj52nth6u000ne0mwrvrbc5gy","tag_id":"cj52nth690005e0mwsuknldbr","_id":"cj52nth7w002ue0mw19u7znvy"},{"post_id":"cj52nth6u000ne0mwrvrbc5gy","tag_id":"cj52nth7u002me0mwga1565gm","_id":"cj52nth7x002we0mwm4bruidp"},{"post_id":"cj52nth6w000qe0mwlmmihsyj","tag_id":"cj52nth690005e0mwsuknldbr","_id":"cj52nth7x0030e0mwgdh6ih12"},{"post_id":"cj52nth6w000qe0mwlmmihsyj","tag_id":"cj52nth7v002re0mwxam9bcmn","_id":"cj52nth7x0032e0mw66n89s3p"},{"post_id":"cj52nth6x000se0mwlv9igxcc","tag_id":"cj52nth690005e0mwsuknldbr","_id":"cj52nth7y0036e0mwoulxv2d7"},{"post_id":"cj52nth6x000se0mwlv9igxcc","tag_id":"cj52nth7x002ye0mwqhcsktx6","_id":"cj52nth7y0038e0mwg0nqe94d"},{"post_id":"cj52nth6z000xe0mw6zsum0w2","tag_id":"cj52nth690005e0mwsuknldbr","_id":"cj52nth7z003de0mwjiwy042x"},{"post_id":"cj52nth6z000xe0mw6zsum0w2","tag_id":"cj52nth7y0035e0mwy8mhaq6q","_id":"cj52nth80003ge0mwz484ofka"},{"post_id":"cj52nth72000ze0mwqp9v1yfd","tag_id":"cj52nth690005e0mwsuknldbr","_id":"cj52nth80003je0mwlazm5nyk"},{"post_id":"cj52nth72000ze0mwqp9v1yfd","tag_id":"cj52nth7z003be0mwl5as1vrj","_id":"cj52nth81003me0mwk4v0m1lu"},{"post_id":"cj52nth750013e0mwhuso5e4o","tag_id":"cj52nth690005e0mwsuknldbr","_id":"cj52nth83003pe0mwkjjx4t2m"},{"post_id":"cj52nth750013e0mwhuso5e4o","tag_id":"cj52nth80003he0mwi6mimqkz","_id":"cj52nth84003se0mwtbjug7ow"},{"post_id":"cj52nth760016e0mwoc0ocgf7","tag_id":"cj52nth690005e0mwsuknldbr","_id":"cj52nth85003ve0mwvt8ti56l"},{"post_id":"cj52nth760016e0mwoc0ocgf7","tag_id":"cj52nth82003ne0mwbbe5yir4","_id":"cj52nth85003xe0mwsgx2kx00"},{"post_id":"cj52nth780019e0mw6q37np0x","tag_id":"cj52nth85003ue0mwovvif23q","_id":"cj52nth860041e0mwpjkzc0y9"},{"post_id":"cj52nth7b001ee0mwn7mcwr9a","tag_id":"cj52nth690005e0mwsuknldbr","_id":"cj52nth860045e0mwhp3y5ty6"},{"post_id":"cj52nth7b001ee0mwn7mcwr9a","tag_id":"cj52nth85003ze0mwnhqw6903","_id":"cj52nth860047e0mwo9tlefcv"},{"post_id":"cj52nth7c001he0mwbbpblhju","tag_id":"cj52nth690005e0mwsuknldbr","_id":"cj52nth87004ae0mwpz6bq0u1"},{"post_id":"cj52nth7c001he0mwbbpblhju","tag_id":"cj52nth860043e0mwbn5k5fgv","_id":"cj52nth87004ce0mw2jmrsxe4"},{"post_id":"cj52nth7f001le0mwgididst2","tag_id":"cj52nth690005e0mwsuknldbr","_id":"cj52nth87004fe0mw7y9hv1ex"},{"post_id":"cj52nth7f001le0mwgididst2","tag_id":"cj52nth860048e0mww6ywe7nr","_id":"cj52nth88004he0mwjgftf5w0"},{"post_id":"cj52nth7h001oe0mwbbknsufd","tag_id":"cj52nth690005e0mwsuknldbr","_id":"cj52nth88004le0mw14ygovkq"},{"post_id":"cj52nth7h001oe0mwbbknsufd","tag_id":"cj52nth87004ee0mwi969t5ao","_id":"cj52nth88004ne0mw7vhvm28i"},{"post_id":"cj52nth7k001te0mwb1cp3l88","tag_id":"cj52nth690005e0mwsuknldbr","_id":"cj52nth89004qe0mwb2q73xwa"},{"post_id":"cj52nth7k001te0mwb1cp3l88","tag_id":"cj52nth88004je0mwz20988h6","_id":"cj52nth89004se0mw33i5ccgm"},{"post_id":"cj52nth7m001we0mwng2isdf5","tag_id":"cj52nth690005e0mwsuknldbr","_id":"cj52nth8a004ve0mwk56ptg5m"},{"post_id":"cj52nth7m001we0mwng2isdf5","tag_id":"cj52nth88004oe0mw82bsa2ht","_id":"cj52nth8a004xe0mw4yf3gv5u"},{"post_id":"cj52nth7o0020e0mwp6l4qsoj","tag_id":"cj52nth690005e0mwsuknldbr","_id":"cj52nth8b0050e0mwfj82ek83"},{"post_id":"cj52nth7o0020e0mwp6l4qsoj","tag_id":"cj52nth89004te0mwjjaiurnr","_id":"cj52nth8b0052e0mwurw2ln5q"},{"post_id":"cj52nth7p0023e0mwhiph4i5z","tag_id":"cj52nth8a004ze0mwe1aejslu","_id":"cj52nth8c0056e0mw0udd03v3"},{"post_id":"cj52nth7r0027e0mwsvnfwmsu","tag_id":"cj52nth8c0054e0mw28zahpcu","_id":"cj52nth8d0058e0mwq7p8327p"},{"post_id":"cj52nth7s002be0mw2ulkjhnj","tag_id":"cj52nth8d0057e0mw7c4y4yb8","_id":"cj52nth8d0059e0mw48odvjgh"}],"Tag":[{"name":"javasctipt","_id":"cj52nth690005e0mwsuknldbr"},{"name":"适配器模式","_id":"cj52nth6i000be0mwtytx2fvg"},{"name":"桥接模式","_id":"cj52nth6t000le0mwg3ox3k3k"},{"name":"抽象工厂模式","_id":"cj52nth6y000we0mwriadcch8"},{"name":"建造者模式","_id":"cj52nth740012e0mwyvn2zh6m"},{"name":"命令模式","_id":"cj52nth79001be0mw8ozs85n5"},{"name":"class","_id":"cj52nth7e001ke0mw5xxd293r"},{"name":"组合模式","_id":"cj52nth7k001se0mwauwl21xd"},{"name":"装饰模式","_id":"cj52nth7o001ze0mwcwrmlxd8"},{"name":"外观模式","_id":"cj52nth7r0028e0mwjqcx1823"},{"name":"解构赋值","_id":"cj52nth7t002ge0mw4uph6914"},{"name":"享元模式","_id":"cj52nth7u002me0mwga1565gm"},{"name":"解析器模式","_id":"cj52nth7v002re0mwxam9bcmn"},{"name":"迭代器","_id":"cj52nth7x002ye0mwqhcsktx6"},{"name":"观察者模式","_id":"cj52nth7y0035e0mwy8mhaq6q"},{"name":"中介模式","_id":"cj52nth7z003be0mwl5as1vrj"},{"name":"原型模式","_id":"cj52nth80003he0mwi6mimqkz"},{"name":"代理模式","_id":"cj52nth82003ne0mwbbe5yir4"},{"name":"Promise","_id":"cj52nth85003ue0mwovvif23q"},{"name":"单例模式","_id":"cj52nth85003ze0mwnhqw6903"},{"name":"简单工厂模式","_id":"cj52nth860043e0mwbn5k5fgv"},{"name":"状态模式","_id":"cj52nth860048e0mww6ywe7nr"},{"name":"策略模式","_id":"cj52nth87004ee0mwi969t5ao"},{"name":"模板方法模式","_id":"cj52nth88004je0mwz20988h6"},{"name":"访问者模式","_id":"cj52nth88004oe0mw82bsa2ht"},{"name":"责任链模式","_id":"cj52nth89004te0mwjjaiurnr"},{"name":"生成器","_id":"cj52nth8a004ze0mwe1aejslu"},{"name":"js对象属性判断","_id":"cj52nth8c0054e0mw28zahpcu"},{"name":"prototype和__proto__","_id":"cj52nth8d0057e0mw7c4y4yb8"}]}}