{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"c5ae214140b7c1233b89472502f057342979dfd2","modified":1499344360762},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1499270054058},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1499270054058},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1499270054058},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1499270054058},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1499270054058},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1499270054058},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1499270054058},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1499270054058},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1499270054058},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1499270054058},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1499270054058},{"_id":"themes/next/_config.yml","hash":"97113792989f53a67290e510ffa3e98daec8c606","modified":1499449116185},{"_id":"themes/next/bower.json","hash":"be0a430362cb73a7e3cf9ecf51a67edf8214b637","modified":1499270054058},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1499270054058},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1499270054058},{"_id":"themes/next/package.json","hash":"6b5bfec48776ddf9c03811b1ff2cb2b615eccc88","modified":1499270054062},{"_id":"source/_posts/Adapter.md","hash":"08bfcb2c10bafa5d0fd8a779f695cbea293d3de2","modified":1499493132621},{"_id":"source/_posts/AbstractFactory.md","hash":"fb37385eaff17c13d82818b76f3f6aed50bd2980","modified":1499497505562},{"_id":"source/_posts/Bridge.md","hash":"11319113ca5385d521f524f6af1ed4feabfddfe8","modified":1499497518281},{"_id":"source/_posts/Composite.md","hash":"f6a57147a7b40b0c6b335b96df394f1201a8b5ee","modified":1499497538374},{"_id":"source/_posts/Builder.md","hash":"667504e7d9ed97c8f2c4823c31b2a18acaff76f0","modified":1499497523345},{"_id":"source/_posts/Command.md","hash":"aae12ea3ab78753bee92f63078cb8f3600f7e37a","modified":1499497533861},{"_id":"source/_posts/Facade.md","hash":"23d3d380fd236b977ac8ea53363e2afdc3f19c5f","modified":1499497554287},{"_id":"source/_posts/Decorator.md","hash":"bc25cf7b35415b8da430ee46a77f959c18b6c925","modified":1499497542771},{"_id":"source/_posts/Flyweight.md","hash":"c7c977c099c268cc506cd63981de303b7c055464","modified":1499497559197},{"_id":"source/_posts/Interpreter.md","hash":"95fe4209ee03f633e8562f6f6219a377458618cc","modified":1499497566457},{"_id":"source/_posts/Iterator.md","hash":"8f6b409d571c6b360acf559dda8bff8a50d0cb03","modified":1499497570747},{"_id":"source/_posts/Mediator.md","hash":"5d15dc31c8fc4b59fa8be75fc7315ad991197886","modified":1499497576227},{"_id":"source/_posts/Prototype.md","hash":"98a26fbc3f6804ea02265b9cad569e0418ffa3fb","modified":1499499831475},{"_id":"source/_posts/Observer.md","hash":"0884c414524584242eef6a9061d0355a75b17185","modified":1499497582190},{"_id":"source/_posts/Proxy.md","hash":"7a9f4cfe0da33acae3a28eccf050ed13296bc3f1","modified":1499497590190},{"_id":"source/_posts/Singleton.md","hash":"56509b173e9230948a6a24dc72c4557fdb2f6b7e","modified":1499497599744},{"_id":"source/_posts/SimpleFactory.md","hash":"4efc87cf182f2a9083c04a1d58969185ccedc8bd","modified":1499497595187},{"_id":"source/_posts/State.md","hash":"e0ed8e99d45f01c21ec8c24aa1614ceb84138959","modified":1499498946321},{"_id":"source/_posts/Visitor.md","hash":"5637e5a5ee12662719974ee6fcfc704e9e029872","modified":1499499509870},{"_id":"source/_posts/TemplateMethod.md","hash":"28d7e8c1aee19a5bd78343a6a0210b81663d238b","modified":1499499628000},{"_id":"source/_posts/chainOfResponsibility.md","hash":"80d61a04cadd240bfd7bba9404992d6ac07843a4","modified":1499497527628},{"_id":"source/_posts/Strategy.md","hash":"0f33d819860c85b8b8e780b0ad3d621fabdbdbaf","modified":1499499236679},{"_id":"source/about/index.md","hash":"22d3dadba2f51bd8b70a3787189a921db6d0a027","modified":1499348912699},{"_id":"source/categories/index.md","hash":"d1be0ba9daa3422cb173edfa694de3fc13062749","modified":1499364216966},{"_id":"source/tags/index.md","hash":"5cb0f04bd634d6f6abd40f76c4dd38e73765bed7","modified":1499364284910},{"_id":"themes/next/.git/COMMIT_EDITMSG","hash":"b44803caabc99b4469cdac6ce61f7edd54285f88","modified":1499447154872},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1499270054055},{"_id":"themes/next/.git/ORIG_HEAD","hash":"388638b2b2f44df5ab090168cb261dfc554f0cdf","modified":1499447105955},{"_id":"themes/next/.git/FETCH_HEAD","hash":"1a8adf559166579585be1bc1755b59a469b0c491","modified":1499447172426},{"_id":"themes/next/.git/config","hash":"91b6a53b2a7f929b698734717a38d4ac169f0c1f","modified":1499270054055},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1499270043952},{"_id":"themes/next/.git/index","hash":"df06d49e1dc39c1fdb288775b52dc7451962e003","modified":1499447276906},{"_id":"themes/next/.git/packed-refs","hash":"a4625796eee26974358d0e18ae41e91965c12dca","modified":1499270054052},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1499270054058},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"fdd63b77472612337309eb93ec415a059b90756b","modified":1499270054058},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1499270054058},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1499270054058},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1499270054058},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1499270054058},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1499270054058},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1499270054058},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1499270054058},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1499270054058},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1499270054058},{"_id":"themes/next/languages/zh-Hans.yml","hash":"75ea7e8f77a73876ba40c5b7fc238346c79f8f1b","modified":1499366535066},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1499270054058},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1499270054058},{"_id":"themes/next/layout/_layout.swig","hash":"a44305f8fa7fe9c80eb50c0696a704424b589750","modified":1499270054058},{"_id":"themes/next/layout/archive.swig","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1499270054062},{"_id":"themes/next/layout/category.swig","hash":"82e7bc278559b4335ad974659104eaaf04863032","modified":1499270054062},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1499270054062},{"_id":"themes/next/layout/page.swig","hash":"baa667bc801349d5c4984c0f172973d3780400df","modified":1499270054062},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1499270054062},{"_id":"themes/next/layout/schedule.swig","hash":"f93c53f6fd5c712584f6efba6f770c30fa8a3e80","modified":1499270054062},{"_id":"themes/next/layout/tag.swig","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1499270054062},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1499270054062},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1499270054062},{"_id":"themes/next/source/404.html","hash":"1737472538c4208b2a7436eeb1ea66dd45fbe915","modified":1499350426520},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1499270054085},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1499270054085},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1499270054085},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1499270054058},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1499270043952},{"_id":"themes/next/.git/logs/HEAD","hash":"9f0d0e6b27c2850e6f9543fc671bb61ca8372c36","modified":1499447154876},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1499270043952},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1499270043952},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1499270043952},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1499270043952},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1499270043952},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1499270043952},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1499270043952},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1499270043952},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1499270043952},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1499270043952},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499270054065},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1499270054058},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1499270054058},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1499270054058},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1499270054058},{"_id":"themes/next/layout/_macro/post.swig","hash":"dae072b356b4035e5f37210cc332002d7e465842","modified":1499449355666},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1499270054058},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"501b06d28150ec97a1a59e8fe071711cde317180","modified":1499366190000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1499270054058},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1499270054058},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1499270054058},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1499270054058},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1499447105959},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1499270054058},{"_id":"themes/next/layout/_partials/head.swig","hash":"6a7eb93d8aa7d4baa472890bd666b921f449d8af","modified":1499270054058},{"_id":"themes/next/layout/_partials/header.swig","hash":"277fd0d13e87c3e38aad825a10e6b41b948b1e3c","modified":1499366432911},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1499270054058},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1499270054058},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1499270054058},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1499270054058},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1499270054058},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1499270054062},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1499270054062},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1499270054062},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1499270054062},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1499270054065},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1499270054062},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1499270054062},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1499270054062},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1499270054062},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1499270054062},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1499270054062},{"_id":"themes/next/scripts/tags/note.js","hash":"21b102db8a01c7b15ae2c0ea3ef3d4cf807ec6ed","modified":1499270054062},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1499270054065},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1499270054065},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1499270054065},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1499270054065},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1499270054065},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1499270054065},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1499270054065},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1499270054065},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1499270054065},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1499270054065},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1499270054065},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1499270054065},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1499270054065},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1499270054065},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499270054058},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499270054058},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499270054062},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499270054062},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499270054065},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499270054065},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499270054065},{"_id":"themes/next/.git/refs/heads/master","hash":"5e5b56c1e64dc88fb086bceb72f44fc209b889d6","modified":1499447154876},{"_id":"themes/next/.git/objects/05/2b0d8d9bddcdc42e38af0ea054b168cd8ad48a","hash":"8e5a734cd5cb23cd6a9712f5a3decf9c9c2e98f7","modified":1499446993422},{"_id":"themes/next/.git/objects/08/c6823b767859580bdfae0981e77a05b458fd85","hash":"a77dec570877592c997b5e3cea11559ad7bbbf75","modified":1499447100475},{"_id":"themes/next/.git/objects/0e/9d5aea8de8d4bcc9320efe91117a60561a6e72","hash":"eb6bf6296517f5167f08832b24fac358116f1e60","modified":1499447100479},{"_id":"themes/next/.git/objects/10/7ccd0597d966fbb6a7885db3d6c67a5b59beaa","hash":"1641ee6319a00397920265f96f6e1e193c1dab65","modified":1499313449523},{"_id":"themes/next/.git/objects/17/232d01dda73b2505e73b7ca4a8e4b82c7eb51a","hash":"e94c7936fb3c44b3a4a98e436202f7fe95e999cf","modified":1499446993418},{"_id":"themes/next/.git/objects/1b/845705d399d02d561ce3aaad4cc9c69a79e29a","hash":"16638c72c815d52a50c394838ec144df9a30ce73","modified":1499447105965},{"_id":"themes/next/.git/objects/1c/65af91afb209117e3761629e543b5571af56f0","hash":"965315600ffb1952a6519f6c34d4d2036cd47881","modified":1499447105000},{"_id":"themes/next/.git/objects/27/9dba3cb06ac1146f57329eeafa8aa162d5689c","hash":"3b3f5cdd44c4c4183efbf791763ab5d04e1627bc","modified":1499447105965},{"_id":"themes/next/.git/objects/2a/e23fc7eb46f6e1482066b9f938df3c81df798a","hash":"92648385a05821d55c3369d013a1e1dde67b709a","modified":1499447105000},{"_id":"themes/next/.git/objects/36/4cb0f4216b79521237b759c4ee8e7c87b6e727","hash":"0975594c7e9b7ee6fb23b2e564ee5113c68c9471","modified":1499447154872},{"_id":"themes/next/.git/objects/36/4e6ce22b307df8f1651e18ea252beab018de3c","hash":"26aadf2dda9b32bacb73a434354782382799b922","modified":1499313453433},{"_id":"themes/next/.git/objects/39/4ab8c1104923397eb53339ccb9eba274964929","hash":"a13cda4f159516fceac4412c137a55bdc109d844","modified":1499447100479},{"_id":"themes/next/.git/objects/4b/16df286bc6b2832e26770806591766e7267d42","hash":"1bb113130584d8706395db240ffe1a1e588665dd","modified":1499447096529},{"_id":"themes/next/.git/objects/4b/fa6927ddd96431da5ca30b4a4a225cef9d6a3d","hash":"2a47cf7809bd78ca365949ffc0f1c19b783b43ac","modified":1499447096525},{"_id":"themes/next/.git/objects/50/8635f48ff34b041a8b765497a57cfdd8a2c63a","hash":"916ffa9e0fc20bd5c3d081b25ecee13a58b98164","modified":1499446993422},{"_id":"themes/next/.git/objects/56/3def506845b12336f655d0d7417fd64e1d4d8a","hash":"f0a795bcf975803bbfb989972103d6378c1e30c5","modified":1499446993422},{"_id":"themes/next/.git/objects/5a/5a781c81f655c77b3e7563053dee005a664cab","hash":"d650894c12d67654fd520965991d7d3ac339d311","modified":1499447096525},{"_id":"themes/next/.git/objects/5e/acff3b47725c91f4d662d9d6241fc8e19aec3b","hash":"d4c929002834058cee724cf68382adf60a9a1e5a","modified":1499447105962},{"_id":"themes/next/.git/objects/5f/f9f2c0c911af44c44a3fa4bf3f87ed213f581d","hash":"072269d8c337a63321b57854f3b9f47c3cfa0403","modified":1499447105000},{"_id":"themes/next/.git/objects/62/eb457c57203c1a73e73f68f324487742cc9316","hash":"9733b5941719659d77ce73d46266c0d62a693817","modified":1499447100479},{"_id":"themes/next/.git/objects/63/45e775c1c749752925ddc54ea895edce978be2","hash":"a761d9506a9d0fb3189ead418513a64e1dc734b5","modified":1499447096525},{"_id":"themes/next/.git/objects/74/8a2530638bfc2c943e2c262eacdd28ace18721","hash":"e8073c4190f1273fcf130dfcf7a09e56ada471c7","modified":1499446993418},{"_id":"themes/next/.git/objects/78/7225a99e13380d8187382e3e3dbb1c7a0e18c4","hash":"8c13159cf3b461394ad30fe8ff02bf05197faca2","modified":1499313449523},{"_id":"themes/next/.git/objects/7d/9e9df06e1ba0942ca7700942abc6317f3d6027","hash":"4b6e9be83e5467181d1e784affbf657fddea874c","modified":1499446993418},{"_id":"themes/next/.git/objects/89/1a40379ce4457d46224f7069e454590a6a4b0f","hash":"d7b265223b92cd906662a6fc2fd6002e6469be7d","modified":1499447096529},{"_id":"themes/next/.git/objects/89/5e52243973886d383a63c9e0c359a3412f2487","hash":"3e4adf91ddfaa14d4662d5cf6acb76b5894e2545","modified":1499446993422},{"_id":"themes/next/.git/objects/89/e2f366140ba004b3c6fcaad74e512ae9331d11","hash":"7fb9b89bd5ebf128d8ca9cf933701d5fcbd89d72","modified":1499447105000},{"_id":"themes/next/.git/objects/94/49b48a1020c5e8c3d1af165d717903bd2b6c73","hash":"484f813d3bdf06a8bb178e33c68b457cb96a99ae","modified":1499447096525},{"_id":"themes/next/.git/objects/96/ea5d3d928c54292fea6b7d57adb5477998e464","hash":"274298cf17c9250b6368c580c9ebffe3e197970a","modified":1499446993422},{"_id":"themes/next/.git/objects/97/e7e5507ab558f8ab5301f7653ea2d2dd3f4228","hash":"cfede104a6367b4454bd8e787d04fe38c275182b","modified":1499447105962},{"_id":"themes/next/.git/objects/9a/52e356270b7f5538cf50fe0b3dd7c6b07c2278","hash":"2eadcfef6af911b9a97b45f07e972a3de6535d6c","modified":1499313453433},{"_id":"themes/next/.git/objects/9a/d8338700bfa83a1bf8b4b4510226dad9e716a3","hash":"dcea3c988fb234d4fe37c5a12c87d082f708cd1b","modified":1499447105962},{"_id":"themes/next/.git/objects/9e/1e1656302dddfe338effdf18f6b804c62851d1","hash":"f1260abb1cd6c18aeaaed65b6d51ca353ea310a0","modified":1499446993422},{"_id":"themes/next/.git/objects/a7/0d88d141892cbc4faae1e0d76d691eb64b949e","hash":"0163c715aecda1c98a2a3e7df71cf1334addb3df","modified":1499446993422},{"_id":"themes/next/.git/objects/a9/b07d81cd5ea343fdccbc211c01e9ef07cab509","hash":"59ab0e51e7a1c26dd3d24db70fa65e13ee7e16e4","modified":1499447105000},{"_id":"themes/next/.git/objects/bc/0054838243846225bb102fe34505542bd30d0e","hash":"14dafaaab2662985c6c5f86ed543ba270bf37027","modified":1499447096525},{"_id":"themes/next/.git/objects/bd/62293d2651aca77d45dc8601777edead23fa2e","hash":"71eafbe75519c22301a93dbfbf19b30027ac784d","modified":1499446993418},{"_id":"themes/next/.git/objects/be/cc2edb46468e86afbe44cc5cb2f06af6f45fc1","hash":"a310a8dabdd6530f3ec663366487718431b7006d","modified":1499447105962},{"_id":"themes/next/.git/objects/bf/fa663ea16576afb4e92d9a176852ba8393ef82","hash":"afccf3c5655ac15d35b0c80ec0a15e7e06b994ae","modified":1499447105000},{"_id":"themes/next/.git/objects/ca/591414a9df3621e43d904d86769645dbad2709","hash":"26621e8d6d4b0e10d9062a195c2570eb86953376","modified":1499446993422},{"_id":"themes/next/.git/objects/cb/f8bee23e03f9fbc034ef8fb4c107ea5867826c","hash":"6204c54b3639df46817574f736fe7489f7d6bf49","modified":1499447100475},{"_id":"themes/next/.git/objects/ce/41514a2bceb1694932fab496791cf81088914f","hash":"13fdeda27ed0baba91e19f1c0df17c0ac7a7b03e","modified":1499447100479},{"_id":"themes/next/.git/objects/d1/df695b8cfed0f90cec2eb01f6d6e31364eb7c1","hash":"8244f62e593a525b8f110be0c91cf8780de569f0","modified":1499447100475},{"_id":"themes/next/.git/objects/d2/376d65de0814cbf50054dba10ba43c53ff11a2","hash":"0904606cad7b95f64d7cb7c8f559a8e7298d9024","modified":1499446993418},{"_id":"themes/next/.git/objects/d3/afc43c036e11125b62963249537109c0fcb044","hash":"514feea69f838d1a880f1019bafe90c3c2c6f270","modified":1499313453433},{"_id":"themes/next/.git/objects/db/f3e8a853d625f08bfb81f762cd08da132574f2","hash":"9d72be7446d65c9f73f8b0f793607b6140289478","modified":1499446993422},{"_id":"themes/next/.git/objects/e2/d082fad0f9b2519c5116051125fd727a5a4dcb","hash":"40346007f522afcddb627e02842f98afdb98153d","modified":1499446993418},{"_id":"themes/next/.git/objects/e5/4e4d61027e06154d90108c93cf882cb644ef5e","hash":"fbe34e6c1dc8c71518b737163e6a61c86ac2b3fa","modified":1499313453433},{"_id":"themes/next/.git/objects/e8/feb3d457b05c2917d83aa04c12f0c4c8ef2506","hash":"50d173ed11eebb9bfd84f1efeeea0b38f5681c5f","modified":1499313453433},{"_id":"themes/next/.git/objects/ea/8f6a76405b1f2a467e94c4d64839dd34d38ba2","hash":"5b63cc4742ab091f5bb7c2ed15b180d7d05355d7","modified":1499446993418},{"_id":"themes/next/.git/objects/ec/387a68f2041a3b5398e4c811b930ce02ac7d5e","hash":"b3f9a025b1cbe1886f0e8138693e63a592f80c0b","modified":1499447105962},{"_id":"themes/next/.git/objects/ee/80ecf5eff73ec774466cc8751a942d768b7fca","hash":"8df9d6249a9aaeb62a13c05bee6047b0717752f5","modified":1499447105000},{"_id":"themes/next/.git/objects/ee/b1fa5eeefe458c0161fb41328d3a98cd79fbb0","hash":"7d363b9b487a8388efe43d9353d7b96e56a0f1db","modified":1499447100479},{"_id":"themes/next/.git/objects/f0/63f96394cb888fcbb80f67c68b88b0a78e02a8","hash":"139604b95cecc7885230b6d7ae44bbd74cf3b96b","modified":1499447105962},{"_id":"themes/next/.git/objects/f4/b606100406c683d69caa086384fe878683de7b","hash":"6cdce00cae0beafa78a38ef550649c2cf8a01699","modified":1499447105000},{"_id":"themes/next/.git/objects/f7/5f740266f3bc7ddecce4f5765c95039e4a38f1","hash":"e87c524473e79160f8faef777d0675f58f0e2876","modified":1499446993418},{"_id":"themes/next/.git/objects/fa/f5c8cd380be0b1844bf1c31e5709ed57cacc7f","hash":"91e427c160b1282dd0bd319b544dfec9719c3309","modified":1499447100479},{"_id":"themes/next/.git/objects/fc/a9f633d8c9469cc87c7575879876193f4a7c6c","hash":"82d178eb42ad1de241b1377c19c705bba59db878","modified":1499447105962},{"_id":"themes/next/.git/objects/fc/df30750cd68cedf6ae5dcbb3f0b8d1d1ce8f1c","hash":"2792777c11d86a1339d2275b1298f3b9d01875f1","modified":1499447096525},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1499270054058},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1499270054058},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1499270054058},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1499270054058},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1499270054058},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1499270054058},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1499270054058},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1499270054058},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1499270054058},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1499270054058},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1499270054058},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1499270054058},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1499270054058},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1499270054058},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1499270054058},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1499270054058},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1499270054058},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1499270054058},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1499270054058},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1499270054058},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1499270054058},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1499270054058},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1499270054058},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1499270054058},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1499270054058},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1499270054058},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1499447105959},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1499447105959},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1499447105959},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1499270054062},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1499270054062},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1499270054062},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1499270054062},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1499270054062},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1499270054065},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1499270054065},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1499270054065},{"_id":"themes/next/source/css/_variables/base.styl","hash":"aaf39e490df82f74495e79e922f4ecaa6ccc4301","modified":1499446753681},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1499270054065},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1499270054065},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1499270054065},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1499270054065},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1499270054065},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1499270054065},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1499270054065},{"_id":"themes/next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1499270054065},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1499270054065},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1499270054065},{"_id":"themes/next/source/js/src/utils.js","hash":"0fcb80ec11e6df05ed1a07b9338bef2669f93a70","modified":1499270054065},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1499270054068},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1499270054068},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1499270054072},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1499270054072},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1499270054072},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1499270054072},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1499270054078},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1499270054072},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1499270054072},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1499270054072},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1499270054072},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1499270054072},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1499270054078},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1499270054078},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1499270054078},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1499270054078},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1499270054078},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1499270054078},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1499270054082},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1499270054082},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1499270054082},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1499270054078},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1499270054078},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1499270054078},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1499270054078},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1499270054078},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1499270054078},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1499270054078},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1499270054078},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1499270054078},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1499270054078},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1499270054078},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1499270054078},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1499270054078},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1499270054082},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1499270054082},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1499270054082},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1499270054085},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1499270054085},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1499270054085},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1499270054062},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1499270054072},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1499270054078},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"9f0d0e6b27c2850e6f9543fc671bb61ca8372c36","modified":1499447154876},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1499270054055},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"c3a62d5d48daf6b683b6168070542c0f648116ae","modified":1499446993428},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1499270054062},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1499270054062},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1499270054062},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1499270054062},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1499270054062},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1499270054062},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1499270054062},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1499270054062},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1499306861466},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"fc50f348d43cf50a6e30208105ae476ea509efc5","modified":1499367652145},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1499270054065},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1499270054065},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1499270054068},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1499270054068},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1499270054072},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1499270054072},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1499270054072},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1499270054072},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1499270054072},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1499270054082},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1499270054082},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1499270054072},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1499270054068},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1499270054068},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1499270054078},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1499270054078},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1499270054085},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"9ebf1d469780d5bb63a8ad4da9972f4e10b6a5d4","modified":1499270054055},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"c59044b9625dad1f04e7a0229c2c5a38102a8aaf","modified":1499446993428},{"_id":"themes/next/.git/objects/pack/pack-aa5624b188af3a542276e9e5043a6bba4eb99eed.idx","hash":"bdfb836e2c2ffaf51231b019ce747dea18840982","modified":1499270053995},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"6260f85f33ec87aaa6684c2e8dee0a6feb4df0e0","modified":1499363980710},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"468bc734f47209096588ef1a8e55e60a3b12aa63","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"dfc86d37f5b580977d82af6ef835082d09a0c499","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1499270054062},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1499447105959},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1499270054065},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1499270054065},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1499270054065},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1499270054065},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1499270054065},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1499270054068},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1499270054075},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1499270054075},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1499270054078},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1499270054072},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1499270054072},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1499270054068},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1499270054082},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1499270054078},{"_id":"themes/next/.git/objects/pack/pack-aa5624b188af3a542276e9e5043a6bba4eb99eed.pack","hash":"972d10e93cde2903d5329adb5e295e590997f67a","modified":1499447105000},{"_id":"public/atom.xml","hash":"0fd6fc58615ce6bbb80310f2eb233a1e67087889","modified":1499500844227},{"_id":"public/search.xml","hash":"9e5138501e1a177773fb5e92c13a033fe2465244","modified":1499500844310},{"_id":"public/about/index.html","hash":"969ee431da60c7585fc6f0e33103409b5c99e968","modified":1499500844355},{"_id":"public/categories/index.html","hash":"909f27a5fc168502f3b67ee191d55f8cc59c1025","modified":1499500844356},{"_id":"public/tags/index.html","hash":"c31fd85d3c6ea23fb079fb7f26c12a6fed4fefba","modified":1499500844356},{"_id":"public/2017/05/05/Mediator/index.html","hash":"c3ca439d4e36fc8cc5b08df9a948ae2d3838d0b4","modified":1499500844356},{"_id":"public/2017/05/05/Adapter/index.html","hash":"b9932a130c0cd846a22dbe2f41f3863a97803c05","modified":1499500844356},{"_id":"public/2017/05/05/Bridge/index.html","hash":"77d3407d02afb348a1d200b6f3990b4bf18a4d9c","modified":1499500844356},{"_id":"public/2017/05/05/Composite/index.html","hash":"b91f87de2212e8a5b3d4e39c838d53f533451758","modified":1499500844356},{"_id":"public/2017/05/05/Builder/index.html","hash":"77706d88e943e9077198a4d92e585ff3774dd6cf","modified":1499500844356},{"_id":"public/2017/05/05/Command/index.html","hash":"0a5c114025efb4ca9d9648e4f1a0a84b50ef16ed","modified":1499500844357},{"_id":"public/2017/05/05/Facade/index.html","hash":"32eb781068d17196b92ae6db89a990d6213b678b","modified":1499500844357},{"_id":"public/2017/05/05/Decorator/index.html","hash":"8aca4c9450ff005a82731ef51634ed59fe050225","modified":1499500844357},{"_id":"public/2017/05/05/Flyweight/index.html","hash":"de2df5477e7d1bf1b637934963a153e7bfb40dec","modified":1499500844357},{"_id":"public/2017/05/05/Interpreter/index.html","hash":"534c5e3510bb3b55af8253d639f3f81619339065","modified":1499500844357},{"_id":"public/2017/05/05/Iterator/index.html","hash":"6355bdab49975561d9984dfba2de2961023182de","modified":1499500844357},{"_id":"public/2017/05/05/AbstractFactory/index.html","hash":"3dd6251c2eb95524d51c7e32b57f93848379d843","modified":1499500844357},{"_id":"public/2017/05/05/Prototype/index.html","hash":"43b75f94c94db9f9449dc0164e813d88af39ab9b","modified":1499500844357},{"_id":"public/2017/05/05/Observer/index.html","hash":"3867401a64c1dc519b7f7c11991a519abdaa7a4b","modified":1499500844357},{"_id":"public/2017/05/05/Proxy/index.html","hash":"b8aab4c51cd14d0eb9a70c67fd81b3ee6c4fdbd3","modified":1499500844357},{"_id":"public/2017/05/05/Singleton/index.html","hash":"a5c81165287e3a731fa1ea81f855031780b82a2a","modified":1499500844357},{"_id":"public/2017/05/05/SimpleFactory/index.html","hash":"5b77cdc2eb45f76ce8f1883587eed46d73e00e71","modified":1499500844357},{"_id":"public/2017/05/05/State/index.html","hash":"bf183d5f75fbf8642c58cd925d884537fcaff987","modified":1499500844357},{"_id":"public/2017/05/05/Visitor/index.html","hash":"b0db137ed3281e7cb75bf275337a4c8105a8c9c5","modified":1499500844357},{"_id":"public/2017/05/05/TemplateMethod/index.html","hash":"2f64ef94f9f667b0acfb1c143c80858cfe00f32f","modified":1499500844357},{"_id":"public/2017/05/05/chainOfResponsibility/index.html","hash":"92511f8d2800cdf330f1634a5ac59f4ccd8b668c","modified":1499500844357},{"_id":"public/2017/05/05/Strategy/index.html","hash":"8d352ca24b5caaa4e62d7a4f77c24bf461a13559","modified":1499500844357},{"_id":"public/archives/index.html","hash":"54ad9e84855092cb2cbbbf697888bb7f9b44f102","modified":1499500844357},{"_id":"public/archives/page/2/index.html","hash":"73b9c2a239a8ec16fd70d7a46d6b4b1d099e8380","modified":1499500844357},{"_id":"public/archives/page/3/index.html","hash":"c1f508aab9dac56e389dadef943469e129caf9f7","modified":1499500844357},{"_id":"public/archives/2017/index.html","hash":"954478395cc71fecb673127a6186c69413fbdaac","modified":1499500844357},{"_id":"public/archives/2017/page/2/index.html","hash":"3cc43c62736a5300594dd84b0d4bfe4b69876df4","modified":1499500844357},{"_id":"public/archives/2017/page/3/index.html","hash":"ad98bb21e877bbf8527bec939b68f5e0572cb963","modified":1499500844357},{"_id":"public/archives/2017/05/index.html","hash":"6a693003d0990e11136b98d2bc5f076360d771b7","modified":1499500844357},{"_id":"public/archives/2017/05/page/2/index.html","hash":"c8d6aecacea60b7413f7cc77c011928cf3f82be1","modified":1499500844357},{"_id":"public/archives/2017/05/page/3/index.html","hash":"5a1121cbef1b89f9d85818c9cdf146f29a8b5e38","modified":1499500844357},{"_id":"public/categories/design-pattern/index.html","hash":"207e4e977f040b90db4b8cbf1cb9487f46621a0a","modified":1499500844358},{"_id":"public/categories/design-pattern/page/2/index.html","hash":"b24d516c1878184bd8b0eb0039a949cf1d384df9","modified":1499500844358},{"_id":"public/categories/design-pattern/page/3/index.html","hash":"791e3b31047507daa37f4582762140851d454587","modified":1499500844358},{"_id":"public/categories/design-pattern/Structural-Patterns/index.html","hash":"e3298b8ae4bdef85a714f8f34f160bc59452899c","modified":1499500844358},{"_id":"public/categories/design-pattern/Creational-Patterns/index.html","hash":"97ec3ce24aedc2a05658d5f873c456eed480b2ec","modified":1499500844358},{"_id":"public/categories/design-pattern/Behavioral-Patterns/index.html","hash":"35648aa626cbf4c81f7546c3c71b6fdda3195fe8","modified":1499500844358},{"_id":"public/index.html","hash":"c4bf7c1d702619d64945e1635cbbb799cf01b848","modified":1499500844358},{"_id":"public/page/2/index.html","hash":"9dc3dcfdf889b187b087343151947261004769f1","modified":1499500844358},{"_id":"public/page/3/index.html","hash":"b628270a71ead3e6f4751a0f37e23d8bd74e61a8","modified":1499500844358},{"_id":"public/tags/javasctipt/index.html","hash":"c28e49afd47730bf3a57253d36a400e22ceaf226","modified":1499500844358},{"_id":"public/tags/javasctipt/page/2/index.html","hash":"78fc0f22d6ed9fe06dff7b55a300c7b82913b37b","modified":1499500844358},{"_id":"public/tags/javasctipt/page/3/index.html","hash":"fe9d32f9bebe09f8594e1022824364ae98b303fc","modified":1499500844358},{"_id":"public/tags/适配器模式/index.html","hash":"a726ef1ec5700b192d05266969f911b18f2bd957","modified":1499500844358},{"_id":"public/tags/抽象工厂模式/index.html","hash":"2bc29be95a5ea52d70e6805d47d285bb9223afba","modified":1499500844358},{"_id":"public/tags/桥接模式/index.html","hash":"505c409c847e9855b9b9c398c43cfefcfeafb948","modified":1499500844358},{"_id":"public/tags/组合模式/index.html","hash":"6db532ab5c3bd5b724ab6f0f80a08ae424a16945","modified":1499500844358},{"_id":"public/tags/建造者模式/index.html","hash":"04a5f0a42d8dc61b26e557bef31fb1355ef30d60","modified":1499500844358},{"_id":"public/tags/命令模式/index.html","hash":"5e99f93287c40fababd15e600921392a0ebc133e","modified":1499500844358},{"_id":"public/tags/外观模式/index.html","hash":"ddf9c9a6dcb97303f97b2074a8c655d7a6b065d2","modified":1499500844358},{"_id":"public/tags/装饰模式/index.html","hash":"11e0c74cc5d78673afd870d3195a98a4ab255d4e","modified":1499500844358},{"_id":"public/tags/享元模式/index.html","hash":"0f8df906a708b310fef86d784f6b9b69af837b4c","modified":1499500844358},{"_id":"public/tags/解析器模式/index.html","hash":"c2f9ff8bcfc6afa68d32debe23086ecad8929ffc","modified":1499500844358},{"_id":"public/tags/迭代器/index.html","hash":"f062fa9532c080a86ba58fc8a5c45a10b2eae181","modified":1499500844358},{"_id":"public/tags/中介模式/index.html","hash":"dfb91bbc09928d5ca664c6d7fd8f52dfd1a0c50a","modified":1499500844358},{"_id":"public/tags/原型模式/index.html","hash":"35d94c769c398622269c35ab6030d5d278e85a08","modified":1499500844359},{"_id":"public/tags/观察者模式/index.html","hash":"89a6c0aa2293e008767300226daae073a1218375","modified":1499500844359},{"_id":"public/tags/代理模式/index.html","hash":"43b6cf9b6e1299981c6dffd4edcfb45b3a512955","modified":1499500844359},{"_id":"public/tags/单例模式/index.html","hash":"2c3b8469c7503fcf43718dcc836fdc1e743bf26f","modified":1499500844359},{"_id":"public/tags/简单工厂模式/index.html","hash":"4d65402ef21c16eb46cc1aa098db2285ccc5c875","modified":1499500844359},{"_id":"public/tags/状态模式/index.html","hash":"cb137d21f3c104cb90010890f180bacb099b6deb","modified":1499500844359},{"_id":"public/tags/访问者模式/index.html","hash":"c5e953840964143c76c8ed365d205e19162caebf","modified":1499500844359},{"_id":"public/tags/模板方法模式/index.html","hash":"efff16ff7a43d6b5b505b486db7b9fd7ee671201","modified":1499500844359},{"_id":"public/tags/责任链模式/index.html","hash":"66affbaf2ed8e66c01a7a515d76d62991497fc4d","modified":1499500844359},{"_id":"public/tags/策略模式/index.html","hash":"dca7263f0c884eab03e3b3090b95c13a44e8640e","modified":1499500844359},{"_id":"public/favicon.ico","hash":"c5ae214140b7c1233b89472502f057342979dfd2","modified":1499500844378},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1499500844378},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1499500844378},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1499500844378},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1499500844378},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1499500844378},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1499500844378},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1499500844378},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1499500844378},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1499500844378},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1499500844378},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1499500844378},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1499500844378},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1499500844378},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1499500844378},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1499500844378},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1499500844378},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1499500844378},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1499500844378},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1499500844378},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1499500844378},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1499500844378},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1499500844378},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1499500844378},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1499500844378},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1499500844378},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1499500844378},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1499500844378},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1499500844378},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1499500844888},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1499500844902},{"_id":"public/404.html","hash":"1737472538c4208b2a7436eeb1ea66dd45fbe915","modified":1499500844919},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1499500844920},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1499500844920},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1499500844920},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1499500844920},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1499500844920},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1499500844920},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1499500844920},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1499500844920},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1499500844920},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1499500844920},{"_id":"public/js/src/utils.js","hash":"0fcb80ec11e6df05ed1a07b9338bef2669f93a70","modified":1499500844920},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1499500844920},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1499500844920},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1499500844920},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1499500844920},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1499500844920},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1499500844920},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1499500844920},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1499500844921},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1499500844921},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1499500844921},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1499500844921},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1499500844921},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1499500844921},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1499500844921},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1499500844921},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1499500844921},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1499500844921},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1499500844921},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1499500844921},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1499500844923},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1499500844923},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1499500844924},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1499500844924},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1499500844924},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1499500844924},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1499500844924},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1499500844924},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1499500844924},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1499500844924},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1499500844924},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1499500844924},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1499500844924},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1499500844924},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1499500844924},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1499500844924},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1499500844924},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1499500844924},{"_id":"public/css/main.css","hash":"7213d06f5295959e7879c71fe65b10f758b4fea5","modified":1499500844924},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1499500844924},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1499500844924},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1499500844924},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1499500844924},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1499500844924},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1499500844924},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1499500844925},{"_id":"public/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1499500844925},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1499500844925},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1499500844925},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1499500844925},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1499500844925},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1499500844925},{"_id":"public/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1499500844925},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1499500844925},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1499500844925},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1499500844925},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1499500844925},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1499500844925},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1499500844925},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1499500844925},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1499500844952}],"Category":[{"name":"design-pattern","_id":"cj4v0314o00042tmwvjnyhvz1"},{"name":"Structural Patterns","parent":"cj4v0314o00042tmwvjnyhvz1","_id":"cj4v0315d000j2tmwvt80zki6"},{"name":"Creational Patterns","parent":"cj4v0314o00042tmwvjnyhvz1","_id":"cj4v0315l000u2tmw1lwzt9ah"},{"name":"Behavioral Patterns","parent":"cj4v0314o00042tmwvjnyhvz1","_id":"cj4v0315p00112tmwwyx29k8c"}],"Data":[],"Page":[{"title":"about","date":"2017-07-06T13:48:32.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-07-06 21:48:32\n---\n","updated":"2017-07-06T13:48:32.699Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj4v0314k00012tmwki74jwbh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2017-07-06T14:07:59.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-07-06 22:07:59\ntype: 'categories'\ncomments: false\n---\n","updated":"2017-07-06T18:03:36.966Z","path":"categories/index.html","layout":"page","_id":"cj4v0314n00032tmwlm3hbvxi","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"All tags","type":"tags","comments":0,"date":"2017-07-06T14:12:57.000Z","_content":"","source":"tags/index.md","raw":"---\n  title: All tags\n  type: \"tags\"\n  comments: false\n  date: 2017-07-06 22:12:57\n---\n","updated":"2017-07-06T18:04:44.910Z","path":"tags/index.html","layout":"page","_id":"cj4v0314u00072tmwek3wfzrk","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"适配器模式(Adapter)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 适配器模式的定义\n- 适配器模式：用于将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。\n\n### 适配器模式包含四个角色：\n- Target：目标抽象类-定义客户要用的特定领域的接口\n- Adapter：适配器类-作为一个转换器，对适配者和抽象目标类进行适配，它是适配器模式的核心\n- Adaptee：适配者类-定义了一个已经存在的接口，这个接口需要适配\n- Client：客户类-在客户类中针对目标抽象类（Target）进行编程，调用在目标抽象类中定义的业务方法\n\n---\n\n### ES6实现\n``` js\nclass Target {\n    constructor(type) {\n        console.log('Target Class created!');\n        let result = undefined;\n\n        switch (type) {\n            case 'adapter':\n                result = new AdapterImpl();\n                break\n            default:\n                result = undefined;\n        }\n        return result;\n    }\n\n    request() {\n        console.log('Target.request invoked');\n    }\n}\n\nclass Adapter {\n    constructor() {\n        console.log('Adapter Class created');\n    }\n\n    specificRequest() {\n        console.log('Adapter.specificRequest invoked');\n    }\n}\n\nclass AdapterImpl extends Adapter {\n    constructor() {\n        super()\n        console.log('AdapterImpl Class created');\n    }\n\n    request() {\n        console.log('AdapterImpl.request invoked');\n        return this.specificRequest();\n    }\n}\n\nvar f = new Target(\"adapter\");\nf.request();\n```\n---\n\n### Typescript实现\n``` js\nnamespace AdapterPattern {\n    export class Adaptee {\n        public method(): void {\n            console.log(\"`method` of Adaptee is being called\");\n        }\n    }\n\n    export interface Target {\n        call(): void;\n    }\n\n    export class Adapter implements Target {\n        public call(): void {\n            console.log(\"Adapter's `call` method is being called\");\n            var adaptee: Adaptee = new Adaptee();\n            adaptee.method();\n        }\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Adapter.md","raw":"---\ntitle: 适配器模式(Adapter)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Structural Patterns]\ntags: [javasctipt, 适配器模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 适配器模式的定义\n- 适配器模式：用于将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。\n\n### 适配器模式包含四个角色：\n- Target：目标抽象类-定义客户要用的特定领域的接口\n- Adapter：适配器类-作为一个转换器，对适配者和抽象目标类进行适配，它是适配器模式的核心\n- Adaptee：适配者类-定义了一个已经存在的接口，这个接口需要适配\n- Client：客户类-在客户类中针对目标抽象类（Target）进行编程，调用在目标抽象类中定义的业务方法\n\n---\n\n### ES6实现\n``` js\nclass Target {\n    constructor(type) {\n        console.log('Target Class created!');\n        let result = undefined;\n\n        switch (type) {\n            case 'adapter':\n                result = new AdapterImpl();\n                break\n            default:\n                result = undefined;\n        }\n        return result;\n    }\n\n    request() {\n        console.log('Target.request invoked');\n    }\n}\n\nclass Adapter {\n    constructor() {\n        console.log('Adapter Class created');\n    }\n\n    specificRequest() {\n        console.log('Adapter.specificRequest invoked');\n    }\n}\n\nclass AdapterImpl extends Adapter {\n    constructor() {\n        super()\n        console.log('AdapterImpl Class created');\n    }\n\n    request() {\n        console.log('AdapterImpl.request invoked');\n        return this.specificRequest();\n    }\n}\n\nvar f = new Target(\"adapter\");\nf.request();\n```\n---\n\n### Typescript实现\n``` js\nnamespace AdapterPattern {\n    export class Adaptee {\n        public method(): void {\n            console.log(\"`method` of Adaptee is being called\");\n        }\n    }\n\n    export interface Target {\n        call(): void;\n    }\n\n    export class Adapter implements Target {\n        public call(): void {\n            console.log(\"Adapter's `call` method is being called\");\n            var adaptee: Adaptee = new Adaptee();\n            adaptee.method();\n        }\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Adapter","published":1,"updated":"2017-07-08T05:52:12.621Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4v0314e00002tmw3yawras3","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"适配器模式的定义\"><a href=\"#适配器模式的定义\" class=\"headerlink\" title=\"适配器模式的定义\"></a>适配器模式的定义</h3><ul>\n<li>适配器模式：用于将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</li>\n</ul>\n<h3 id=\"适配器模式包含四个角色：\"><a href=\"#适配器模式包含四个角色：\" class=\"headerlink\" title=\"适配器模式包含四个角色：\"></a>适配器模式包含四个角色：</h3><ul>\n<li>Target：目标抽象类-定义客户要用的特定领域的接口</li>\n<li>Adapter：适配器类-作为一个转换器，对适配者和抽象目标类进行适配，它是适配器模式的核心</li>\n<li>Adaptee：适配者类-定义了一个已经存在的接口，这个接口需要适配</li>\n<li>Client：客户类-在客户类中针对目标抽象类（Target）进行编程，调用在目标抽象类中定义的业务方法</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Target</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(type) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Target Class created!'</span>);</div><div class=\"line\">        <span class=\"keyword\">let</span> result = <span class=\"literal\">undefined</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">switch</span> (type) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'adapter'</span>:</div><div class=\"line\">                result = <span class=\"keyword\">new</span> AdapterImpl();</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                result = <span class=\"literal\">undefined</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    request() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Target.request invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Adapter Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    specificRequest() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Adapter.specificRequest invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdapterImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">Adapter</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AdapterImpl Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    request() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AdapterImpl.request invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.specificRequest();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> Target(<span class=\"string\">\"adapter\"</span>);</div><div class=\"line\">f.request();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">namespace AdapterPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adaptee</span> </span>&#123;</div><div class=\"line\">        public method(): <span class=\"keyword\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`method` of Adaptee is being called\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> interface Target &#123;</div><div class=\"line\">        call(): <span class=\"keyword\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"title\">implements</span> <span class=\"title\">Target</span> </span>&#123;</div><div class=\"line\">        public call(): <span class=\"keyword\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Adapter's `call` method is being called\"</span>);</div><div class=\"line\">            <span class=\"keyword\">var</span> adaptee: Adaptee = <span class=\"keyword\">new</span> Adaptee();</div><div class=\"line\">            adaptee.method();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"适配器模式的定义\"><a href=\"#适配器模式的定义\" class=\"headerlink\" title=\"适配器模式的定义\"></a>适配器模式的定义</h3><ul>\n<li>适配器模式：用于将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</li>\n</ul>\n<h3 id=\"适配器模式包含四个角色：\"><a href=\"#适配器模式包含四个角色：\" class=\"headerlink\" title=\"适配器模式包含四个角色：\"></a>适配器模式包含四个角色：</h3><ul>\n<li>Target：目标抽象类-定义客户要用的特定领域的接口</li>\n<li>Adapter：适配器类-作为一个转换器，对适配者和抽象目标类进行适配，它是适配器模式的核心</li>\n<li>Adaptee：适配者类-定义了一个已经存在的接口，这个接口需要适配</li>\n<li>Client：客户类-在客户类中针对目标抽象类（Target）进行编程，调用在目标抽象类中定义的业务方法</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Target</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(type) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Target Class created!'</span>);</div><div class=\"line\">        <span class=\"keyword\">let</span> result = <span class=\"literal\">undefined</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">switch</span> (type) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'adapter'</span>:</div><div class=\"line\">                result = <span class=\"keyword\">new</span> AdapterImpl();</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                result = <span class=\"literal\">undefined</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    request() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Target.request invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Adapter Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    specificRequest() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Adapter.specificRequest invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdapterImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">Adapter</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AdapterImpl Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    request() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AdapterImpl.request invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.specificRequest();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> Target(<span class=\"string\">\"adapter\"</span>);</div><div class=\"line\">f.request();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">namespace AdapterPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adaptee</span> </span>&#123;</div><div class=\"line\">        public method(): <span class=\"keyword\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`method` of Adaptee is being called\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> interface Target &#123;</div><div class=\"line\">        call(): <span class=\"keyword\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"title\">implements</span> <span class=\"title\">Target</span> </span>&#123;</div><div class=\"line\">        public call(): <span class=\"keyword\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Adapter's `call` method is being called\"</span>);</div><div class=\"line\">            <span class=\"keyword\">var</span> adaptee: Adaptee = <span class=\"keyword\">new</span> Adaptee();</div><div class=\"line\">            adaptee.method();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"抽象工厂模式(Abstract Factory)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 抽象工厂模式的定义\n- 抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。\n- 抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构\n\n### 抽象工厂模式包含四个角色：\n- ConcreteFactory-具体工厂实现了抽象工厂声明的生成抽象产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中；\n- AbstractProduct-抽象产品为每种产品声明接口，在抽象产品中定义了产品的抽象业务方法；\n- AbstractFactory-抽象工厂用于明生成抽象产品的方法；\n- Product-具体产品定义具体工厂生产的具体产品对象，实现抽象产品接口中定义的业务方法。\n\n### 抽象工厂模式适用情况包括：\n- 一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节；\n- 系统中有多于一个的产品族，而每次只使用其中某一产品族；\n- 属于同一个产品族的产品将在一起使用；\n- 系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。\n\n---\n\n### ES6实现\n``` js\nclass AbstractFactory {\n    constructor() {\n        console.log(\"AbstractFactory class created\");\n    }\n\n    createProductA(product) {\n        console.log(\"AbstractFactory.createProductA created\");\n    }\n\n    createProductB(product) {\n        console.log(\"AbstractFactory.createProductB created\");\n    }\n}\n\nclass ConcreteFactory1 extends AbstractFactory {\n    constructor() {\n        super();\n        console.log(\"ConcreteFactory1 class created\");\n    }\n\n    createProductA(product) {\n        console.log('ConcreteFactory1 createProductA');\n        return new ProductA1();\n    }\n\n    createProductB(product) {\n        console.log('ConcreteFactory1 createProductB');\n        return new ProductB1();\n    }\n}\n\nclass ConcreteFactory2 extends AbstractFactory {\n    constructor() {\n        super();\n        console.log(\"ConcreteFactory2 class created\");\n    }\n\n    createProductA(product) {\n        console.log('ConcreteFactory2 createProductA');\n        return new ProductA2();\n    }\n\n    createProductB(product) {\n        console.log('ConcreteFactory2 createProductB');\n        return new ProductB2();\n    }\n}\n\nclass AbstractProductA {\n    constructor() {\n        console.log('AbstractProductA class created');\n    }\n}\n\nclass AbstractProductB {\n    constructor() {\n        console.log('AbstractProductB class created');\n    }\n}\n\nclass ProductA1 extends AbstractProductA {\n    constructor() {\n        super();\n        console.log('ProductA1 class created');\n    }\n}\n\nclass ProductA2 extends AbstractProductA {\n    constructor() {\n        super();\n        console.log('ProductA2 class created');\n    }\n}\n\nclass ProductB1 extends AbstractProductB {\n    constructor() {\n        super();\n        console.log('ProductB1 class created');\n    }\n}\n\nclass ProductB2 extends AbstractProductB {\n    constructor() {\n        super();\n        console.log('ProductB2 class created');\n    }\n}\n\nvar factory1 = new ConcreteFactory1();\nvar productB1 = factory1.createProductB();\nvar productA1 = factory1.createProductA();\n\nvar factory2 = new ConcreteFactory2();\nvar productA2 = factory2.createProductA();\nvar productB2 = factory2.createProductB();\n```\n---\n\n### Typescript实现\n``` ts\nnamespace AbstractFactoryPattern {\n    export interface AbstractProductA {\n        methodA(): string;\n    }\n    export interface AbstractProductB {\n        methodB(): number;\n    }\n\n    export interface AbstractFactory {\n        createProductA(param?: any) : AbstractProductA;\n        createProductB() : AbstractProductB;\n    }\n\n\n    export class ProductA1 implements AbstractProductA {\n        methodA = () => {\n            return \"This is methodA of ProductA1\";\n        }\n    }\n    export class ProductB1 implements AbstractProductB {\n        methodB = () => {\n            return 1;\n        }\n    }\n\n    export class ProductA2 implements AbstractProductA {\n        methodA = () => {\n            return \"This is methodA of ProductA2\";\n        }\n    }\n    export class ProductB2 implements AbstractProductB {\n        methodB = () => {\n            return 2;\n        }\n    }\n\n\n    export class ConcreteFactory1 implements AbstractFactory {\n        createProductA(param?: any) : AbstractProductA {\n            return new ProductA1();\n        }\n\n        createProductB(param?: any) : AbstractProductB {\n            return new ProductB1();\n        }\n    }\n    export class ConcreteFactory2 implements AbstractFactory {\n        createProductA(param?: any) : AbstractProductA {\n            return new ProductA2();\n        }\n\n        createProductB(param?: any) : AbstractProductB {\n            return new ProductB2();\n        }\n    }\n\n\n    export class Tester {\n        private abstractProductA: AbstractProductA;\n        private abstractProductB: AbstractProductB;\n\n        constructor(factory: AbstractFactory) {\n            this.abstractProductA = factory.createProductA();\n            this.abstractProductB = factory.createProductB();\n        }\n\n        public test(): void {\n            console.log(this.abstractProductA.methodA());\n            console.log(this.abstractProductB.methodB());\n        }\n    }\n\n }\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/AbstractFactory.md","raw":"---\ntitle: 抽象工厂模式(Abstract Factory)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Creational Patterns]\ntags: [javasctipt, 抽象工厂模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 抽象工厂模式的定义\n- 抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。\n- 抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构\n\n### 抽象工厂模式包含四个角色：\n- ConcreteFactory-具体工厂实现了抽象工厂声明的生成抽象产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中；\n- AbstractProduct-抽象产品为每种产品声明接口，在抽象产品中定义了产品的抽象业务方法；\n- AbstractFactory-抽象工厂用于明生成抽象产品的方法；\n- Product-具体产品定义具体工厂生产的具体产品对象，实现抽象产品接口中定义的业务方法。\n\n### 抽象工厂模式适用情况包括：\n- 一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节；\n- 系统中有多于一个的产品族，而每次只使用其中某一产品族；\n- 属于同一个产品族的产品将在一起使用；\n- 系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。\n\n---\n\n### ES6实现\n``` js\nclass AbstractFactory {\n    constructor() {\n        console.log(\"AbstractFactory class created\");\n    }\n\n    createProductA(product) {\n        console.log(\"AbstractFactory.createProductA created\");\n    }\n\n    createProductB(product) {\n        console.log(\"AbstractFactory.createProductB created\");\n    }\n}\n\nclass ConcreteFactory1 extends AbstractFactory {\n    constructor() {\n        super();\n        console.log(\"ConcreteFactory1 class created\");\n    }\n\n    createProductA(product) {\n        console.log('ConcreteFactory1 createProductA');\n        return new ProductA1();\n    }\n\n    createProductB(product) {\n        console.log('ConcreteFactory1 createProductB');\n        return new ProductB1();\n    }\n}\n\nclass ConcreteFactory2 extends AbstractFactory {\n    constructor() {\n        super();\n        console.log(\"ConcreteFactory2 class created\");\n    }\n\n    createProductA(product) {\n        console.log('ConcreteFactory2 createProductA');\n        return new ProductA2();\n    }\n\n    createProductB(product) {\n        console.log('ConcreteFactory2 createProductB');\n        return new ProductB2();\n    }\n}\n\nclass AbstractProductA {\n    constructor() {\n        console.log('AbstractProductA class created');\n    }\n}\n\nclass AbstractProductB {\n    constructor() {\n        console.log('AbstractProductB class created');\n    }\n}\n\nclass ProductA1 extends AbstractProductA {\n    constructor() {\n        super();\n        console.log('ProductA1 class created');\n    }\n}\n\nclass ProductA2 extends AbstractProductA {\n    constructor() {\n        super();\n        console.log('ProductA2 class created');\n    }\n}\n\nclass ProductB1 extends AbstractProductB {\n    constructor() {\n        super();\n        console.log('ProductB1 class created');\n    }\n}\n\nclass ProductB2 extends AbstractProductB {\n    constructor() {\n        super();\n        console.log('ProductB2 class created');\n    }\n}\n\nvar factory1 = new ConcreteFactory1();\nvar productB1 = factory1.createProductB();\nvar productA1 = factory1.createProductA();\n\nvar factory2 = new ConcreteFactory2();\nvar productA2 = factory2.createProductA();\nvar productB2 = factory2.createProductB();\n```\n---\n\n### Typescript实现\n``` ts\nnamespace AbstractFactoryPattern {\n    export interface AbstractProductA {\n        methodA(): string;\n    }\n    export interface AbstractProductB {\n        methodB(): number;\n    }\n\n    export interface AbstractFactory {\n        createProductA(param?: any) : AbstractProductA;\n        createProductB() : AbstractProductB;\n    }\n\n\n    export class ProductA1 implements AbstractProductA {\n        methodA = () => {\n            return \"This is methodA of ProductA1\";\n        }\n    }\n    export class ProductB1 implements AbstractProductB {\n        methodB = () => {\n            return 1;\n        }\n    }\n\n    export class ProductA2 implements AbstractProductA {\n        methodA = () => {\n            return \"This is methodA of ProductA2\";\n        }\n    }\n    export class ProductB2 implements AbstractProductB {\n        methodB = () => {\n            return 2;\n        }\n    }\n\n\n    export class ConcreteFactory1 implements AbstractFactory {\n        createProductA(param?: any) : AbstractProductA {\n            return new ProductA1();\n        }\n\n        createProductB(param?: any) : AbstractProductB {\n            return new ProductB1();\n        }\n    }\n    export class ConcreteFactory2 implements AbstractFactory {\n        createProductA(param?: any) : AbstractProductA {\n            return new ProductA2();\n        }\n\n        createProductB(param?: any) : AbstractProductB {\n            return new ProductB2();\n        }\n    }\n\n\n    export class Tester {\n        private abstractProductA: AbstractProductA;\n        private abstractProductB: AbstractProductB;\n\n        constructor(factory: AbstractFactory) {\n            this.abstractProductA = factory.createProductA();\n            this.abstractProductB = factory.createProductB();\n        }\n\n        public test(): void {\n            console.log(this.abstractProductA.methodA());\n            console.log(this.abstractProductB.methodB());\n        }\n    }\n\n }\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"AbstractFactory","published":1,"updated":"2017-07-08T07:05:05.562Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4v0314l00022tmw1hsszj2h","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"抽象工厂模式的定义\"><a href=\"#抽象工厂模式的定义\" class=\"headerlink\" title=\"抽象工厂模式的定义\"></a>抽象工厂模式的定义</h3><ul>\n<li>抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。</li>\n<li>抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构</li>\n</ul>\n<h3 id=\"抽象工厂模式包含四个角色：\"><a href=\"#抽象工厂模式包含四个角色：\" class=\"headerlink\" title=\"抽象工厂模式包含四个角色：\"></a>抽象工厂模式包含四个角色：</h3><ul>\n<li>ConcreteFactory-具体工厂实现了抽象工厂声明的生成抽象产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中；</li>\n<li>AbstractProduct-抽象产品为每种产品声明接口，在抽象产品中定义了产品的抽象业务方法；</li>\n<li>AbstractFactory-抽象工厂用于明生成抽象产品的方法；</li>\n<li>Product-具体产品定义具体工厂生产的具体产品对象，实现抽象产品接口中定义的业务方法。</li>\n</ul>\n<h3 id=\"抽象工厂模式适用情况包括：\"><a href=\"#抽象工厂模式适用情况包括：\" class=\"headerlink\" title=\"抽象工厂模式适用情况包括：\"></a>抽象工厂模式适用情况包括：</h3><ul>\n<li>一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节；</li>\n<li>系统中有多于一个的产品族，而每次只使用其中某一产品族；</li>\n<li>属于同一个产品族的产品将在一起使用；</li>\n<li>系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"AbstractFactory class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createProductA(product) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"AbstractFactory.createProductA created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createProductB(product) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"AbstractFactory.createProductB created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFactory1</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcreteFactory1 class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createProductA(product) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteFactory1 createProductA'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductA1();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createProductB(product) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteFactory1 createProductB'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductB1();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFactory2</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcreteFactory2 class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createProductA(product) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteFactory2 createProductA'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductA2();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createProductB(product) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteFactory2 createProductB'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductB2();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractProductA</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractProductA class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractProductB</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractProductB class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductA1</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProductA</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ProductA1 class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductA2</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProductA</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ProductA2 class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductB1</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProductB</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ProductB1 class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductB2</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProductB</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ProductB2 class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> factory1 = <span class=\"keyword\">new</span> ConcreteFactory1();</div><div class=\"line\"><span class=\"keyword\">var</span> productB1 = factory1.createProductB();</div><div class=\"line\"><span class=\"keyword\">var</span> productA1 = factory1.createProductA();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> factory2 = <span class=\"keyword\">new</span> ConcreteFactory2();</div><div class=\"line\"><span class=\"keyword\">var</span> productA2 = factory2.createProductA();</div><div class=\"line\"><span class=\"keyword\">var</span> productB2 = factory2.createProductB();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> AbstractFactoryPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> AbstractProductA &#123;</div><div class=\"line\">        methodA(): <span class=\"built_in\">string</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> AbstractProductB &#123;</div><div class=\"line\">        methodB(): <span class=\"built_in\">number</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> AbstractFactory &#123;</div><div class=\"line\">        createProductA(param?: <span class=\"built_in\">any</span>) : AbstractProductA;</div><div class=\"line\">        createProductB() : AbstractProductB;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ProductA1 <span class=\"keyword\">implements</span> AbstractProductA &#123;</div><div class=\"line\">        methodA = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"This is methodA of ProductA1\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ProductB1 <span class=\"keyword\">implements</span> AbstractProductB &#123;</div><div class=\"line\">        methodB = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ProductA2 <span class=\"keyword\">implements</span> AbstractProductA &#123;</div><div class=\"line\">        methodA = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"This is methodA of ProductA2\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ProductB2 <span class=\"keyword\">implements</span> AbstractProductB &#123;</div><div class=\"line\">        methodB = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteFactory1 <span class=\"keyword\">implements</span> AbstractFactory &#123;</div><div class=\"line\">        createProductA(param?: <span class=\"built_in\">any</span>) : AbstractProductA &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductA1();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        createProductB(param?: <span class=\"built_in\">any</span>) : AbstractProductB &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductB1();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteFactory2 <span class=\"keyword\">implements</span> AbstractFactory &#123;</div><div class=\"line\">        createProductA(param?: <span class=\"built_in\">any</span>) : AbstractProductA &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductA2();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        createProductB(param?: <span class=\"built_in\">any</span>) : AbstractProductB &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductB2();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Tester &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> abstractProductA: AbstractProductA;</div><div class=\"line\">        <span class=\"keyword\">private</span> abstractProductB: AbstractProductB;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">factory: AbstractFactory</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.abstractProductA = factory.createProductA();</div><div class=\"line\">            <span class=\"keyword\">this</span>.abstractProductB = factory.createProductB();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> test(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.abstractProductA.methodA());</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.abstractProductB.methodB());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><p><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></p>\n</li>\n<li><p><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></p>\n</li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"抽象工厂模式的定义\"><a href=\"#抽象工厂模式的定义\" class=\"headerlink\" title=\"抽象工厂模式的定义\"></a>抽象工厂模式的定义</h3><ul>\n<li>抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。</li>\n<li>抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构</li>\n</ul>\n<h3 id=\"抽象工厂模式包含四个角色：\"><a href=\"#抽象工厂模式包含四个角色：\" class=\"headerlink\" title=\"抽象工厂模式包含四个角色：\"></a>抽象工厂模式包含四个角色：</h3><ul>\n<li>ConcreteFactory-具体工厂实现了抽象工厂声明的生成抽象产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中；</li>\n<li>AbstractProduct-抽象产品为每种产品声明接口，在抽象产品中定义了产品的抽象业务方法；</li>\n<li>AbstractFactory-抽象工厂用于明生成抽象产品的方法；</li>\n<li>Product-具体产品定义具体工厂生产的具体产品对象，实现抽象产品接口中定义的业务方法。</li>\n</ul>\n<h3 id=\"抽象工厂模式适用情况包括：\"><a href=\"#抽象工厂模式适用情况包括：\" class=\"headerlink\" title=\"抽象工厂模式适用情况包括：\"></a>抽象工厂模式适用情况包括：</h3><ul>\n<li>一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节；</li>\n<li>系统中有多于一个的产品族，而每次只使用其中某一产品族；</li>\n<li>属于同一个产品族的产品将在一起使用；</li>\n<li>系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"AbstractFactory class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createProductA(product) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"AbstractFactory.createProductA created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createProductB(product) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"AbstractFactory.createProductB created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFactory1</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcreteFactory1 class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createProductA(product) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteFactory1 createProductA'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductA1();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createProductB(product) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteFactory1 createProductB'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductB1();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFactory2</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcreteFactory2 class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createProductA(product) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteFactory2 createProductA'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductA2();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createProductB(product) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteFactory2 createProductB'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductB2();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractProductA</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractProductA class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractProductB</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractProductB class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductA1</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProductA</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ProductA1 class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductA2</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProductA</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ProductA2 class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductB1</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProductB</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ProductB1 class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductB2</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProductB</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ProductB2 class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> factory1 = <span class=\"keyword\">new</span> ConcreteFactory1();</div><div class=\"line\"><span class=\"keyword\">var</span> productB1 = factory1.createProductB();</div><div class=\"line\"><span class=\"keyword\">var</span> productA1 = factory1.createProductA();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> factory2 = <span class=\"keyword\">new</span> ConcreteFactory2();</div><div class=\"line\"><span class=\"keyword\">var</span> productA2 = factory2.createProductA();</div><div class=\"line\"><span class=\"keyword\">var</span> productB2 = factory2.createProductB();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> AbstractFactoryPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> AbstractProductA &#123;</div><div class=\"line\">        methodA(): <span class=\"built_in\">string</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> AbstractProductB &#123;</div><div class=\"line\">        methodB(): <span class=\"built_in\">number</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> AbstractFactory &#123;</div><div class=\"line\">        createProductA(param?: <span class=\"built_in\">any</span>) : AbstractProductA;</div><div class=\"line\">        createProductB() : AbstractProductB;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ProductA1 <span class=\"keyword\">implements</span> AbstractProductA &#123;</div><div class=\"line\">        methodA = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"This is methodA of ProductA1\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ProductB1 <span class=\"keyword\">implements</span> AbstractProductB &#123;</div><div class=\"line\">        methodB = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ProductA2 <span class=\"keyword\">implements</span> AbstractProductA &#123;</div><div class=\"line\">        methodA = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"This is methodA of ProductA2\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ProductB2 <span class=\"keyword\">implements</span> AbstractProductB &#123;</div><div class=\"line\">        methodB = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteFactory1 <span class=\"keyword\">implements</span> AbstractFactory &#123;</div><div class=\"line\">        createProductA(param?: <span class=\"built_in\">any</span>) : AbstractProductA &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductA1();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        createProductB(param?: <span class=\"built_in\">any</span>) : AbstractProductB &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductB1();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteFactory2 <span class=\"keyword\">implements</span> AbstractFactory &#123;</div><div class=\"line\">        createProductA(param?: <span class=\"built_in\">any</span>) : AbstractProductA &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductA2();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        createProductB(param?: <span class=\"built_in\">any</span>) : AbstractProductB &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductB2();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Tester &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> abstractProductA: AbstractProductA;</div><div class=\"line\">        <span class=\"keyword\">private</span> abstractProductB: AbstractProductB;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">factory: AbstractFactory</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.abstractProductA = factory.createProductA();</div><div class=\"line\">            <span class=\"keyword\">this</span>.abstractProductB = factory.createProductB();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> test(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.abstractProductA.methodA());</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.abstractProductB.methodB());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><p><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></p>\n</li>\n<li><p><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></p>\n</li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"桥接模式(Bridge)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 桥接模式的定义\n- 桥接模式：模式将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体(Handle and Body)模式或接口(Interface)模式。\n\n### 桥接模式包含四个角色：\n- Abstraction-抽象类中定义了一个实现类接口类型的对象并可以维护该对象；\n- RefinedAbstraction-扩充抽象类扩充由抽象类定义的接口，它实现了在抽象类中定义的抽象业务方法，在扩充抽象类中可以调用在实现类接口中定义的业务方法；\n- Implementor实现类接口定义了实现类的接口，实现类接口仅提供基本操作，而抽象类定义的接口可能会做更多更复杂的操作；\n- ConcreteImplementor具体实现类实现了实现类接口并且具体实现它，在不同的具体实现类中提供基本操作的不同实现，在程序运行时，具体实现类对象将替换其父类对象，提供给客户端具体的业务操作方法。\n---\n\n### ES6实现\n``` js\nclass Abstraction {\n    constructor() {\n        console.log('Abstraction Class created');\n    }\n\n    operation() {\n        console.log('Abstraction.operation invoked');\n        this.imp.operationImp();\n    }\n}\n\nclass RefinedAbstraction extends Abstraction {\n    constructor() {\n        super()\n        console.log('RefinedAbstraction Class created');\n    }\n\n    setImp(imp) {\n        console.log('RefinedAbstraction.setImp invoked');\n        this.imp = imp\n    }\n}\n\nclass Implementor {\n    constructor() {\n        console.log('Implementor Class created');\n    }\n\n    operationImp() {\n        console.log('Implementor.operationImp invoked');\n    }\n}\n\nclass ConcreteImplementorA extends Implementor {\n    constructor() {\n        super()\n        console.log('ConcreteImplementorA Class created');\n    }\n\n    operationImp() {\n        console.log('ConcreteImplementorA.operationImp invoked');\n    }\n}\n\nclass ConcreteImplementorB extends Implementor {\n    constructor() {\n        super()\n        console.log('ConcreteImplementorB Class created');\n    }\n\n    operationImp() {\n        console.log('ConcreteImplementorB.operationImp invoked');\n    }\n}\n\nvar abstraction = new RefinedAbstraction();\nabstraction.setImp(new ConcreteImplementorA());\nabstraction.operation();\nabstraction.setImp(new ConcreteImplementorB());\nabstraction.operation();\n```\n---\n\n### Typescript实现\n``` ts\nclass Abstraction {\n    constructor() {\n        console.log('Abstraction Class created');\n    }\n\n    operation() {\n        console.log('Abstraction.operation invoked');\n        this.imp.operationImp();\n    }\n}\n\nclass RefinedAbstraction extends Abstraction {\n    constructor() {\n        super()\n        console.log('RefinedAbstraction Class created');\n    }\n\n    setImp(imp) {\n        console.log('RefinedAbstraction.setImp invoked');\n        this.imp = imp\n    }\n}\n\nclass Implementor {\n    constructor() {\n        console.log('Implementor Class created');\n    }\n\n    operationImp() {\n        console.log('Implementor.operationImp invoked');\n    }\n}\n\nclass ConcreteImplementorA extends Implementor {\n    constructor() {\n        super()\n        console.log('ConcreteImplementorA Class created');\n    }\n\n    operationImp() {\n        console.log('ConcreteImplementorA.operationImp invoked');\n    }\n}\n\nclass ConcreteImplementorB extends Implementor {\n    constructor() {\n        super()\n        console.log('ConcreteImplementorB Class created');\n    }\n\n    operationImp() {\n        console.log('ConcreteImplementorB.operationImp invoked');\n    }\n}\n\nvar abstraction = new RefinedAbstraction();\nabstraction.setImp(new ConcreteImplementorA());\nabstraction.operation();\nabstraction.setImp(new ConcreteImplementorB());\nabstraction.operation();\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Bridge.md","raw":"---\ntitle: 桥接模式(Bridge)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Structural Patterns]\ntags: [javasctipt, 桥接模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 桥接模式的定义\n- 桥接模式：模式将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体(Handle and Body)模式或接口(Interface)模式。\n\n### 桥接模式包含四个角色：\n- Abstraction-抽象类中定义了一个实现类接口类型的对象并可以维护该对象；\n- RefinedAbstraction-扩充抽象类扩充由抽象类定义的接口，它实现了在抽象类中定义的抽象业务方法，在扩充抽象类中可以调用在实现类接口中定义的业务方法；\n- Implementor实现类接口定义了实现类的接口，实现类接口仅提供基本操作，而抽象类定义的接口可能会做更多更复杂的操作；\n- ConcreteImplementor具体实现类实现了实现类接口并且具体实现它，在不同的具体实现类中提供基本操作的不同实现，在程序运行时，具体实现类对象将替换其父类对象，提供给客户端具体的业务操作方法。\n---\n\n### ES6实现\n``` js\nclass Abstraction {\n    constructor() {\n        console.log('Abstraction Class created');\n    }\n\n    operation() {\n        console.log('Abstraction.operation invoked');\n        this.imp.operationImp();\n    }\n}\n\nclass RefinedAbstraction extends Abstraction {\n    constructor() {\n        super()\n        console.log('RefinedAbstraction Class created');\n    }\n\n    setImp(imp) {\n        console.log('RefinedAbstraction.setImp invoked');\n        this.imp = imp\n    }\n}\n\nclass Implementor {\n    constructor() {\n        console.log('Implementor Class created');\n    }\n\n    operationImp() {\n        console.log('Implementor.operationImp invoked');\n    }\n}\n\nclass ConcreteImplementorA extends Implementor {\n    constructor() {\n        super()\n        console.log('ConcreteImplementorA Class created');\n    }\n\n    operationImp() {\n        console.log('ConcreteImplementorA.operationImp invoked');\n    }\n}\n\nclass ConcreteImplementorB extends Implementor {\n    constructor() {\n        super()\n        console.log('ConcreteImplementorB Class created');\n    }\n\n    operationImp() {\n        console.log('ConcreteImplementorB.operationImp invoked');\n    }\n}\n\nvar abstraction = new RefinedAbstraction();\nabstraction.setImp(new ConcreteImplementorA());\nabstraction.operation();\nabstraction.setImp(new ConcreteImplementorB());\nabstraction.operation();\n```\n---\n\n### Typescript实现\n``` ts\nclass Abstraction {\n    constructor() {\n        console.log('Abstraction Class created');\n    }\n\n    operation() {\n        console.log('Abstraction.operation invoked');\n        this.imp.operationImp();\n    }\n}\n\nclass RefinedAbstraction extends Abstraction {\n    constructor() {\n        super()\n        console.log('RefinedAbstraction Class created');\n    }\n\n    setImp(imp) {\n        console.log('RefinedAbstraction.setImp invoked');\n        this.imp = imp\n    }\n}\n\nclass Implementor {\n    constructor() {\n        console.log('Implementor Class created');\n    }\n\n    operationImp() {\n        console.log('Implementor.operationImp invoked');\n    }\n}\n\nclass ConcreteImplementorA extends Implementor {\n    constructor() {\n        super()\n        console.log('ConcreteImplementorA Class created');\n    }\n\n    operationImp() {\n        console.log('ConcreteImplementorA.operationImp invoked');\n    }\n}\n\nclass ConcreteImplementorB extends Implementor {\n    constructor() {\n        super()\n        console.log('ConcreteImplementorB Class created');\n    }\n\n    operationImp() {\n        console.log('ConcreteImplementorB.operationImp invoked');\n    }\n}\n\nvar abstraction = new RefinedAbstraction();\nabstraction.setImp(new ConcreteImplementorA());\nabstraction.operation();\nabstraction.setImp(new ConcreteImplementorB());\nabstraction.operation();\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Bridge","published":1,"updated":"2017-07-08T07:05:18.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4v0314t00062tmwgcxo37xw","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"桥接模式的定义\"><a href=\"#桥接模式的定义\" class=\"headerlink\" title=\"桥接模式的定义\"></a>桥接模式的定义</h3><ul>\n<li>桥接模式：模式将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体(Handle and Body)模式或接口(Interface)模式。</li>\n</ul>\n<h3 id=\"桥接模式包含四个角色：\"><a href=\"#桥接模式包含四个角色：\" class=\"headerlink\" title=\"桥接模式包含四个角色：\"></a>桥接模式包含四个角色：</h3><ul>\n<li>Abstraction-抽象类中定义了一个实现类接口类型的对象并可以维护该对象；</li>\n<li>RefinedAbstraction-扩充抽象类扩充由抽象类定义的接口，它实现了在抽象类中定义的抽象业务方法，在扩充抽象类中可以调用在实现类接口中定义的业务方法；</li>\n<li>Implementor实现类接口定义了实现类的接口，实现类接口仅提供基本操作，而抽象类定义的接口可能会做更多更复杂的操作；</li>\n<li>ConcreteImplementor具体实现类实现了实现类接口并且具体实现它，在不同的具体实现类中提供基本操作的不同实现，在程序运行时，具体实现类对象将替换其父类对象，提供给客户端具体的业务操作方法。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Abstraction</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Abstraction Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Abstraction.operation invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.imp.operationImp();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefinedAbstraction</span> <span class=\"keyword\">extends</span> <span class=\"title\">Abstraction</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'RefinedAbstraction Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setImp(imp) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'RefinedAbstraction.setImp invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.imp = imp</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Implementor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Implementor Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationImp() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Implementor.operationImp invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteImplementorA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Implementor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorA Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationImp() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorA.operationImp invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteImplementorB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Implementor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorB Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationImp() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorB.operationImp invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> abstraction = <span class=\"keyword\">new</span> RefinedAbstraction();</div><div class=\"line\">abstraction.setImp(<span class=\"keyword\">new</span> ConcreteImplementorA());</div><div class=\"line\">abstraction.operation();</div><div class=\"line\">abstraction.setImp(<span class=\"keyword\">new</span> ConcreteImplementorB());</div><div class=\"line\">abstraction.operation();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Abstraction &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Abstraction Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Abstraction.operation invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.imp.operationImp();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> RefinedAbstraction <span class=\"keyword\">extends</span> Abstraction &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'RefinedAbstraction Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setImp(imp) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'RefinedAbstraction.setImp invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.imp = imp</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Implementor &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Implementor Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationImp() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Implementor.operationImp invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> ConcreteImplementorA <span class=\"keyword\">extends</span> Implementor &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorA Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationImp() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorA.operationImp invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> ConcreteImplementorB <span class=\"keyword\">extends</span> Implementor &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorB Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationImp() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorB.operationImp invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> abstraction = <span class=\"keyword\">new</span> RefinedAbstraction();</div><div class=\"line\">abstraction.setImp(<span class=\"keyword\">new</span> ConcreteImplementorA());</div><div class=\"line\">abstraction.operation();</div><div class=\"line\">abstraction.setImp(<span class=\"keyword\">new</span> ConcreteImplementorB());</div><div class=\"line\">abstraction.operation();</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"桥接模式的定义\"><a href=\"#桥接模式的定义\" class=\"headerlink\" title=\"桥接模式的定义\"></a>桥接模式的定义</h3><ul>\n<li>桥接模式：模式将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体(Handle and Body)模式或接口(Interface)模式。</li>\n</ul>\n<h3 id=\"桥接模式包含四个角色：\"><a href=\"#桥接模式包含四个角色：\" class=\"headerlink\" title=\"桥接模式包含四个角色：\"></a>桥接模式包含四个角色：</h3><ul>\n<li>Abstraction-抽象类中定义了一个实现类接口类型的对象并可以维护该对象；</li>\n<li>RefinedAbstraction-扩充抽象类扩充由抽象类定义的接口，它实现了在抽象类中定义的抽象业务方法，在扩充抽象类中可以调用在实现类接口中定义的业务方法；</li>\n<li>Implementor实现类接口定义了实现类的接口，实现类接口仅提供基本操作，而抽象类定义的接口可能会做更多更复杂的操作；</li>\n<li>ConcreteImplementor具体实现类实现了实现类接口并且具体实现它，在不同的具体实现类中提供基本操作的不同实现，在程序运行时，具体实现类对象将替换其父类对象，提供给客户端具体的业务操作方法。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Abstraction</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Abstraction Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Abstraction.operation invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.imp.operationImp();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RefinedAbstraction</span> <span class=\"keyword\">extends</span> <span class=\"title\">Abstraction</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'RefinedAbstraction Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setImp(imp) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'RefinedAbstraction.setImp invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.imp = imp</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Implementor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Implementor Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationImp() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Implementor.operationImp invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteImplementorA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Implementor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorA Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationImp() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorA.operationImp invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteImplementorB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Implementor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorB Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationImp() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorB.operationImp invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> abstraction = <span class=\"keyword\">new</span> RefinedAbstraction();</div><div class=\"line\">abstraction.setImp(<span class=\"keyword\">new</span> ConcreteImplementorA());</div><div class=\"line\">abstraction.operation();</div><div class=\"line\">abstraction.setImp(<span class=\"keyword\">new</span> ConcreteImplementorB());</div><div class=\"line\">abstraction.operation();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Abstraction &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Abstraction Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Abstraction.operation invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.imp.operationImp();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> RefinedAbstraction <span class=\"keyword\">extends</span> Abstraction &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'RefinedAbstraction Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setImp(imp) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'RefinedAbstraction.setImp invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.imp = imp</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> Implementor &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Implementor Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationImp() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Implementor.operationImp invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> ConcreteImplementorA <span class=\"keyword\">extends</span> Implementor &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorA Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationImp() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorA.operationImp invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> ConcreteImplementorB <span class=\"keyword\">extends</span> Implementor &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorB Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationImp() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteImplementorB.operationImp invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> abstraction = <span class=\"keyword\">new</span> RefinedAbstraction();</div><div class=\"line\">abstraction.setImp(<span class=\"keyword\">new</span> ConcreteImplementorA());</div><div class=\"line\">abstraction.operation();</div><div class=\"line\">abstraction.setImp(<span class=\"keyword\">new</span> ConcreteImplementorB());</div><div class=\"line\">abstraction.operation();</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"组合模式(Composite)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n---\n\n### ES6实现\n``` js\nclass Component {\n    constructor() {\n        console.log('Component Class created');\n    }\n\n    operation() {\n        console.log('Component.operation invoked');\n    }\n\n    add(Component) {\n        console.log('Component.add invoked');\n    }\n\n    remove(Component) {\n        console.log('Component.remove invoked');\n    }\n\n    getChild(key) {\n        console.log('Component.getChild invoked');\n    }\n}\n\nclass Leaf extends Component {\n    constructor(name) {\n        super();\n        this.name = name;\n        console.log('Leaf Class created');\n    }\n\n    operation() {\n        console.log('Leaf.operation invoked');\n        console.log(this.name);\n    }\n}\n\nclass Composite extends Component {\n    constructor(name) {\n        super();\n        this.name = name;\n        this.children = [];\n        console.log('Composite Class created');\n    }\n\n    operation() {\n        console.log('Composite operation for: ' + this.name)\n        for (var i in this.children) {\n            this.children[i].operation();\n        }\n    }\n\n    add(Component) {\n        console.log('Composite.add invoked');\n        this.children.push(Component);\n    }\n\n    remove(Component) {\n        console.log('Composite.remove invoked');\n        for (var i in this.children) {\n            if (this.children[i] === Component) {\n                this.children.splice(i, 1);\n            }\n        }\n    }\n\n    getChild(key) {\n        console.log('Composite.getChild invoked');\n        return this.children[key];\n    }\n}\n\nvar composite1 = new Composite('C1');\ncomposite1.add(new Leaf('L1'));\ncomposite1.add(new Leaf('L2'));\nvar composite2 = new Composite('C2');\ncomposite2.add(composite1);\ncomposite1.getChild(1).operation();\ncomposite2.operation();\n```\n---\n\n### Typescript实现\n``` ts\nnamespace CompositePattern {\n    export interface Component {\n        operation(): void;\n    }\n\n    export class Composite implements Component {\n\n        private list: Component[];\n        private s: String;\n\n        constructor(s: String) {\n            this.list = [];\n            this.s = s;\n        }\n\n        public operation(): void {\n            console.log(\"`operation of `\", this.s)\n            for (var i = 0; i < this.list.length; i += 1) {\n                this.list[i].operation();\n            }\n        }\n\n        public add(c: Component): void {\n            this.list.push(c);\n        }\n\n        public remove(i: number): void {\n            if (this.list.length <= i) {\n                throw new Error(\"index out of bound!\");\n            }\n            this.list.splice(i, 1);\n        }\n    }\n\n    export class Leaf implements Component {\n        private s: String;\n        constructor(s: String) {\n            this.s = s;\n        }\n        public operation(): void {\n            console.log(\"`operation` of Leaf\", this.s, \" is called.\");\n        }\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Composite.md","raw":"---\ntitle: 组合模式(Composite)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Structural Patterns]\ntags: [javasctipt, 组合模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n---\n\n### ES6实现\n``` js\nclass Component {\n    constructor() {\n        console.log('Component Class created');\n    }\n\n    operation() {\n        console.log('Component.operation invoked');\n    }\n\n    add(Component) {\n        console.log('Component.add invoked');\n    }\n\n    remove(Component) {\n        console.log('Component.remove invoked');\n    }\n\n    getChild(key) {\n        console.log('Component.getChild invoked');\n    }\n}\n\nclass Leaf extends Component {\n    constructor(name) {\n        super();\n        this.name = name;\n        console.log('Leaf Class created');\n    }\n\n    operation() {\n        console.log('Leaf.operation invoked');\n        console.log(this.name);\n    }\n}\n\nclass Composite extends Component {\n    constructor(name) {\n        super();\n        this.name = name;\n        this.children = [];\n        console.log('Composite Class created');\n    }\n\n    operation() {\n        console.log('Composite operation for: ' + this.name)\n        for (var i in this.children) {\n            this.children[i].operation();\n        }\n    }\n\n    add(Component) {\n        console.log('Composite.add invoked');\n        this.children.push(Component);\n    }\n\n    remove(Component) {\n        console.log('Composite.remove invoked');\n        for (var i in this.children) {\n            if (this.children[i] === Component) {\n                this.children.splice(i, 1);\n            }\n        }\n    }\n\n    getChild(key) {\n        console.log('Composite.getChild invoked');\n        return this.children[key];\n    }\n}\n\nvar composite1 = new Composite('C1');\ncomposite1.add(new Leaf('L1'));\ncomposite1.add(new Leaf('L2'));\nvar composite2 = new Composite('C2');\ncomposite2.add(composite1);\ncomposite1.getChild(1).operation();\ncomposite2.operation();\n```\n---\n\n### Typescript实现\n``` ts\nnamespace CompositePattern {\n    export interface Component {\n        operation(): void;\n    }\n\n    export class Composite implements Component {\n\n        private list: Component[];\n        private s: String;\n\n        constructor(s: String) {\n            this.list = [];\n            this.s = s;\n        }\n\n        public operation(): void {\n            console.log(\"`operation of `\", this.s)\n            for (var i = 0; i < this.list.length; i += 1) {\n                this.list[i].operation();\n            }\n        }\n\n        public add(c: Component): void {\n            this.list.push(c);\n        }\n\n        public remove(i: number): void {\n            if (this.list.length <= i) {\n                throw new Error(\"index out of bound!\");\n            }\n            this.list.splice(i, 1);\n        }\n    }\n\n    export class Leaf implements Component {\n        private s: String;\n        constructor(s: String) {\n            this.s = s;\n        }\n        public operation(): void {\n            console.log(\"`operation` of Leaf\", this.s, \" is called.\");\n        }\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Composite","published":1,"updated":"2017-07-08T07:05:38.374Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4v0314y00082tmwlf5ymlj9","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component.operation invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    add(Component) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component.add invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    remove(Component) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component.remove invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    getChild(key) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component.getChild invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Leaf</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Leaf Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Leaf.operation invoked'</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Composite</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.children = [];</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Composite Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Composite operation for: '</span> + <span class=\"keyword\">this</span>.name)</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.children) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.children[i].operation();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    add(Component) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Composite.add invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.children.push(Component);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    remove(Component) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Composite.remove invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.children) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.children[i] === Component) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.children.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    getChild(key) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Composite.getChild invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.children[key];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> composite1 = <span class=\"keyword\">new</span> Composite(<span class=\"string\">'C1'</span>);</div><div class=\"line\">composite1.add(<span class=\"keyword\">new</span> Leaf(<span class=\"string\">'L1'</span>));</div><div class=\"line\">composite1.add(<span class=\"keyword\">new</span> Leaf(<span class=\"string\">'L2'</span>));</div><div class=\"line\"><span class=\"keyword\">var</span> composite2 = <span class=\"keyword\">new</span> Composite(<span class=\"string\">'C2'</span>);</div><div class=\"line\">composite2.add(composite1);</div><div class=\"line\">composite1.getChild(<span class=\"number\">1</span>).operation();</div><div class=\"line\">composite2.operation();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> CompositePattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Component &#123;</div><div class=\"line\">        operation(): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Composite <span class=\"keyword\">implements</span> Component &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> list: Component[];</div><div class=\"line\">        <span class=\"keyword\">private</span> s: <span class=\"built_in\">String</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">s: <span class=\"built_in\">String</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.list = [];</div><div class=\"line\">            <span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation of `\"</span>, <span class=\"keyword\">this</span>.s)</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.list.length; i += <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.list[i].operation();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> add(c: Component): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.list.push(c);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> remove(i: <span class=\"built_in\">number</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.list.length &lt;= i) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"index out of bound!\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">this</span>.list.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Leaf <span class=\"keyword\">implements</span> Component &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> s: <span class=\"built_in\">String</span>;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">s: <span class=\"built_in\">String</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">public</span> operation(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation` of Leaf\"</span>, <span class=\"keyword\">this</span>.s, <span class=\"string\">\" is called.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component.operation invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    add(Component) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component.add invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    remove(Component) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component.remove invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    getChild(key) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component.getChild invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Leaf</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Leaf Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Leaf.operation invoked'</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Composite</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.children = [];</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Composite Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Composite operation for: '</span> + <span class=\"keyword\">this</span>.name)</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.children) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.children[i].operation();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    add(Component) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Composite.add invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.children.push(Component);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    remove(Component) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Composite.remove invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.children) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.children[i] === Component) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.children.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    getChild(key) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Composite.getChild invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.children[key];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> composite1 = <span class=\"keyword\">new</span> Composite(<span class=\"string\">'C1'</span>);</div><div class=\"line\">composite1.add(<span class=\"keyword\">new</span> Leaf(<span class=\"string\">'L1'</span>));</div><div class=\"line\">composite1.add(<span class=\"keyword\">new</span> Leaf(<span class=\"string\">'L2'</span>));</div><div class=\"line\"><span class=\"keyword\">var</span> composite2 = <span class=\"keyword\">new</span> Composite(<span class=\"string\">'C2'</span>);</div><div class=\"line\">composite2.add(composite1);</div><div class=\"line\">composite1.getChild(<span class=\"number\">1</span>).operation();</div><div class=\"line\">composite2.operation();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> CompositePattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Component &#123;</div><div class=\"line\">        operation(): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Composite <span class=\"keyword\">implements</span> Component &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> list: Component[];</div><div class=\"line\">        <span class=\"keyword\">private</span> s: <span class=\"built_in\">String</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">s: <span class=\"built_in\">String</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.list = [];</div><div class=\"line\">            <span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation of `\"</span>, <span class=\"keyword\">this</span>.s)</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.list.length; i += <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.list[i].operation();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> add(c: Component): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.list.push(c);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> remove(i: <span class=\"built_in\">number</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.list.length &lt;= i) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"index out of bound!\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">this</span>.list.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Leaf <span class=\"keyword\">implements</span> Component &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> s: <span class=\"built_in\">String</span>;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">s: <span class=\"built_in\">String</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">public</span> operation(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation` of Leaf\"</span>, <span class=\"keyword\">this</span>.s, <span class=\"string\">\" is called.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"建造者模式(Builder)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n###  建造者模式包含如下四个角色：\n- Builder-抽象建造者为创建一个产品对象的各个部件指定抽象接口；\n- ConcreteBuilder-具体建造者实现了抽象建造者接口，实现各个部件的构造和装配方法，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象；\n- Product-产品角色是被构建的复杂对象，包含多个组成部件；\n- Director-指挥者负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在关联关系，可以在其construct()建造方法中调用建造者对象的部件构造与装配方法，完成复杂对象的建造\n\n### 建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：\n- 一方面它隔离了客户与生产过程；\n- 另一方面它负责控制产品的生成过程。指挥者针对抽象建造者编程，客户端只需要知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对象。\n\n---\n\n### ES6实现\n``` js\nclass Builder {\n    constructor() {\n        console.log('Builder Class created!');\n    }\n\n    buildPart(partName) {\n        console.log('Builder.buildPart invoked!');\n    }\n}\n\nclass ConcreteBuilder extends Builder {\n    constructor() {\n        super();\n        console.log('ConcreteBuilder Class created!');\n    }\n\n    buildPart(partName) {\n        super.buildPart(partName);\n        console.log('ConcreteBuilder.buildPart invoked!');\n        this.product = new Product(partName);\n    }\n    getResult() {\n        console.log('ConcreteBuilder.getResult invoked!');\n        return this.product;\n    }\n}\n\nclass Product {\n    constructor(material) {\n        console.log(\"Product class created\");\n        this.data = material\n    }\n}\n\nclass Director {\n    constructor() {\n        this.structure = ['Prod1', 'Prod2', 'Prod3'];\n        console.log(\"Director class created\");\n    }\n\n    construct() {\n        console.log(\"Director.Construct created\");\n        for (var prodName in this.structure) {\n            let builder = new ConcreteBuilder();\n            builder.buildPart(this.structure[prodName]);\n            builder.getResult();\n        }\n    }\n}\n\nlet director = new Director();\ndirector.construct();\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace BuilderPattern {\n    export class UserBuilder {\n        private name: string;\n        private age: number;\n        private phone: string;\n        private address: string;\n\n        constructor(name: string) {\n            this.name = name;\n        }\n\n        get Name() {\n            return this.name;\n        }\n        setAge(value: number): UserBuilder {\n            this.age = value;\n            return this;\n        }\n        get Age() {\n            return this.age;\n        }\n        setPhone(value: string): UserBuilder {\n            this.phone = value;\n            return this;\n        }\n        get Phone() {\n            return this.phone;\n        }\n        setAddress(value: string): UserBuilder {\n            this.address = value;\n            return this;\n        }\n        get Address() {\n            return this.address;\n        }\n\n        build(): User {\n            return new User(this);\n        }\n    }\n\n    export class User {\n        private name: string;\n        private age: number;\n        private phone: string;\n        private address: string;\n\n        constructor(builder: UserBuilder) {\n            this.name = builder.Name;\n            this.age = builder.Age;\n            this.phone = builder.Phone;\n            this.address = builder.Address\n        }\n\n        get Name() {\n            return this.name;\n        }\n        get Age() {\n            return this.age;\n        }\n        get Phone() {\n            return this.phone;\n        }\n        get Address() {\n            return this.address;\n        }\n    }\n\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Builder.md","raw":"---\ntitle:  建造者模式(Builder)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Creational Patterns]\ntags: [javasctipt,  建造者模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n###  建造者模式包含如下四个角色：\n- Builder-抽象建造者为创建一个产品对象的各个部件指定抽象接口；\n- ConcreteBuilder-具体建造者实现了抽象建造者接口，实现各个部件的构造和装配方法，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象；\n- Product-产品角色是被构建的复杂对象，包含多个组成部件；\n- Director-指挥者负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在关联关系，可以在其construct()建造方法中调用建造者对象的部件构造与装配方法，完成复杂对象的建造\n\n### 建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：\n- 一方面它隔离了客户与生产过程；\n- 另一方面它负责控制产品的生成过程。指挥者针对抽象建造者编程，客户端只需要知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对象。\n\n---\n\n### ES6实现\n``` js\nclass Builder {\n    constructor() {\n        console.log('Builder Class created!');\n    }\n\n    buildPart(partName) {\n        console.log('Builder.buildPart invoked!');\n    }\n}\n\nclass ConcreteBuilder extends Builder {\n    constructor() {\n        super();\n        console.log('ConcreteBuilder Class created!');\n    }\n\n    buildPart(partName) {\n        super.buildPart(partName);\n        console.log('ConcreteBuilder.buildPart invoked!');\n        this.product = new Product(partName);\n    }\n    getResult() {\n        console.log('ConcreteBuilder.getResult invoked!');\n        return this.product;\n    }\n}\n\nclass Product {\n    constructor(material) {\n        console.log(\"Product class created\");\n        this.data = material\n    }\n}\n\nclass Director {\n    constructor() {\n        this.structure = ['Prod1', 'Prod2', 'Prod3'];\n        console.log(\"Director class created\");\n    }\n\n    construct() {\n        console.log(\"Director.Construct created\");\n        for (var prodName in this.structure) {\n            let builder = new ConcreteBuilder();\n            builder.buildPart(this.structure[prodName]);\n            builder.getResult();\n        }\n    }\n}\n\nlet director = new Director();\ndirector.construct();\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace BuilderPattern {\n    export class UserBuilder {\n        private name: string;\n        private age: number;\n        private phone: string;\n        private address: string;\n\n        constructor(name: string) {\n            this.name = name;\n        }\n\n        get Name() {\n            return this.name;\n        }\n        setAge(value: number): UserBuilder {\n            this.age = value;\n            return this;\n        }\n        get Age() {\n            return this.age;\n        }\n        setPhone(value: string): UserBuilder {\n            this.phone = value;\n            return this;\n        }\n        get Phone() {\n            return this.phone;\n        }\n        setAddress(value: string): UserBuilder {\n            this.address = value;\n            return this;\n        }\n        get Address() {\n            return this.address;\n        }\n\n        build(): User {\n            return new User(this);\n        }\n    }\n\n    export class User {\n        private name: string;\n        private age: number;\n        private phone: string;\n        private address: string;\n\n        constructor(builder: UserBuilder) {\n            this.name = builder.Name;\n            this.age = builder.Age;\n            this.phone = builder.Phone;\n            this.address = builder.Address\n        }\n\n        get Name() {\n            return this.name;\n        }\n        get Age() {\n            return this.age;\n        }\n        get Phone() {\n            return this.phone;\n        }\n        get Address() {\n            return this.address;\n        }\n    }\n\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Builder","published":1,"updated":"2017-07-08T07:05:23.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4v0315200092tmwjy3qn052","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"建造者模式包含如下四个角色：\"><a href=\"#建造者模式包含如下四个角色：\" class=\"headerlink\" title=\"建造者模式包含如下四个角色：\"></a>建造者模式包含如下四个角色：</h3><ul>\n<li>Builder-抽象建造者为创建一个产品对象的各个部件指定抽象接口；</li>\n<li>ConcreteBuilder-具体建造者实现了抽象建造者接口，实现各个部件的构造和装配方法，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象；</li>\n<li>Product-产品角色是被构建的复杂对象，包含多个组成部件；</li>\n<li>Director-指挥者负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在关联关系，可以在其construct()建造方法中调用建造者对象的部件构造与装配方法，完成复杂对象的建造</li>\n</ul>\n<h3 id=\"建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：\"><a href=\"#建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：\" class=\"headerlink\" title=\"建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：\"></a>建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：</h3><ul>\n<li>一方面它隔离了客户与生产过程；</li>\n<li>另一方面它负责控制产品的生成过程。指挥者针对抽象建造者编程，客户端只需要知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对象。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Builder Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    buildPart(partName) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Builder.buildPart invoked!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title\">Builder</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteBuilder Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    buildPart(partName) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.buildPart(partName);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteBuilder.buildPart invoked!'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.product = <span class=\"keyword\">new</span> Product(partName);</div><div class=\"line\">    &#125;</div><div class=\"line\">    getResult() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteBuilder.getResult invoked!'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.product;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(material) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Product class created\"</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.data = material</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Director</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.structure = [<span class=\"string\">'Prod1'</span>, <span class=\"string\">'Prod2'</span>, <span class=\"string\">'Prod3'</span>];</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Director class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    construct() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Director.Construct created\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> prodName <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.structure) &#123;</div><div class=\"line\">            <span class=\"keyword\">let</span> builder = <span class=\"keyword\">new</span> ConcreteBuilder();</div><div class=\"line\">            builder.buildPart(<span class=\"keyword\">this</span>.structure[prodName]);</div><div class=\"line\">            builder.getResult();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> director = <span class=\"keyword\">new</span> Director();</div><div class=\"line\">director.construct();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> BuilderPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> UserBuilder &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> name: <span class=\"built_in\">string</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> age: <span class=\"built_in\">number</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> phone: <span class=\"built_in\">string</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> address: <span class=\"built_in\">string</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">get</span> Name() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">        &#125;</div><div class=\"line\">        setAge(value: <span class=\"built_in\">number</span>): UserBuilder &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.age = value;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">get</span> Age() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</div><div class=\"line\">        &#125;</div><div class=\"line\">        setPhone(value: <span class=\"built_in\">string</span>): UserBuilder &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.phone = value;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">get</span> Phone() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.phone;</div><div class=\"line\">        &#125;</div><div class=\"line\">        setAddress(value: <span class=\"built_in\">string</span>): UserBuilder &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.address = value;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">get</span> Address() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.address;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        build(): User &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> User &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> name: <span class=\"built_in\">string</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> age: <span class=\"built_in\">number</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> phone: <span class=\"built_in\">string</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> address: <span class=\"built_in\">string</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">builder: UserBuilder</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name = builder.Name;</div><div class=\"line\">            <span class=\"keyword\">this</span>.age = builder.Age;</div><div class=\"line\">            <span class=\"keyword\">this</span>.phone = builder.Phone;</div><div class=\"line\">            <span class=\"keyword\">this</span>.address = builder.Address</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">get</span> Name() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">get</span> Age() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">get</span> Phone() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.phone;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">get</span> Address() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.address;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><p><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></p>\n</li>\n<li><p><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></p>\n</li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"建造者模式包含如下四个角色：\"><a href=\"#建造者模式包含如下四个角色：\" class=\"headerlink\" title=\"建造者模式包含如下四个角色：\"></a>建造者模式包含如下四个角色：</h3><ul>\n<li>Builder-抽象建造者为创建一个产品对象的各个部件指定抽象接口；</li>\n<li>ConcreteBuilder-具体建造者实现了抽象建造者接口，实现各个部件的构造和装配方法，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象；</li>\n<li>Product-产品角色是被构建的复杂对象，包含多个组成部件；</li>\n<li>Director-指挥者负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在关联关系，可以在其construct()建造方法中调用建造者对象的部件构造与装配方法，完成复杂对象的建造</li>\n</ul>\n<h3 id=\"建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：\"><a href=\"#建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：\" class=\"headerlink\" title=\"建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：\"></a>建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：</h3><ul>\n<li>一方面它隔离了客户与生产过程；</li>\n<li>另一方面它负责控制产品的生成过程。指挥者针对抽象建造者编程，客户端只需要知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对象。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Builder Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    buildPart(partName) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Builder.buildPart invoked!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title\">Builder</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteBuilder Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    buildPart(partName) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.buildPart(partName);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteBuilder.buildPart invoked!'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.product = <span class=\"keyword\">new</span> Product(partName);</div><div class=\"line\">    &#125;</div><div class=\"line\">    getResult() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteBuilder.getResult invoked!'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.product;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(material) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Product class created\"</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.data = material</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Director</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.structure = [<span class=\"string\">'Prod1'</span>, <span class=\"string\">'Prod2'</span>, <span class=\"string\">'Prod3'</span>];</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Director class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    construct() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Director.Construct created\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> prodName <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.structure) &#123;</div><div class=\"line\">            <span class=\"keyword\">let</span> builder = <span class=\"keyword\">new</span> ConcreteBuilder();</div><div class=\"line\">            builder.buildPart(<span class=\"keyword\">this</span>.structure[prodName]);</div><div class=\"line\">            builder.getResult();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> director = <span class=\"keyword\">new</span> Director();</div><div class=\"line\">director.construct();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> BuilderPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> UserBuilder &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> name: <span class=\"built_in\">string</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> age: <span class=\"built_in\">number</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> phone: <span class=\"built_in\">string</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> address: <span class=\"built_in\">string</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">get</span> Name() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">        &#125;</div><div class=\"line\">        setAge(value: <span class=\"built_in\">number</span>): UserBuilder &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.age = value;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">get</span> Age() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</div><div class=\"line\">        &#125;</div><div class=\"line\">        setPhone(value: <span class=\"built_in\">string</span>): UserBuilder &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.phone = value;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">get</span> Phone() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.phone;</div><div class=\"line\">        &#125;</div><div class=\"line\">        setAddress(value: <span class=\"built_in\">string</span>): UserBuilder &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.address = value;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">get</span> Address() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.address;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        build(): User &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> User &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> name: <span class=\"built_in\">string</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> age: <span class=\"built_in\">number</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> phone: <span class=\"built_in\">string</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> address: <span class=\"built_in\">string</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">builder: UserBuilder</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name = builder.Name;</div><div class=\"line\">            <span class=\"keyword\">this</span>.age = builder.Age;</div><div class=\"line\">            <span class=\"keyword\">this</span>.phone = builder.Phone;</div><div class=\"line\">            <span class=\"keyword\">this</span>.address = builder.Address</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">get</span> Name() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">get</span> Age() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">get</span> Phone() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.phone;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">get</span> Address() &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.address;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><p><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></p>\n</li>\n<li><p><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></p>\n</li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"命令模式(Command)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 命令模式的定义\n- 命令模式：将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；\n- 对请求排队或者记录请求日志，以及支持可撤销的操作。\n- 命令模式是一种对象行为型模式，其别名为动作模式或事务模式。\n\n### 命令模式包含四个角色：\n- Command-抽象命令类中声明了用于执行请求等方法，通过这些方法可以调用请求接收者的相关操作；\n- ConcreteCommand-具体命令类是抽象命令类的子类，实现了在抽象命令类中声明的方法，它对应具体的接收者对象，将接收者对象的动作绑定其中；\n- Invoker-调用者即请求的发送者，又称为请求者，它通过命令对象来执行请求；\n- Receiver-接收者执行与请求相关的操作，它具体实现对请求的业务处理。\n\n### ES6实现\n``` js\nclass Invoker {\n    constructor() {\n        console.log('Invoker Class created');\n    }\n\n    storeCommand(command) {\n        this.command = command;\n        console.log('Invoker.storeCommand invoked');\n    }\n}\n\nclass Command {\n    constructor() {\n        console.log('Command Class created');\n    }\n\n    execute() {\n        console.log('Command.execute invoked');\n    }\n}\n\nclass ConcreteCommand extends Command {\n    constructor(receiver, state) {\n        super();\n        this.receiver = receiver;\n        console.log('ConcreteCommand Class created');\n    }\n\n    execute() {\n        console.log('ConcreteCommand.execute invoked');\n        this.receiver.action();\n    }\n}\n\nclass Receiver {\n    constructor() {\n        console.log('Receiver Class created');\n    }\n\n    action() {\n        console.log('Receiver.action invoked');\n    }\n}\n\nvar invoker = new Invoker();\nvar receiver = new Receiver();\nvar command = new ConcreteCommand(receiver);\ninvoker.storeCommand(command);\ninvoker.command.execute();\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace CommandPattern {\n    export class Command {\n        public execute(): void {\n            throw new Error(\"Abstract method!\");\n        }\n    }\n\n    export class ConcreteCommand1 extends Command {\n        private receiver: Receiver;\n\n        constructor(receiver: Receiver) {\n            super();\n            this.receiver = receiver;\n        }\n\n        public execute(): void {\n            console.log(\"`execute` method of ConcreteCommand1 is being called!\");\n            this.receiver.action();\n        }\n    }\n\n    export class ConcreteCommand2 extends Command {\n        private receiver: Receiver;\n\n        constructor(receiver: Receiver) {\n            super();\n            this.receiver = receiver;\n        }\n\n        public execute(): void {\n            console.log(\"`execute` method of ConcreteCommand2 is being called!\");\n            this.receiver.action();\n        }\n    }\n\n    export class Invoker {\n        private commands: Command[];\n\n        constructor() {\n            this.commands = [];\n        }\n\n        public storeAndExecute(cmd: Command) {\n            this.commands.push(cmd);\n            cmd.execute();\n        }\n    }\n\n    export class Receiver {\n        public action(): void {\n            console.log(\"action is being called!\");\n        }\n    }\n}\n\n(function main() {\n    var receiver: CommandPattern.Receiver = new CommandPattern.Receiver(),\n        command1: CommandPattern.Command  = new CommandPattern.ConcreteCommand1(receiver),\n        command2: CommandPattern.Command  = new CommandPattern.ConcreteCommand2(receiver),\n        invoker : CommandPattern.Invoker  = new CommandPattern.Invoker();\n\n    invoker.storeAndExecute(command1);\n    invoker.storeAndExecute(command2);\n\n}());\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Command.md","raw":"---\ntitle: 命令模式(Command)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Behavioral Patterns]\ntags: [javasctipt, 命令模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 命令模式的定义\n- 命令模式：将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；\n- 对请求排队或者记录请求日志，以及支持可撤销的操作。\n- 命令模式是一种对象行为型模式，其别名为动作模式或事务模式。\n\n### 命令模式包含四个角色：\n- Command-抽象命令类中声明了用于执行请求等方法，通过这些方法可以调用请求接收者的相关操作；\n- ConcreteCommand-具体命令类是抽象命令类的子类，实现了在抽象命令类中声明的方法，它对应具体的接收者对象，将接收者对象的动作绑定其中；\n- Invoker-调用者即请求的发送者，又称为请求者，它通过命令对象来执行请求；\n- Receiver-接收者执行与请求相关的操作，它具体实现对请求的业务处理。\n\n### ES6实现\n``` js\nclass Invoker {\n    constructor() {\n        console.log('Invoker Class created');\n    }\n\n    storeCommand(command) {\n        this.command = command;\n        console.log('Invoker.storeCommand invoked');\n    }\n}\n\nclass Command {\n    constructor() {\n        console.log('Command Class created');\n    }\n\n    execute() {\n        console.log('Command.execute invoked');\n    }\n}\n\nclass ConcreteCommand extends Command {\n    constructor(receiver, state) {\n        super();\n        this.receiver = receiver;\n        console.log('ConcreteCommand Class created');\n    }\n\n    execute() {\n        console.log('ConcreteCommand.execute invoked');\n        this.receiver.action();\n    }\n}\n\nclass Receiver {\n    constructor() {\n        console.log('Receiver Class created');\n    }\n\n    action() {\n        console.log('Receiver.action invoked');\n    }\n}\n\nvar invoker = new Invoker();\nvar receiver = new Receiver();\nvar command = new ConcreteCommand(receiver);\ninvoker.storeCommand(command);\ninvoker.command.execute();\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace CommandPattern {\n    export class Command {\n        public execute(): void {\n            throw new Error(\"Abstract method!\");\n        }\n    }\n\n    export class ConcreteCommand1 extends Command {\n        private receiver: Receiver;\n\n        constructor(receiver: Receiver) {\n            super();\n            this.receiver = receiver;\n        }\n\n        public execute(): void {\n            console.log(\"`execute` method of ConcreteCommand1 is being called!\");\n            this.receiver.action();\n        }\n    }\n\n    export class ConcreteCommand2 extends Command {\n        private receiver: Receiver;\n\n        constructor(receiver: Receiver) {\n            super();\n            this.receiver = receiver;\n        }\n\n        public execute(): void {\n            console.log(\"`execute` method of ConcreteCommand2 is being called!\");\n            this.receiver.action();\n        }\n    }\n\n    export class Invoker {\n        private commands: Command[];\n\n        constructor() {\n            this.commands = [];\n        }\n\n        public storeAndExecute(cmd: Command) {\n            this.commands.push(cmd);\n            cmd.execute();\n        }\n    }\n\n    export class Receiver {\n        public action(): void {\n            console.log(\"action is being called!\");\n        }\n    }\n}\n\n(function main() {\n    var receiver: CommandPattern.Receiver = new CommandPattern.Receiver(),\n        command1: CommandPattern.Command  = new CommandPattern.ConcreteCommand1(receiver),\n        command2: CommandPattern.Command  = new CommandPattern.ConcreteCommand2(receiver),\n        invoker : CommandPattern.Invoker  = new CommandPattern.Invoker();\n\n    invoker.storeAndExecute(command1);\n    invoker.storeAndExecute(command2);\n\n}());\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Command","published":1,"updated":"2017-07-08T07:05:33.861Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4v03156000c2tmwoim5ffnm","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"命令模式的定义\"><a href=\"#命令模式的定义\" class=\"headerlink\" title=\"命令模式的定义\"></a>命令模式的定义</h3><ul>\n<li>命令模式：将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；</li>\n<li>对请求排队或者记录请求日志，以及支持可撤销的操作。</li>\n<li>命令模式是一种对象行为型模式，其别名为动作模式或事务模式。</li>\n</ul>\n<h3 id=\"命令模式包含四个角色：\"><a href=\"#命令模式包含四个角色：\" class=\"headerlink\" title=\"命令模式包含四个角色：\"></a>命令模式包含四个角色：</h3><ul>\n<li>Command-抽象命令类中声明了用于执行请求等方法，通过这些方法可以调用请求接收者的相关操作；</li>\n<li>ConcreteCommand-具体命令类是抽象命令类的子类，实现了在抽象命令类中声明的方法，它对应具体的接收者对象，将接收者对象的动作绑定其中；</li>\n<li>Invoker-调用者即请求的发送者，又称为请求者，它通过命令对象来执行请求；</li>\n<li>Receiver-接收者执行与请求相关的操作，它具体实现对请求的业务处理。</li>\n</ul>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Invoker</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Invoker Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    storeCommand(command) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.command = command;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Invoker.storeCommand invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Command</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Command Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    execute() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Command.execute invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteCommand</span> <span class=\"keyword\">extends</span> <span class=\"title\">Command</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(receiver, state) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.receiver = receiver;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteCommand Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    execute() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteCommand.execute invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.receiver.action();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Receiver</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Receiver Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    action() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Receiver.action invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> invoker = <span class=\"keyword\">new</span> Invoker();</div><div class=\"line\"><span class=\"keyword\">var</span> receiver = <span class=\"keyword\">new</span> Receiver();</div><div class=\"line\"><span class=\"keyword\">var</span> command = <span class=\"keyword\">new</span> ConcreteCommand(receiver);</div><div class=\"line\">invoker.storeCommand(command);</div><div class=\"line\">invoker.command.execute();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> CommandPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Command &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> execute(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract method!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteCommand1 <span class=\"keyword\">extends</span> Command &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> receiver: Receiver;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">receiver: Receiver</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>();</div><div class=\"line\">            <span class=\"keyword\">this</span>.receiver = receiver;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> execute(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`execute` method of ConcreteCommand1 is being called!\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.receiver.action();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteCommand2 <span class=\"keyword\">extends</span> Command &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> receiver: Receiver;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">receiver: Receiver</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>();</div><div class=\"line\">            <span class=\"keyword\">this</span>.receiver = receiver;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> execute(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`execute` method of ConcreteCommand2 is being called!\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.receiver.action();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Invoker &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> commands: Command[];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.commands = [];</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> storeAndExecute(cmd: Command) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.commands.push(cmd);</div><div class=\"line\">            cmd.execute();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Receiver &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> action(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"action is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> receiver: CommandPattern.Receiver = <span class=\"keyword\">new</span> CommandPattern.Receiver(),</div><div class=\"line\">        command1: CommandPattern.Command  = <span class=\"keyword\">new</span> CommandPattern.ConcreteCommand1(receiver),</div><div class=\"line\">        command2: CommandPattern.Command  = <span class=\"keyword\">new</span> CommandPattern.ConcreteCommand2(receiver),</div><div class=\"line\">        invoker : CommandPattern.Invoker  = <span class=\"keyword\">new</span> CommandPattern.Invoker();</div><div class=\"line\"></div><div class=\"line\">    invoker.storeAndExecute(command1);</div><div class=\"line\">    invoker.storeAndExecute(command2);</div><div class=\"line\"></div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"命令模式的定义\"><a href=\"#命令模式的定义\" class=\"headerlink\" title=\"命令模式的定义\"></a>命令模式的定义</h3><ul>\n<li>命令模式：将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；</li>\n<li>对请求排队或者记录请求日志，以及支持可撤销的操作。</li>\n<li>命令模式是一种对象行为型模式，其别名为动作模式或事务模式。</li>\n</ul>\n<h3 id=\"命令模式包含四个角色：\"><a href=\"#命令模式包含四个角色：\" class=\"headerlink\" title=\"命令模式包含四个角色：\"></a>命令模式包含四个角色：</h3><ul>\n<li>Command-抽象命令类中声明了用于执行请求等方法，通过这些方法可以调用请求接收者的相关操作；</li>\n<li>ConcreteCommand-具体命令类是抽象命令类的子类，实现了在抽象命令类中声明的方法，它对应具体的接收者对象，将接收者对象的动作绑定其中；</li>\n<li>Invoker-调用者即请求的发送者，又称为请求者，它通过命令对象来执行请求；</li>\n<li>Receiver-接收者执行与请求相关的操作，它具体实现对请求的业务处理。</li>\n</ul>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Invoker</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Invoker Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    storeCommand(command) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.command = command;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Invoker.storeCommand invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Command</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Command Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    execute() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Command.execute invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteCommand</span> <span class=\"keyword\">extends</span> <span class=\"title\">Command</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(receiver, state) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.receiver = receiver;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteCommand Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    execute() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteCommand.execute invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.receiver.action();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Receiver</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Receiver Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    action() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Receiver.action invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> invoker = <span class=\"keyword\">new</span> Invoker();</div><div class=\"line\"><span class=\"keyword\">var</span> receiver = <span class=\"keyword\">new</span> Receiver();</div><div class=\"line\"><span class=\"keyword\">var</span> command = <span class=\"keyword\">new</span> ConcreteCommand(receiver);</div><div class=\"line\">invoker.storeCommand(command);</div><div class=\"line\">invoker.command.execute();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> CommandPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Command &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> execute(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract method!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteCommand1 <span class=\"keyword\">extends</span> Command &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> receiver: Receiver;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">receiver: Receiver</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>();</div><div class=\"line\">            <span class=\"keyword\">this</span>.receiver = receiver;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> execute(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`execute` method of ConcreteCommand1 is being called!\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.receiver.action();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteCommand2 <span class=\"keyword\">extends</span> Command &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> receiver: Receiver;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">receiver: Receiver</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>();</div><div class=\"line\">            <span class=\"keyword\">this</span>.receiver = receiver;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> execute(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`execute` method of ConcreteCommand2 is being called!\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.receiver.action();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Invoker &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> commands: Command[];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.commands = [];</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> storeAndExecute(cmd: Command) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.commands.push(cmd);</div><div class=\"line\">            cmd.execute();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Receiver &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> action(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"action is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> receiver: CommandPattern.Receiver = <span class=\"keyword\">new</span> CommandPattern.Receiver(),</div><div class=\"line\">        command1: CommandPattern.Command  = <span class=\"keyword\">new</span> CommandPattern.ConcreteCommand1(receiver),</div><div class=\"line\">        command2: CommandPattern.Command  = <span class=\"keyword\">new</span> CommandPattern.ConcreteCommand2(receiver),</div><div class=\"line\">        invoker : CommandPattern.Invoker  = <span class=\"keyword\">new</span> CommandPattern.Invoker();</div><div class=\"line\"></div><div class=\"line\">    invoker.storeAndExecute(command1);</div><div class=\"line\">    invoker.storeAndExecute(command2);</div><div class=\"line\"></div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"外观模式(Facade)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 外观模式的定义\n- 外观模式：在外观模式中，外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，\n- 外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。\n\n### 外观模式包含二个角色：\n- Facade-外观角色是在客户端直接调用的角色，在外观角色中可以知道相关的(一个或者多个)子系统的功能和责任，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；\n- SubSystem-在软件系统中可以同时有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能\n\n---\n\n### ES6实现\n``` js\nclass Facade {\n    constructor() {\n        console.log(\"Facade class created\");\n    }\n\n    gotoPage(dp) {\n        switch (dp) {\n            case \"Facade\":\n                console.log(\"This is the Facade\");\n                break;\n            case \"AbstractFactory\":\n                console.log(\"This is the AbstractFactory\");\n                break;\n            default:\n                console.log(\"nothing to be matched\");\n        }\n    }\n}\n\nlet facade = new Facade();\nfacade.gotoPage('Facade');\nfacade.gotoPage('AbstractFactory');\n```\n---\n\n### Typescript实现\n``` ts\nnamespace FacadePattern {\n\n    export class Part1 {\n        public method1(): void {\n            console.log(\"`method1` of Part1\");\n        }\n    }\n\n    export class Part2 {\n        public method2(): void {\n            console.log(\"`method2` of Part2\");\n        }\n    }\n\n    export class Part3 {\n        public method3(): void {\n            console.log(\"`method3` of Part3\");\n        }\n    }\n\n    export class Facade {\n        private part1: Part1 = new Part1();\n        private part2: Part2 = new Part2();\n        private part3: Part3 = new Part3();\n\n        public operation1(): void {\n            console.log(\"`operation1` is called ===\");\n            this.part1.method1();\n            this.part2.method2();\n            console.log(\"==========================\");\n        }\n\n        public operation2(): void {\n            console.log(\"`operation2` is called ===\");\n            this.part1.method1();\n            this.part3.method3();\n            console.log(\"==========================\");\n        }\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Facade.md","raw":"---\ntitle: 外观模式(Facade)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Structural Patterns]\ntags: [javasctipt, 外观模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 外观模式的定义\n- 外观模式：在外观模式中，外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，\n- 外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。\n\n### 外观模式包含二个角色：\n- Facade-外观角色是在客户端直接调用的角色，在外观角色中可以知道相关的(一个或者多个)子系统的功能和责任，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；\n- SubSystem-在软件系统中可以同时有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能\n\n---\n\n### ES6实现\n``` js\nclass Facade {\n    constructor() {\n        console.log(\"Facade class created\");\n    }\n\n    gotoPage(dp) {\n        switch (dp) {\n            case \"Facade\":\n                console.log(\"This is the Facade\");\n                break;\n            case \"AbstractFactory\":\n                console.log(\"This is the AbstractFactory\");\n                break;\n            default:\n                console.log(\"nothing to be matched\");\n        }\n    }\n}\n\nlet facade = new Facade();\nfacade.gotoPage('Facade');\nfacade.gotoPage('AbstractFactory');\n```\n---\n\n### Typescript实现\n``` ts\nnamespace FacadePattern {\n\n    export class Part1 {\n        public method1(): void {\n            console.log(\"`method1` of Part1\");\n        }\n    }\n\n    export class Part2 {\n        public method2(): void {\n            console.log(\"`method2` of Part2\");\n        }\n    }\n\n    export class Part3 {\n        public method3(): void {\n            console.log(\"`method3` of Part3\");\n        }\n    }\n\n    export class Facade {\n        private part1: Part1 = new Part1();\n        private part2: Part2 = new Part2();\n        private part3: Part3 = new Part3();\n\n        public operation1(): void {\n            console.log(\"`operation1` is called ===\");\n            this.part1.method1();\n            this.part2.method2();\n            console.log(\"==========================\");\n        }\n\n        public operation2(): void {\n            console.log(\"`operation2` is called ===\");\n            this.part1.method1();\n            this.part3.method3();\n            console.log(\"==========================\");\n        }\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Facade","published":1,"updated":"2017-07-08T07:05:54.287Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4v03157000d2tmwoa4js7p0","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"外观模式的定义\"><a href=\"#外观模式的定义\" class=\"headerlink\" title=\"外观模式的定义\"></a>外观模式的定义</h3><ul>\n<li>外观模式：在外观模式中，外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，</li>\n<li>外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。</li>\n</ul>\n<h3 id=\"外观模式包含二个角色：\"><a href=\"#外观模式包含二个角色：\" class=\"headerlink\" title=\"外观模式包含二个角色：\"></a>外观模式包含二个角色：</h3><ul>\n<li>Facade-外观角色是在客户端直接调用的角色，在外观角色中可以知道相关的(一个或者多个)子系统的功能和责任，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；</li>\n<li>SubSystem-在软件系统中可以同时有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Facade</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Facade class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    gotoPage(dp) &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (dp) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"Facade\"</span>:</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"This is the Facade\"</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"AbstractFactory\"</span>:</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"This is the AbstractFactory\"</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"nothing to be matched\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> facade = <span class=\"keyword\">new</span> Facade();</div><div class=\"line\">facade.gotoPage(<span class=\"string\">'Facade'</span>);</div><div class=\"line\">facade.gotoPage(<span class=\"string\">'AbstractFactory'</span>);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> FacadePattern &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Part1 &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> method1(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`method1` of Part1\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Part2 &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> method2(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`method2` of Part2\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Part3 &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> method3(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`method3` of Part3\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Facade &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> part1: Part1 = <span class=\"keyword\">new</span> Part1();</div><div class=\"line\">        <span class=\"keyword\">private</span> part2: Part2 = <span class=\"keyword\">new</span> Part2();</div><div class=\"line\">        <span class=\"keyword\">private</span> part3: Part3 = <span class=\"keyword\">new</span> Part3();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation1(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation1` is called ===\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.part1.method1();</div><div class=\"line\">            <span class=\"keyword\">this</span>.part2.method2();</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"==========================\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation2(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation2` is called ===\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.part1.method1();</div><div class=\"line\">            <span class=\"keyword\">this</span>.part3.method3();</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"==========================\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"外观模式的定义\"><a href=\"#外观模式的定义\" class=\"headerlink\" title=\"外观模式的定义\"></a>外观模式的定义</h3><ul>\n<li>外观模式：在外观模式中，外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，</li>\n<li>外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。</li>\n</ul>\n<h3 id=\"外观模式包含二个角色：\"><a href=\"#外观模式包含二个角色：\" class=\"headerlink\" title=\"外观模式包含二个角色：\"></a>外观模式包含二个角色：</h3><ul>\n<li>Facade-外观角色是在客户端直接调用的角色，在外观角色中可以知道相关的(一个或者多个)子系统的功能和责任，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；</li>\n<li>SubSystem-在软件系统中可以同时有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Facade</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Facade class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    gotoPage(dp) &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (dp) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"Facade\"</span>:</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"This is the Facade\"</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"AbstractFactory\"</span>:</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"This is the AbstractFactory\"</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"nothing to be matched\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> facade = <span class=\"keyword\">new</span> Facade();</div><div class=\"line\">facade.gotoPage(<span class=\"string\">'Facade'</span>);</div><div class=\"line\">facade.gotoPage(<span class=\"string\">'AbstractFactory'</span>);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> FacadePattern &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Part1 &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> method1(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`method1` of Part1\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Part2 &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> method2(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`method2` of Part2\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Part3 &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> method3(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`method3` of Part3\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Facade &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> part1: Part1 = <span class=\"keyword\">new</span> Part1();</div><div class=\"line\">        <span class=\"keyword\">private</span> part2: Part2 = <span class=\"keyword\">new</span> Part2();</div><div class=\"line\">        <span class=\"keyword\">private</span> part3: Part3 = <span class=\"keyword\">new</span> Part3();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation1(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation1` is called ===\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.part1.method1();</div><div class=\"line\">            <span class=\"keyword\">this</span>.part2.method2();</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"==========================\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation2(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation2` is called ===\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.part1.method1();</div><div class=\"line\">            <span class=\"keyword\">this</span>.part3.method3();</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"==========================\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"装饰模式(Decorator)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 装饰模式的定义\n- 装饰模式：装饰模式用于动态地给一个对象增加一些额外的职责，就增加对象功 能来说，装饰模式比生成子类实现更为灵活。它是一种对象结构型模 式。\n\n### 装饰模式包含四个角色：\n- Component-抽象构件定义了对象的接口，可以给这些对 象动态增加职责（方法）；\n- ConcreteComponent-具体构件定义了具体的构件对象，实现了 在抽象构件中声明的方法，装饰器可以给它增加额外的职责（方法）；\n- Decorator-抽象装饰类是抽象构件类的子类，用于给具体构件增加职责，但是具 体职责在其子类中实现；\n- ConcreteDecorator-具体装饰类是抽象装饰类的子类，负责向构 件添加新的职责。\n\n---\n\n### ES6实现\n``` js\nclass Component {\n    constructor() {\n        console.log('Component Class created');\n    }\n\n    operation() {\n        console.log('Component.operation invoked');\n    }\n}\n\nclass ConcreteComponent extends Component {\n    constructor() {\n        super();\n        console.log('ConcreteComponent Class created');\n    }\n\n    operation() {\n        console.log('ConcreteComponent.operation invoked');\n    }\n}\n\nclass Decorator extends Component {\n    constructor(component) {\n        super();\n        this.component = component;\n        console.log('Decorator Class created');\n    }\n\n    operation() {\n        console.log('Decorator.operation invoked');\n        this.component.operation()\n    }\n}\n\nclass ConcreteDecoratorA extends Decorator {\n    constructor(component, sign) {\n        super(component);\n        this.addedState = sign;\n        console.log('ConcreteDecoratorA Class created');\n    }\n\n    operation() {\n        super.operation();\n        console.log('ConcreteDecoratorA.operation invoked');\n        console.log(this.addedState)\n    }\n}\n\nclass ConcreteDecoratorB extends Decorator {\n    constructor(component, sign) {\n        super(component);\n        this.addedState = sign;\n        console.log('ConcreteDecoratorB Class created');\n    }\n\n    operation() {\n        super.operation();\n        console.log('ConcreteDecoratorB.operation invoked');\n        console.log(this.addedState + this.addedState + this.addedState + this.addedState + this.addedState);\n    }\n\n    addedBehavior() {\n        this.operation();\n        console.log('ConcreteDecoratorB.operation invoked');\n    }\n}\n\nvar component = new ConcreteComponent();\nvar decoratorA = new ConcreteDecoratorA(component, 'decoratorA');\nvar decoratorB = new ConcreteDecoratorB(component, 'decoratorB');\nconsole.log('component: ');\ncomponent.operation();\nconsole.log('decoratorA: ');\ndecoratorA.operation();\nconsole.log('decoratorB: ');\ndecoratorB.addedBehavior();\n```\n---\n\n### Typescript实现\n``` ts\nnamespace DecoratorPattern {\n\n    export interface Component {\n        operation(): void;\n    }\n\n    export class ConcreteComponent implements Component {\n        private s: String;\n\n        constructor(s: String) {\n            this.s = s;\n        }\n\n        public operation(): void {\n            console.log(\"`operation` of ConcreteComponent\", this.s, \" is being called!\");\n        }\n    }\n\n    export class Decorator implements Component {\n        private component: Component;\n        private id: Number;\n\n        constructor(id: Number, component: Component) {\n            this.id = id;\n            this.component = component;\n        }\n\n        public get Id(): Number {\n            return this.id;\n        }\n\n        public operation(): void {\n            console.log(\"`operation` of Decorator\", this.id, \" is being called!\");\n            this.component.operation();\n        }\n    }\n\n    export class ConcreteDecorator extends Decorator {\n        constructor(id: Number, component: Component) {\n            super(id, component);\n        }\n\n        public operation(): void {\n            super.operation();\n            console.log(\"`operation` of ConcreteDecorator\", this.Id, \" is being called!\");\n        }\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Decorator.md","raw":"---\ntitle: 装饰模式(Decorator)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Structural Patterns]\ntags: [javasctipt, 装饰模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 装饰模式的定义\n- 装饰模式：装饰模式用于动态地给一个对象增加一些额外的职责，就增加对象功 能来说，装饰模式比生成子类实现更为灵活。它是一种对象结构型模 式。\n\n### 装饰模式包含四个角色：\n- Component-抽象构件定义了对象的接口，可以给这些对 象动态增加职责（方法）；\n- ConcreteComponent-具体构件定义了具体的构件对象，实现了 在抽象构件中声明的方法，装饰器可以给它增加额外的职责（方法）；\n- Decorator-抽象装饰类是抽象构件类的子类，用于给具体构件增加职责，但是具 体职责在其子类中实现；\n- ConcreteDecorator-具体装饰类是抽象装饰类的子类，负责向构 件添加新的职责。\n\n---\n\n### ES6实现\n``` js\nclass Component {\n    constructor() {\n        console.log('Component Class created');\n    }\n\n    operation() {\n        console.log('Component.operation invoked');\n    }\n}\n\nclass ConcreteComponent extends Component {\n    constructor() {\n        super();\n        console.log('ConcreteComponent Class created');\n    }\n\n    operation() {\n        console.log('ConcreteComponent.operation invoked');\n    }\n}\n\nclass Decorator extends Component {\n    constructor(component) {\n        super();\n        this.component = component;\n        console.log('Decorator Class created');\n    }\n\n    operation() {\n        console.log('Decorator.operation invoked');\n        this.component.operation()\n    }\n}\n\nclass ConcreteDecoratorA extends Decorator {\n    constructor(component, sign) {\n        super(component);\n        this.addedState = sign;\n        console.log('ConcreteDecoratorA Class created');\n    }\n\n    operation() {\n        super.operation();\n        console.log('ConcreteDecoratorA.operation invoked');\n        console.log(this.addedState)\n    }\n}\n\nclass ConcreteDecoratorB extends Decorator {\n    constructor(component, sign) {\n        super(component);\n        this.addedState = sign;\n        console.log('ConcreteDecoratorB Class created');\n    }\n\n    operation() {\n        super.operation();\n        console.log('ConcreteDecoratorB.operation invoked');\n        console.log(this.addedState + this.addedState + this.addedState + this.addedState + this.addedState);\n    }\n\n    addedBehavior() {\n        this.operation();\n        console.log('ConcreteDecoratorB.operation invoked');\n    }\n}\n\nvar component = new ConcreteComponent();\nvar decoratorA = new ConcreteDecoratorA(component, 'decoratorA');\nvar decoratorB = new ConcreteDecoratorB(component, 'decoratorB');\nconsole.log('component: ');\ncomponent.operation();\nconsole.log('decoratorA: ');\ndecoratorA.operation();\nconsole.log('decoratorB: ');\ndecoratorB.addedBehavior();\n```\n---\n\n### Typescript实现\n``` ts\nnamespace DecoratorPattern {\n\n    export interface Component {\n        operation(): void;\n    }\n\n    export class ConcreteComponent implements Component {\n        private s: String;\n\n        constructor(s: String) {\n            this.s = s;\n        }\n\n        public operation(): void {\n            console.log(\"`operation` of ConcreteComponent\", this.s, \" is being called!\");\n        }\n    }\n\n    export class Decorator implements Component {\n        private component: Component;\n        private id: Number;\n\n        constructor(id: Number, component: Component) {\n            this.id = id;\n            this.component = component;\n        }\n\n        public get Id(): Number {\n            return this.id;\n        }\n\n        public operation(): void {\n            console.log(\"`operation` of Decorator\", this.id, \" is being called!\");\n            this.component.operation();\n        }\n    }\n\n    export class ConcreteDecorator extends Decorator {\n        constructor(id: Number, component: Component) {\n            super(id, component);\n        }\n\n        public operation(): void {\n            super.operation();\n            console.log(\"`operation` of ConcreteDecorator\", this.Id, \" is being called!\");\n        }\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Decorator","published":1,"updated":"2017-07-08T07:05:42.771Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4v0315b000g2tmwu4c7ylw0","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"装饰模式的定义\"><a href=\"#装饰模式的定义\" class=\"headerlink\" title=\"装饰模式的定义\"></a>装饰模式的定义</h3><ul>\n<li>装饰模式：装饰模式用于动态地给一个对象增加一些额外的职责，就增加对象功 能来说，装饰模式比生成子类实现更为灵活。它是一种对象结构型模 式。</li>\n</ul>\n<h3 id=\"装饰模式包含四个角色：\"><a href=\"#装饰模式包含四个角色：\" class=\"headerlink\" title=\"装饰模式包含四个角色：\"></a>装饰模式包含四个角色：</h3><ul>\n<li>Component-抽象构件定义了对象的接口，可以给这些对 象动态增加职责（方法）；</li>\n<li>ConcreteComponent-具体构件定义了具体的构件对象，实现了 在抽象构件中声明的方法，装饰器可以给它增加额外的职责（方法）；</li>\n<li>Decorator-抽象装饰类是抽象构件类的子类，用于给具体构件增加职责，但是具 体职责在其子类中实现；</li>\n<li>ConcreteDecorator-具体装饰类是抽象装饰类的子类，负责向构 件添加新的职责。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component.operation invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteComponent Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteComponent.operation invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Decorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(component) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.component = component;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Decorator Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Decorator.operation invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.component.operation()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteDecoratorA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Decorator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(component, sign) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(component);</div><div class=\"line\">        <span class=\"keyword\">this</span>.addedState = sign;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteDecoratorA Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.operation();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteDecoratorA.operation invoked'</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.addedState)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteDecoratorB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Decorator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(component, sign) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(component);</div><div class=\"line\">        <span class=\"keyword\">this</span>.addedState = sign;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteDecoratorB Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.operation();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteDecoratorB.operation invoked'</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.addedState + <span class=\"keyword\">this</span>.addedState + <span class=\"keyword\">this</span>.addedState + <span class=\"keyword\">this</span>.addedState + <span class=\"keyword\">this</span>.addedState);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    addedBehavior() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.operation();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteDecoratorB.operation invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> component = <span class=\"keyword\">new</span> ConcreteComponent();</div><div class=\"line\"><span class=\"keyword\">var</span> decoratorA = <span class=\"keyword\">new</span> ConcreteDecoratorA(component, <span class=\"string\">'decoratorA'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> decoratorB = <span class=\"keyword\">new</span> ConcreteDecoratorB(component, <span class=\"string\">'decoratorB'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'component: '</span>);</div><div class=\"line\">component.operation();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'decoratorA: '</span>);</div><div class=\"line\">decoratorA.operation();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'decoratorB: '</span>);</div><div class=\"line\">decoratorB.addedBehavior();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> DecoratorPattern &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Component &#123;</div><div class=\"line\">        operation(): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteComponent <span class=\"keyword\">implements</span> Component &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> s: <span class=\"built_in\">String</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">s: <span class=\"built_in\">String</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation` of ConcreteComponent\"</span>, <span class=\"keyword\">this</span>.s, <span class=\"string\">\" is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Decorator <span class=\"keyword\">implements</span> Component &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> component: Component;</div><div class=\"line\">        <span class=\"keyword\">private</span> id: <span class=\"built_in\">Number</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">id: <span class=\"built_in\">Number</span>, component: Component</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">            <span class=\"keyword\">this</span>.component = component;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">get</span> Id(): <span class=\"built_in\">Number</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.id;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation` of Decorator\"</span>, <span class=\"keyword\">this</span>.id, <span class=\"string\">\" is being called!\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.component.operation();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteDecorator <span class=\"keyword\">extends</span> Decorator &#123;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">id: <span class=\"built_in\">Number</span>, component: Component</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(id, component);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.operation();</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation` of ConcreteDecorator\"</span>, <span class=\"keyword\">this</span>.Id, <span class=\"string\">\" is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"装饰模式的定义\"><a href=\"#装饰模式的定义\" class=\"headerlink\" title=\"装饰模式的定义\"></a>装饰模式的定义</h3><ul>\n<li>装饰模式：装饰模式用于动态地给一个对象增加一些额外的职责，就增加对象功 能来说，装饰模式比生成子类实现更为灵活。它是一种对象结构型模 式。</li>\n</ul>\n<h3 id=\"装饰模式包含四个角色：\"><a href=\"#装饰模式包含四个角色：\" class=\"headerlink\" title=\"装饰模式包含四个角色：\"></a>装饰模式包含四个角色：</h3><ul>\n<li>Component-抽象构件定义了对象的接口，可以给这些对 象动态增加职责（方法）；</li>\n<li>ConcreteComponent-具体构件定义了具体的构件对象，实现了 在抽象构件中声明的方法，装饰器可以给它增加额外的职责（方法）；</li>\n<li>Decorator-抽象装饰类是抽象构件类的子类，用于给具体构件增加职责，但是具 体职责在其子类中实现；</li>\n<li>ConcreteDecorator-具体装饰类是抽象装饰类的子类，负责向构 件添加新的职责。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Component.operation invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteComponent Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteComponent.operation invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Decorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(component) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.component = component;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Decorator Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Decorator.operation invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.component.operation()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteDecoratorA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Decorator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(component, sign) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(component);</div><div class=\"line\">        <span class=\"keyword\">this</span>.addedState = sign;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteDecoratorA Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.operation();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteDecoratorA.operation invoked'</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.addedState)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteDecoratorB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Decorator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(component, sign) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(component);</div><div class=\"line\">        <span class=\"keyword\">this</span>.addedState = sign;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteDecoratorB Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.operation();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteDecoratorB.operation invoked'</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.addedState + <span class=\"keyword\">this</span>.addedState + <span class=\"keyword\">this</span>.addedState + <span class=\"keyword\">this</span>.addedState + <span class=\"keyword\">this</span>.addedState);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    addedBehavior() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.operation();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteDecoratorB.operation invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> component = <span class=\"keyword\">new</span> ConcreteComponent();</div><div class=\"line\"><span class=\"keyword\">var</span> decoratorA = <span class=\"keyword\">new</span> ConcreteDecoratorA(component, <span class=\"string\">'decoratorA'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> decoratorB = <span class=\"keyword\">new</span> ConcreteDecoratorB(component, <span class=\"string\">'decoratorB'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'component: '</span>);</div><div class=\"line\">component.operation();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'decoratorA: '</span>);</div><div class=\"line\">decoratorA.operation();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'decoratorB: '</span>);</div><div class=\"line\">decoratorB.addedBehavior();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> DecoratorPattern &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Component &#123;</div><div class=\"line\">        operation(): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteComponent <span class=\"keyword\">implements</span> Component &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> s: <span class=\"built_in\">String</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">s: <span class=\"built_in\">String</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation` of ConcreteComponent\"</span>, <span class=\"keyword\">this</span>.s, <span class=\"string\">\" is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Decorator <span class=\"keyword\">implements</span> Component &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> component: Component;</div><div class=\"line\">        <span class=\"keyword\">private</span> id: <span class=\"built_in\">Number</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">id: <span class=\"built_in\">Number</span>, component: Component</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">            <span class=\"keyword\">this</span>.component = component;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">get</span> Id(): <span class=\"built_in\">Number</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.id;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation` of Decorator\"</span>, <span class=\"keyword\">this</span>.id, <span class=\"string\">\" is being called!\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.component.operation();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteDecorator <span class=\"keyword\">extends</span> Decorator &#123;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">id: <span class=\"built_in\">Number</span>, component: Component</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(id, component);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.operation();</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation` of ConcreteDecorator\"</span>, <span class=\"keyword\">this</span>.Id, <span class=\"string\">\" is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"享元模式(Flyweight)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 享元模式的定义\n- 享元模式：享元模式运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用，它是一种对象结构型模式。\n\n### 享元模式包含四个角色：\n- Flyweight-抽象享元类声明一个接口，通过它可以接受并作用于外部状态；\n- ConcreteFlyweight-具体享元类实现了抽象享元接口，其实例称为享元对象；\n- UnsharedConcreteFlyweight-非共享具体享元是不能被共享的抽象享元类的子类；\n- FlyweightFactory-享元工厂类用于创建并管理享元对象，它针对抽象享元类编程，将各种类型的具体享元对象存储在一个享元池中。\n---\n\n### ES6实现\n``` js\nclass FlyweightFactory {\n    constructor() {\n        this.flyweights = {};\n        console.log('FlyweightFactory Class created');\n    }\n\n    getFlyweight(key) {\n        console.log('FlyweightFactory.getFlyweight invoked');\n        if (this.flyweights[key]) {\n            return this.flyweights[key];\n        } else {\n            this.flyweights[key] = new ConcreteFlyweight(key);\n            return this.flyweights[key];\n        }\n    }\n\n    createGibberish(keys) {\n        console.log('FlyweightFactory.createGibberish invoked');\n        return new UnsharedConcreteFlyweight(keys, this);\n    }\n}\n\nclass Flyweight {\n    constructor() {\n        console.log('Flyweight Class created');\n    }\n\n    operation(extrinsicState) {\n        console.log('Flyweight.operation invoked');\n    }\n}\n\nclass ConcreteFlyweight extends Flyweight {\n    constructor(key) {\n        super();\n        this.intrinsicState = key;\n        console.log('ConcreteFlyweight Class created');\n    }\n\n    operation(extrinsicState) {\n        console.log('ConcreteFlyweight.operation invoked');\n        return extrinsicState + this.intrinsicState;\n    }\n}\n\nclass UnsharedConcreteFlyweight extends Flyweight {\n    constructor(keys, flyweights) {\n        super();\n        this.flyweights = flyweights;\n        this.keys = keys;\n        console.log('UnsharedConcreteFlyweight Class created');\n    }\n\n    operation(extrinsicState) {\n        console.log('UnsharedConcreteFlyweight.operation invoked');\n        var key, word = '';\n        for (var i = 0; i < extrinsicState; i++) {\n            key = this.keys[Math.floor(Math.random() * (this.keys.length))];\n            word = this.flyweights.getFlyweight(key).operation(word);\n        }\n        console.log('UnsharedConcreteFlyweight Operation: ');\n        console.log(word);\n    }\n}\n\n\nvar flyweights = new FlyweightFactory();\nvar gibberish = flyweights.createGibberish(['-', '+', '*']);\ngibberish.operation(5);\n\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace FlyweightPattern {\n\n    export interface Flyweight {\n        operation(s: String): void;\n    }\n\n    export class ConcreteFlyweight implements Flyweight {\n        private instrinsicState: String;\n\n        constructor(instrinsicState: String) {\n            this.instrinsicState = instrinsicState;\n        }\n\n        public operation(s: String): void {\n            console.log(\"`operation` of ConcreteFlyweight\", s, \" is being called!\");\n        }\n    }\n\n    export class UnsharedConcreteFlyweight implements Flyweight {\n        private allState: number;\n\n        constructor(allState: number) {\n            this.allState = allState;\n        }\n\n        public operation(s: String): void {\n            console.log(\"`operation` of UnsharedConcreteFlyweight\", s, \" is being called!\");\n        }\n    }\n\n    export class FlyweightFactory {\n\n        private fliesMap: { [s: string]: Flyweight; } = <any>{};\n\n        constructor() { }\n\n        public getFlyweight(key: string): Flyweight {\n\n            if (this.fliesMap[key] === undefined || null) {\n                this.fliesMap[key] = new ConcreteFlyweight(key);\n            }\n            return this.fliesMap[key];\n        }\n    }\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Flyweight.md","raw":"---\ntitle: 享元模式(Flyweight)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Structural Patterns]\ntags: [javasctipt, 享元模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 享元模式的定义\n- 享元模式：享元模式运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用，它是一种对象结构型模式。\n\n### 享元模式包含四个角色：\n- Flyweight-抽象享元类声明一个接口，通过它可以接受并作用于外部状态；\n- ConcreteFlyweight-具体享元类实现了抽象享元接口，其实例称为享元对象；\n- UnsharedConcreteFlyweight-非共享具体享元是不能被共享的抽象享元类的子类；\n- FlyweightFactory-享元工厂类用于创建并管理享元对象，它针对抽象享元类编程，将各种类型的具体享元对象存储在一个享元池中。\n---\n\n### ES6实现\n``` js\nclass FlyweightFactory {\n    constructor() {\n        this.flyweights = {};\n        console.log('FlyweightFactory Class created');\n    }\n\n    getFlyweight(key) {\n        console.log('FlyweightFactory.getFlyweight invoked');\n        if (this.flyweights[key]) {\n            return this.flyweights[key];\n        } else {\n            this.flyweights[key] = new ConcreteFlyweight(key);\n            return this.flyweights[key];\n        }\n    }\n\n    createGibberish(keys) {\n        console.log('FlyweightFactory.createGibberish invoked');\n        return new UnsharedConcreteFlyweight(keys, this);\n    }\n}\n\nclass Flyweight {\n    constructor() {\n        console.log('Flyweight Class created');\n    }\n\n    operation(extrinsicState) {\n        console.log('Flyweight.operation invoked');\n    }\n}\n\nclass ConcreteFlyweight extends Flyweight {\n    constructor(key) {\n        super();\n        this.intrinsicState = key;\n        console.log('ConcreteFlyweight Class created');\n    }\n\n    operation(extrinsicState) {\n        console.log('ConcreteFlyweight.operation invoked');\n        return extrinsicState + this.intrinsicState;\n    }\n}\n\nclass UnsharedConcreteFlyweight extends Flyweight {\n    constructor(keys, flyweights) {\n        super();\n        this.flyweights = flyweights;\n        this.keys = keys;\n        console.log('UnsharedConcreteFlyweight Class created');\n    }\n\n    operation(extrinsicState) {\n        console.log('UnsharedConcreteFlyweight.operation invoked');\n        var key, word = '';\n        for (var i = 0; i < extrinsicState; i++) {\n            key = this.keys[Math.floor(Math.random() * (this.keys.length))];\n            word = this.flyweights.getFlyweight(key).operation(word);\n        }\n        console.log('UnsharedConcreteFlyweight Operation: ');\n        console.log(word);\n    }\n}\n\n\nvar flyweights = new FlyweightFactory();\nvar gibberish = flyweights.createGibberish(['-', '+', '*']);\ngibberish.operation(5);\n\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace FlyweightPattern {\n\n    export interface Flyweight {\n        operation(s: String): void;\n    }\n\n    export class ConcreteFlyweight implements Flyweight {\n        private instrinsicState: String;\n\n        constructor(instrinsicState: String) {\n            this.instrinsicState = instrinsicState;\n        }\n\n        public operation(s: String): void {\n            console.log(\"`operation` of ConcreteFlyweight\", s, \" is being called!\");\n        }\n    }\n\n    export class UnsharedConcreteFlyweight implements Flyweight {\n        private allState: number;\n\n        constructor(allState: number) {\n            this.allState = allState;\n        }\n\n        public operation(s: String): void {\n            console.log(\"`operation` of UnsharedConcreteFlyweight\", s, \" is being called!\");\n        }\n    }\n\n    export class FlyweightFactory {\n\n        private fliesMap: { [s: string]: Flyweight; } = <any>{};\n\n        constructor() { }\n\n        public getFlyweight(key: string): Flyweight {\n\n            if (this.fliesMap[key] === undefined || null) {\n                this.fliesMap[key] = new ConcreteFlyweight(key);\n            }\n            return this.fliesMap[key];\n        }\n    }\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Flyweight","published":1,"updated":"2017-07-08T07:05:59.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4v0315d000i2tmwszur6bfa","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"享元模式的定义\"><a href=\"#享元模式的定义\" class=\"headerlink\" title=\"享元模式的定义\"></a>享元模式的定义</h3><ul>\n<li>享元模式：享元模式运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用，它是一种对象结构型模式。</li>\n</ul>\n<h3 id=\"享元模式包含四个角色：\"><a href=\"#享元模式包含四个角色：\" class=\"headerlink\" title=\"享元模式包含四个角色：\"></a>享元模式包含四个角色：</h3><ul>\n<li>Flyweight-抽象享元类声明一个接口，通过它可以接受并作用于外部状态；</li>\n<li>ConcreteFlyweight-具体享元类实现了抽象享元接口，其实例称为享元对象；</li>\n<li>UnsharedConcreteFlyweight-非共享具体享元是不能被共享的抽象享元类的子类；</li>\n<li>FlyweightFactory-享元工厂类用于创建并管理享元对象，它针对抽象享元类编程，将各种类型的具体享元对象存储在一个享元池中。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyweightFactory</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.flyweights = &#123;&#125;;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'FlyweightFactory Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    getFlyweight(key) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'FlyweightFactory.getFlyweight invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.flyweights[key]) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.flyweights[key];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.flyweights[key] = <span class=\"keyword\">new</span> ConcreteFlyweight(key);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.flyweights[key];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createGibberish(keys) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'FlyweightFactory.createGibberish invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> UnsharedConcreteFlyweight(keys, <span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flyweight</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Flyweight Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation(extrinsicState) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Flyweight.operation invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFlyweight</span> <span class=\"keyword\">extends</span> <span class=\"title\">Flyweight</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(key) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.intrinsicState = key;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteFlyweight Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation(extrinsicState) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteFlyweight.operation invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> extrinsicState + <span class=\"keyword\">this</span>.intrinsicState;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnsharedConcreteFlyweight</span> <span class=\"keyword\">extends</span> <span class=\"title\">Flyweight</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(keys, flyweights) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.flyweights = flyweights;</div><div class=\"line\">        <span class=\"keyword\">this</span>.keys = keys;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'UnsharedConcreteFlyweight Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation(extrinsicState) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'UnsharedConcreteFlyweight.operation invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">var</span> key, word = <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; extrinsicState; i++) &#123;</div><div class=\"line\">            key = <span class=\"keyword\">this</span>.keys[<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (<span class=\"keyword\">this</span>.keys.length))];</div><div class=\"line\">            word = <span class=\"keyword\">this</span>.flyweights.getFlyweight(key).operation(word);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'UnsharedConcreteFlyweight Operation: '</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(word);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> flyweights = <span class=\"keyword\">new</span> FlyweightFactory();</div><div class=\"line\"><span class=\"keyword\">var</span> gibberish = flyweights.createGibberish([<span class=\"string\">'-'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'*'</span>]);</div><div class=\"line\">gibberish.operation(<span class=\"number\">5</span>);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> FlyweightPattern &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Flyweight &#123;</div><div class=\"line\">        operation(s: <span class=\"built_in\">String</span>): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteFlyweight <span class=\"keyword\">implements</span> Flyweight &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> instrinsicState: <span class=\"built_in\">String</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">instrinsicState: <span class=\"built_in\">String</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.instrinsicState = instrinsicState;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(s: <span class=\"built_in\">String</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation` of ConcreteFlyweight\"</span>, s, <span class=\"string\">\" is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> UnsharedConcreteFlyweight <span class=\"keyword\">implements</span> Flyweight &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> allState: <span class=\"built_in\">number</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">allState: <span class=\"built_in\">number</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.allState = allState;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(s: <span class=\"built_in\">String</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation` of UnsharedConcreteFlyweight\"</span>, s, <span class=\"string\">\" is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> FlyweightFactory &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> fliesMap: &#123; [s: <span class=\"built_in\">string</span>]: Flyweight; &#125; = &lt;<span class=\"built_in\">any</span>&gt;&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> getFlyweight(key: <span class=\"built_in\">string</span>): Flyweight &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.fliesMap[key] === <span class=\"literal\">undefined</span> || <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.fliesMap[key] = <span class=\"keyword\">new</span> ConcreteFlyweight(key);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.fliesMap[key];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"享元模式的定义\"><a href=\"#享元模式的定义\" class=\"headerlink\" title=\"享元模式的定义\"></a>享元模式的定义</h3><ul>\n<li>享元模式：享元模式运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用，它是一种对象结构型模式。</li>\n</ul>\n<h3 id=\"享元模式包含四个角色：\"><a href=\"#享元模式包含四个角色：\" class=\"headerlink\" title=\"享元模式包含四个角色：\"></a>享元模式包含四个角色：</h3><ul>\n<li>Flyweight-抽象享元类声明一个接口，通过它可以接受并作用于外部状态；</li>\n<li>ConcreteFlyweight-具体享元类实现了抽象享元接口，其实例称为享元对象；</li>\n<li>UnsharedConcreteFlyweight-非共享具体享元是不能被共享的抽象享元类的子类；</li>\n<li>FlyweightFactory-享元工厂类用于创建并管理享元对象，它针对抽象享元类编程，将各种类型的具体享元对象存储在一个享元池中。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlyweightFactory</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.flyweights = &#123;&#125;;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'FlyweightFactory Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    getFlyweight(key) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'FlyweightFactory.getFlyweight invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.flyweights[key]) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.flyweights[key];</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.flyweights[key] = <span class=\"keyword\">new</span> ConcreteFlyweight(key);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.flyweights[key];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createGibberish(keys) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'FlyweightFactory.createGibberish invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> UnsharedConcreteFlyweight(keys, <span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Flyweight</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Flyweight Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation(extrinsicState) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Flyweight.operation invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFlyweight</span> <span class=\"keyword\">extends</span> <span class=\"title\">Flyweight</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(key) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.intrinsicState = key;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteFlyweight Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation(extrinsicState) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteFlyweight.operation invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> extrinsicState + <span class=\"keyword\">this</span>.intrinsicState;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnsharedConcreteFlyweight</span> <span class=\"keyword\">extends</span> <span class=\"title\">Flyweight</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(keys, flyweights) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.flyweights = flyweights;</div><div class=\"line\">        <span class=\"keyword\">this</span>.keys = keys;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'UnsharedConcreteFlyweight Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operation(extrinsicState) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'UnsharedConcreteFlyweight.operation invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">var</span> key, word = <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; extrinsicState; i++) &#123;</div><div class=\"line\">            key = <span class=\"keyword\">this</span>.keys[<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (<span class=\"keyword\">this</span>.keys.length))];</div><div class=\"line\">            word = <span class=\"keyword\">this</span>.flyweights.getFlyweight(key).operation(word);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'UnsharedConcreteFlyweight Operation: '</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(word);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> flyweights = <span class=\"keyword\">new</span> FlyweightFactory();</div><div class=\"line\"><span class=\"keyword\">var</span> gibberish = flyweights.createGibberish([<span class=\"string\">'-'</span>, <span class=\"string\">'+'</span>, <span class=\"string\">'*'</span>]);</div><div class=\"line\">gibberish.operation(<span class=\"number\">5</span>);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> FlyweightPattern &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Flyweight &#123;</div><div class=\"line\">        operation(s: <span class=\"built_in\">String</span>): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteFlyweight <span class=\"keyword\">implements</span> Flyweight &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> instrinsicState: <span class=\"built_in\">String</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">instrinsicState: <span class=\"built_in\">String</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.instrinsicState = instrinsicState;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(s: <span class=\"built_in\">String</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation` of ConcreteFlyweight\"</span>, s, <span class=\"string\">\" is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> UnsharedConcreteFlyweight <span class=\"keyword\">implements</span> Flyweight &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> allState: <span class=\"built_in\">number</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">allState: <span class=\"built_in\">number</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.allState = allState;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(s: <span class=\"built_in\">String</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operation` of UnsharedConcreteFlyweight\"</span>, s, <span class=\"string\">\" is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> FlyweightFactory &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> fliesMap: &#123; [s: <span class=\"built_in\">string</span>]: Flyweight; &#125; = &lt;<span class=\"built_in\">any</span>&gt;&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123; &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> getFlyweight(key: <span class=\"built_in\">string</span>): Flyweight &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.fliesMap[key] === <span class=\"literal\">undefined</span> || <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.fliesMap[key] = <span class=\"keyword\">new</span> ConcreteFlyweight(key);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.fliesMap[key];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"解析器模式(Interpreter)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 解析器模式的定义\n- 解析器模式：在外观模式中，外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，\n- 外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。\n\n### 解析器模式包含二个角色：\n- Interpreter-外观角色是在客户端直接调用的角色，在外观角色中可以知道相关的(一个或者多个)子系统的功能和责任，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；\n- SubSystem-在软件系统中可以同时有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能\n\n---\n\n### ES6实现\n``` js\nclass Context {\n    constructor(input) {\n        this.sum = 0;\n        this.list = [];\n        console.log('Context Class created');\n    }\n\n    add(eps) {\n        console.log('Context.add invoked');\n        this.list.push(eps);\n    }\n\n    getList() {\n        console.log('Context.getList invoked');\n        return this.list;\n    }\n\n    getSum() {\n        console.log('Context.getSum invoked');\n        return this.sum;\n    }\n\n    setSum(_sum) {\n        this.sum = _sum;\n        console.log('Context.setSum invoked');\n    }\n}\n\nclass AbstractExpression {\n    constructor() {\n        console.log('AbstractExpression Class created');\n    }\n\n    interpret(context) {\n        console.log('AbstractExpression.interpret invoked');\n    }\n}\n\nclass PlusExpression extends AbstractExpression {\n    constructor(name) {\n        super();\n        this.name = name;\n        console.log('PlusExpression Class created');\n    }\n\n    interpret(context) {\n        console.log('PlusExpression.interpret invoked');\n        var sum = context.getSum();\n        sum++;\n        context.setSum(sum);\n    }\n}\n\nclass MinusExpression extends AbstractExpression {\n    constructor() {\n        super();\n        this.name = '+';\n        console.log('MinusExpression Class created');\n    }\n\n    interpret(context) {\n        console.log('MinusExpression.interpret invoked');\n        var sum = context.getSum();\n        sum--;\n        context.setSum(sum)\n    }\n}\n\nvar context = new Context();\ncontext.setSum(20);\n\ncontext.add(new PlusExpression());\ncontext.add(new PlusExpression());\ncontext.add(new PlusExpression());\n\ncontext.add(new MinusExpression());\ncontext.add(new MinusExpression());\n\nvar list = context.getList();\nfor (var i = 0; i < list.length; i++) {\n    var expression = list[i];\n    expression.interpret(context);\n}\n\nconsole.log(\"Result：\" + context.getSum());\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace InterpreterPattern {\n    export class Context {\n    }\n\n    export interface AbstractExpression {\n        interpret(context: Context): void;\n    }\n\n    export class TerminalExpression implements AbstractExpression {\n        public interpret(context: Context): void {\n            console.log(\"`interpret` method of TerminalExpression is being called!\");\n        }\n    }\n\n    export class NonterminalExpression implements AbstractExpression {\n\n        public interpret(context: Context): void {\n            console.log(\"`interpret` method of NonterminalExpression is being called!\");\n        }\n    }\n}\n\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Interpreter.md","raw":"---\ntitle: 解析器模式(Interpreter)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Behavioral Patterns]\ntags: [javasctipt, 解析器模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 解析器模式的定义\n- 解析器模式：在外观模式中，外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，\n- 外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。\n\n### 解析器模式包含二个角色：\n- Interpreter-外观角色是在客户端直接调用的角色，在外观角色中可以知道相关的(一个或者多个)子系统的功能和责任，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；\n- SubSystem-在软件系统中可以同时有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能\n\n---\n\n### ES6实现\n``` js\nclass Context {\n    constructor(input) {\n        this.sum = 0;\n        this.list = [];\n        console.log('Context Class created');\n    }\n\n    add(eps) {\n        console.log('Context.add invoked');\n        this.list.push(eps);\n    }\n\n    getList() {\n        console.log('Context.getList invoked');\n        return this.list;\n    }\n\n    getSum() {\n        console.log('Context.getSum invoked');\n        return this.sum;\n    }\n\n    setSum(_sum) {\n        this.sum = _sum;\n        console.log('Context.setSum invoked');\n    }\n}\n\nclass AbstractExpression {\n    constructor() {\n        console.log('AbstractExpression Class created');\n    }\n\n    interpret(context) {\n        console.log('AbstractExpression.interpret invoked');\n    }\n}\n\nclass PlusExpression extends AbstractExpression {\n    constructor(name) {\n        super();\n        this.name = name;\n        console.log('PlusExpression Class created');\n    }\n\n    interpret(context) {\n        console.log('PlusExpression.interpret invoked');\n        var sum = context.getSum();\n        sum++;\n        context.setSum(sum);\n    }\n}\n\nclass MinusExpression extends AbstractExpression {\n    constructor() {\n        super();\n        this.name = '+';\n        console.log('MinusExpression Class created');\n    }\n\n    interpret(context) {\n        console.log('MinusExpression.interpret invoked');\n        var sum = context.getSum();\n        sum--;\n        context.setSum(sum)\n    }\n}\n\nvar context = new Context();\ncontext.setSum(20);\n\ncontext.add(new PlusExpression());\ncontext.add(new PlusExpression());\ncontext.add(new PlusExpression());\n\ncontext.add(new MinusExpression());\ncontext.add(new MinusExpression());\n\nvar list = context.getList();\nfor (var i = 0; i < list.length; i++) {\n    var expression = list[i];\n    expression.interpret(context);\n}\n\nconsole.log(\"Result：\" + context.getSum());\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace InterpreterPattern {\n    export class Context {\n    }\n\n    export interface AbstractExpression {\n        interpret(context: Context): void;\n    }\n\n    export class TerminalExpression implements AbstractExpression {\n        public interpret(context: Context): void {\n            console.log(\"`interpret` method of TerminalExpression is being called!\");\n        }\n    }\n\n    export class NonterminalExpression implements AbstractExpression {\n\n        public interpret(context: Context): void {\n            console.log(\"`interpret` method of NonterminalExpression is being called!\");\n        }\n    }\n}\n\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Interpreter","published":1,"updated":"2017-07-08T07:06:06.457Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4v0315f000m2tmwrqqg8u4m","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"解析器模式的定义\"><a href=\"#解析器模式的定义\" class=\"headerlink\" title=\"解析器模式的定义\"></a>解析器模式的定义</h3><ul>\n<li>解析器模式：在外观模式中，外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，</li>\n<li>外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。</li>\n</ul>\n<h3 id=\"解析器模式包含二个角色：\"><a href=\"#解析器模式包含二个角色：\" class=\"headerlink\" title=\"解析器模式包含二个角色：\"></a>解析器模式包含二个角色：</h3><ul>\n<li>Interpreter-外观角色是在客户端直接调用的角色，在外观角色中可以知道相关的(一个或者多个)子系统的功能和责任，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；</li>\n<li>SubSystem-在软件系统中可以同时有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(input) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.sum = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.list = [];</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    add(eps) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context.add invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.list.push(eps);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    getList() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context.getList invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.list;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    getSum() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context.getSum invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sum;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setSum(_sum) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.sum = _sum;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context.setSum invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractExpression</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractExpression Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    interpret(context) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractExpression.interpret invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlusExpression</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExpression</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'PlusExpression Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    interpret(context) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'PlusExpression.interpret invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">var</span> sum = context.getSum();</div><div class=\"line\">        sum++;</div><div class=\"line\">        context.setSum(sum);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MinusExpression</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExpression</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'+'</span>;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'MinusExpression Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    interpret(context) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'MinusExpression.interpret invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">var</span> sum = context.getSum();</div><div class=\"line\">        sum--;</div><div class=\"line\">        context.setSum(sum)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> context = <span class=\"keyword\">new</span> Context();</div><div class=\"line\">context.setSum(<span class=\"number\">20</span>);</div><div class=\"line\"></div><div class=\"line\">context.add(<span class=\"keyword\">new</span> PlusExpression());</div><div class=\"line\">context.add(<span class=\"keyword\">new</span> PlusExpression());</div><div class=\"line\">context.add(<span class=\"keyword\">new</span> PlusExpression());</div><div class=\"line\"></div><div class=\"line\">context.add(<span class=\"keyword\">new</span> MinusExpression());</div><div class=\"line\">context.add(<span class=\"keyword\">new</span> MinusExpression());</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> list = context.getList();</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; list.length; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> expression = list[i];</div><div class=\"line\">    expression.interpret(context);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Result：\"</span> + context.getSum());</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> InterpreterPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Context &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> AbstractExpression &#123;</div><div class=\"line\">        interpret(context: Context): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> TerminalExpression <span class=\"keyword\">implements</span> AbstractExpression &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> interpret(context: Context): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`interpret` method of TerminalExpression is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> NonterminalExpression <span class=\"keyword\">implements</span> AbstractExpression &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> interpret(context: Context): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`interpret` method of NonterminalExpression is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"解析器模式的定义\"><a href=\"#解析器模式的定义\" class=\"headerlink\" title=\"解析器模式的定义\"></a>解析器模式的定义</h3><ul>\n<li>解析器模式：在外观模式中，外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，</li>\n<li>外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式。</li>\n</ul>\n<h3 id=\"解析器模式包含二个角色：\"><a href=\"#解析器模式包含二个角色：\" class=\"headerlink\" title=\"解析器模式包含二个角色：\"></a>解析器模式包含二个角色：</h3><ul>\n<li>Interpreter-外观角色是在客户端直接调用的角色，在外观角色中可以知道相关的(一个或者多个)子系统的功能和责任，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；</li>\n<li>SubSystem-在软件系统中可以同时有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(input) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.sum = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.list = [];</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    add(eps) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context.add invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.list.push(eps);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    getList() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context.getList invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.list;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    getSum() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context.getSum invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sum;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setSum(_sum) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.sum = _sum;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context.setSum invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractExpression</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractExpression Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    interpret(context) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractExpression.interpret invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlusExpression</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExpression</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'PlusExpression Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    interpret(context) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'PlusExpression.interpret invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">var</span> sum = context.getSum();</div><div class=\"line\">        sum++;</div><div class=\"line\">        context.setSum(sum);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MinusExpression</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExpression</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">'+'</span>;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'MinusExpression Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    interpret(context) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'MinusExpression.interpret invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">var</span> sum = context.getSum();</div><div class=\"line\">        sum--;</div><div class=\"line\">        context.setSum(sum)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> context = <span class=\"keyword\">new</span> Context();</div><div class=\"line\">context.setSum(<span class=\"number\">20</span>);</div><div class=\"line\"></div><div class=\"line\">context.add(<span class=\"keyword\">new</span> PlusExpression());</div><div class=\"line\">context.add(<span class=\"keyword\">new</span> PlusExpression());</div><div class=\"line\">context.add(<span class=\"keyword\">new</span> PlusExpression());</div><div class=\"line\"></div><div class=\"line\">context.add(<span class=\"keyword\">new</span> MinusExpression());</div><div class=\"line\">context.add(<span class=\"keyword\">new</span> MinusExpression());</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> list = context.getList();</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; list.length; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> expression = list[i];</div><div class=\"line\">    expression.interpret(context);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Result：\"</span> + context.getSum());</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> InterpreterPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Context &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> AbstractExpression &#123;</div><div class=\"line\">        interpret(context: Context): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> TerminalExpression <span class=\"keyword\">implements</span> AbstractExpression &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> interpret(context: Context): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`interpret` method of TerminalExpression is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> NonterminalExpression <span class=\"keyword\">implements</span> AbstractExpression &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> interpret(context: Context): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`interpret` method of NonterminalExpression is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"迭代器(Iterator)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n---\n\n### ES6实现\n``` js\nclass Iterator {\n    constructor() {\n        console.log('Iterator Class created');\n    }\n\n    first() {\n        console.log('Iterator.first invoked');\n    }\n\n    next() {\n        console.log('Iterator.next invoked');\n    }\n\n    isDone() {\n        console.log('Iterator.isDone invoked');\n    }\n\n    currentItem() {\n        console.log('Iterator.currentItem invoked');\n    }\n}\n\nclass ConcreteIterator extends Iterator {\n    constructor(aggregate) {\n        super();\n        this.index = 0;\n        this.aggregate = aggregate;\n        console.log('ConcreteIterator Class created');\n    }\n\n    first() {\n        console.log('ConcreteIterator.first invoked');\n        return this.aggregate.list[0];\n    }\n\n    next() {\n        console.log('ConcreteIterator.next invoked');\n        this.index += 1;\n        return this.aggregate.list[this.index];\n    }\n\n    currentItem() {\n        console.log('ConcreteIterator.currentItem invoked');\n        return this.aggregate.list[this.index];\n    }\n}\n\nclass Aggregate {\n    constructor() {\n        console.log('Aggregate Class created');\n    }\n\n    createIterator() {\n        console.log('Aggregate.CreateIterator invoked');\n    }\n}\n\nclass ConcreteAggregate extends Aggregate {\n    constructor(list) {\n        super();\n        this.list = list;\n        console.log('ConcreteAggregate Class created');\n    }\n\n    createIterator() {\n        console.log('ConcreteAggregate.CreateIterator invoked');\n        this.iterator = new ConcreteIterator(this);\n    }\n}\n\nvar aggregate = new ConcreteAggregate([0, 1, 2, 3, 4, 5, 6, 7]);\naggregate.createIterator();\nconsole.log(aggregate.iterator.first());\nconsole.log(aggregate.iterator.next());\nconsole.log(aggregate.iterator.currentItem());\n\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace IteratorPattern {\n\texport namespace Demo {\n\n\t\texport function show() : void {\n\t\t    var nArray = [1, 7, 21, 657, 3, 2, 765, 13, 65],\n\t\t\t\tnumbers: IteratorPattern.Numbers = new IteratorPattern.Numbers(nArray),\n\t\t\t\tit: IteratorPattern.ConcreteIterator = <IteratorPattern.ConcreteIterator>numbers.createIterator();\n\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tconsole.log(it.next());\n\t\t\t}\n\n\t\t}\n\t}\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Iterator.md","raw":"---\ntitle: 迭代器(Iterator)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Behavioral Patterns]\ntags: [javasctipt, 迭代器]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n---\n\n### ES6实现\n``` js\nclass Iterator {\n    constructor() {\n        console.log('Iterator Class created');\n    }\n\n    first() {\n        console.log('Iterator.first invoked');\n    }\n\n    next() {\n        console.log('Iterator.next invoked');\n    }\n\n    isDone() {\n        console.log('Iterator.isDone invoked');\n    }\n\n    currentItem() {\n        console.log('Iterator.currentItem invoked');\n    }\n}\n\nclass ConcreteIterator extends Iterator {\n    constructor(aggregate) {\n        super();\n        this.index = 0;\n        this.aggregate = aggregate;\n        console.log('ConcreteIterator Class created');\n    }\n\n    first() {\n        console.log('ConcreteIterator.first invoked');\n        return this.aggregate.list[0];\n    }\n\n    next() {\n        console.log('ConcreteIterator.next invoked');\n        this.index += 1;\n        return this.aggregate.list[this.index];\n    }\n\n    currentItem() {\n        console.log('ConcreteIterator.currentItem invoked');\n        return this.aggregate.list[this.index];\n    }\n}\n\nclass Aggregate {\n    constructor() {\n        console.log('Aggregate Class created');\n    }\n\n    createIterator() {\n        console.log('Aggregate.CreateIterator invoked');\n    }\n}\n\nclass ConcreteAggregate extends Aggregate {\n    constructor(list) {\n        super();\n        this.list = list;\n        console.log('ConcreteAggregate Class created');\n    }\n\n    createIterator() {\n        console.log('ConcreteAggregate.CreateIterator invoked');\n        this.iterator = new ConcreteIterator(this);\n    }\n}\n\nvar aggregate = new ConcreteAggregate([0, 1, 2, 3, 4, 5, 6, 7]);\naggregate.createIterator();\nconsole.log(aggregate.iterator.first());\nconsole.log(aggregate.iterator.next());\nconsole.log(aggregate.iterator.currentItem());\n\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace IteratorPattern {\n\texport namespace Demo {\n\n\t\texport function show() : void {\n\t\t    var nArray = [1, 7, 21, 657, 3, 2, 765, 13, 65],\n\t\t\t\tnumbers: IteratorPattern.Numbers = new IteratorPattern.Numbers(nArray),\n\t\t\t\tit: IteratorPattern.ConcreteIterator = <IteratorPattern.ConcreteIterator>numbers.createIterator();\n\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tconsole.log(it.next());\n\t\t\t}\n\n\t\t}\n\t}\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Iterator","published":1,"updated":"2017-07-08T07:06:10.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4v0315g000n2tmwmdeaf5jf","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Iterator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Iterator Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    first() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Iterator.first invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    next() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Iterator.next invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    isDone() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Iterator.isDone invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    currentItem() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Iterator.currentItem invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteIterator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Iterator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(aggregate) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.index = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.aggregate = aggregate;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteIterator Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    first() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteIterator.first invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.aggregate.list[<span class=\"number\">0</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    next() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteIterator.next invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.index += <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.aggregate.list[<span class=\"keyword\">this</span>.index];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    currentItem() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteIterator.currentItem invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.aggregate.list[<span class=\"keyword\">this</span>.index];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Aggregate</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Aggregate Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createIterator() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Aggregate.CreateIterator invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteAggregate</span> <span class=\"keyword\">extends</span> <span class=\"title\">Aggregate</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(list) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.list = list;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteAggregate Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createIterator() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteAggregate.CreateIterator invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.iterator = <span class=\"keyword\">new</span> ConcreteIterator(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> aggregate = <span class=\"keyword\">new</span> ConcreteAggregate([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]);</div><div class=\"line\">aggregate.createIterator();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(aggregate.iterator.first());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(aggregate.iterator.next());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(aggregate.iterator.currentItem());</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> IteratorPattern &#123;</div><div class=\"line\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">namespace</span> Demo &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>) : <span class=\"title\">void</span> </span>&#123;</div><div class=\"line\">\t\t    <span class=\"keyword\">var</span> nArray = [<span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">21</span>, <span class=\"number\">657</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">765</span>, <span class=\"number\">13</span>, <span class=\"number\">65</span>],</div><div class=\"line\">\t\t\t\tnumbers: IteratorPattern.Numbers = <span class=\"keyword\">new</span> IteratorPattern.Numbers(nArray),</div><div class=\"line\">\t\t\t\tit: IteratorPattern.ConcreteIterator = &lt;IteratorPattern.ConcreteIterator&gt;numbers.createIterator();</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (it.hasNext()) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(it.next());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Iterator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Iterator Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    first() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Iterator.first invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    next() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Iterator.next invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    isDone() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Iterator.isDone invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    currentItem() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Iterator.currentItem invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteIterator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Iterator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(aggregate) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.index = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.aggregate = aggregate;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteIterator Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    first() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteIterator.first invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.aggregate.list[<span class=\"number\">0</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    next() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteIterator.next invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.index += <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.aggregate.list[<span class=\"keyword\">this</span>.index];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    currentItem() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteIterator.currentItem invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.aggregate.list[<span class=\"keyword\">this</span>.index];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Aggregate</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Aggregate Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createIterator() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Aggregate.CreateIterator invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteAggregate</span> <span class=\"keyword\">extends</span> <span class=\"title\">Aggregate</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(list) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.list = list;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteAggregate Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createIterator() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteAggregate.CreateIterator invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.iterator = <span class=\"keyword\">new</span> ConcreteIterator(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> aggregate = <span class=\"keyword\">new</span> ConcreteAggregate([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]);</div><div class=\"line\">aggregate.createIterator();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(aggregate.iterator.first());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(aggregate.iterator.next());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(aggregate.iterator.currentItem());</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> IteratorPattern &#123;</div><div class=\"line\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">namespace</span> Demo &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>) : <span class=\"title\">void</span> </span>&#123;</div><div class=\"line\">\t\t    <span class=\"keyword\">var</span> nArray = [<span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">21</span>, <span class=\"number\">657</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">765</span>, <span class=\"number\">13</span>, <span class=\"number\">65</span>],</div><div class=\"line\">\t\t\t\tnumbers: IteratorPattern.Numbers = <span class=\"keyword\">new</span> IteratorPattern.Numbers(nArray),</div><div class=\"line\">\t\t\t\tit: IteratorPattern.ConcreteIterator = &lt;IteratorPattern.ConcreteIterator&gt;numbers.createIterator();</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (it.hasNext()) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(it.next());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"中介模式(Mediator)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 中介模式的定义\n- 中介者模式用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。\n- 每一个同事对象在需要和其他同事对象通信时，先与中介者通信，通过中介者来间接完成与其他同事类的通信；\n- 在具体同事类中实现了在抽象同事类中定义的方法。\n- 中介者模式又称为调停者模式，它是一种对象行为型模式。\n### 中介模式包含二个角色：\n- Mediator-抽象中介者用于定义一个接口，该接口用于与各同事对象之间的通信；\n- ConcreteMediator-具体中介者是抽象中介者的子类，通过协调各个同事对象来实现协作行为，了解并维护它的各个同事对象的引用；\n- Colleague-抽象同事类定义各同事的公有方法；\n- Colleague-具体同事类是抽象同事类的子类，每一个同事对象都引用一个中介者对象；\n\n---\n\n### ES6实现\n``` js\nclass Mediator {\n    constructor() {\n        console.log('Mediator Class created');\n    }\n\n    colleagueChanged(colleague) {\n        console.log('Mediator.colleagueChanged invoked');\n    }\n}\n\nclass ConcreteMediator extends Mediator {\n    constructor() {\n        super();\n        console.log('ConcreteMediator Class created');\n        this.colleague1 = new ConcreteColleague1(this);\n        this.colleague2 = new ConcreteColleague2(this);\n    }\n\n    colleagueChanged(colleague) {\n        console.log('ConcreteMediator.colleagueChanged invoked');\n        switch (colleague) {\n            case this.colleague1:\n                console.log('ConcreteColleague1 has Changed -> change ConcreteColleague2.feature: ');\n                this.colleague2.setFeature('new feature 2');\n                break\n            case this.colleague2:\n                console.log('ConcreteColleague2 has Changed, but do nothing');\n                break\n            default:\n                console.log('Do nothing');\n        }\n    }\n}\n\nclass Colleague {\n    constructor() {\n        console.log('Colleague Class created');\n    }\n\n    changed() {\n        console.log('Colleague.changed invoked');\n        this.mediator.colleagueChanged(this);\n    }\n}\n\nclass ConcreteColleague1 extends Colleague {\n    constructor(mediator) {\n        super();\n        console.log('ConcreteColleague1 Class created');\n        this.mediator = mediator;\n        this.feature = \"feature 1\";\n    }\n\n    setFeature(feature) {\n        console.log('ConcreteColleague1.setFeature invoked');\n        console.log('ConcreteColleague1 Feature has changed from ' + this.feature + ' to ' + feature)\n        this.feature = feature;\n        this.changed();\n    }\n}\n\nclass ConcreteColleague2 extends Colleague {\n    constructor(mediator) {\n        super();\n        console.log('ConcreteColleague2 Class created');\n        this.mediator = mediator;\n        this.feature = \"feature 2\";\n    }\n\n    setFeature(feature) {\n        console.log('ConcreteColleague2.setFeature invoked');\n        console.log('ConcreteColleague2 Feature has changed from ' + this.feature + ' to ' + feature);\n        this.feature = feature;\n        this.changed();\n    }\n}\n\nvar mediator = new ConcreteMediator();\nmediator.colleague1.setFeature(\"new feature 1\");\n```\n---\n\n### Typescript实现\n``` ts\nnamespace MediatorPattern {\n    export interface Mediator {\n        send(msg: string, colleague: Colleague): void;\n    }\n\n    export class Colleague {\n        public mediator: Mediator;\n\n        constructor(mediator: Mediator) {\n            this.mediator = mediator;\n        }\n\n        public send(msg: string): void {\n            throw new Error(\"Abstract Method!\");\n        }\n\n        public receive(msg: string): void {\n            throw new Error(\"Abstract Method!\");\n        }\n    }\n\n    export class ConcreteColleagueA extends Colleague {\n        constructor(mediator: Mediator) {\n            super(mediator);\n        }\n\n        public send(msg: string): void {\n            this.mediator.send(msg, this);\n        }\n\n        public receive(msg: string): void {\n            console.log(msg, \"`receive` of ConcreteColleagueA is being called!\");\n        }\n    }\n\n    export class ConcreteColleagueB extends Colleague {\n        constructor(mediator: Mediator) {\n            super(mediator);\n        }\n\n        public send(msg: string): void {\n            this.mediator.send(msg, this);\n        }\n\n        public receive(msg: string): void {\n            console.log(msg, \"`receive` of ConcreteColleagueB is being called!\");\n        }\n    }\n\n    export class ConcreteMediator implements Mediator {\n        public concreteColleagueA: ConcreteColleagueA;\n        public concreteColleagueB: ConcreteColleagueB;\n\n        public send(msg: string, colleague: Colleague): void {\n            if (this.concreteColleagueA === colleague) {\n                this.concreteColleagueB.receive(msg);\n            } else {\n                this.concreteColleagueA.receive(msg);\n            }\n        }\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Mediator.md","raw":"---\ntitle: 中介模式(Mediator)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Behavioral Patterns]\ntags: [javasctipt, 中介模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 中介模式的定义\n- 中介者模式用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。\n- 每一个同事对象在需要和其他同事对象通信时，先与中介者通信，通过中介者来间接完成与其他同事类的通信；\n- 在具体同事类中实现了在抽象同事类中定义的方法。\n- 中介者模式又称为调停者模式，它是一种对象行为型模式。\n### 中介模式包含二个角色：\n- Mediator-抽象中介者用于定义一个接口，该接口用于与各同事对象之间的通信；\n- ConcreteMediator-具体中介者是抽象中介者的子类，通过协调各个同事对象来实现协作行为，了解并维护它的各个同事对象的引用；\n- Colleague-抽象同事类定义各同事的公有方法；\n- Colleague-具体同事类是抽象同事类的子类，每一个同事对象都引用一个中介者对象；\n\n---\n\n### ES6实现\n``` js\nclass Mediator {\n    constructor() {\n        console.log('Mediator Class created');\n    }\n\n    colleagueChanged(colleague) {\n        console.log('Mediator.colleagueChanged invoked');\n    }\n}\n\nclass ConcreteMediator extends Mediator {\n    constructor() {\n        super();\n        console.log('ConcreteMediator Class created');\n        this.colleague1 = new ConcreteColleague1(this);\n        this.colleague2 = new ConcreteColleague2(this);\n    }\n\n    colleagueChanged(colleague) {\n        console.log('ConcreteMediator.colleagueChanged invoked');\n        switch (colleague) {\n            case this.colleague1:\n                console.log('ConcreteColleague1 has Changed -> change ConcreteColleague2.feature: ');\n                this.colleague2.setFeature('new feature 2');\n                break\n            case this.colleague2:\n                console.log('ConcreteColleague2 has Changed, but do nothing');\n                break\n            default:\n                console.log('Do nothing');\n        }\n    }\n}\n\nclass Colleague {\n    constructor() {\n        console.log('Colleague Class created');\n    }\n\n    changed() {\n        console.log('Colleague.changed invoked');\n        this.mediator.colleagueChanged(this);\n    }\n}\n\nclass ConcreteColleague1 extends Colleague {\n    constructor(mediator) {\n        super();\n        console.log('ConcreteColleague1 Class created');\n        this.mediator = mediator;\n        this.feature = \"feature 1\";\n    }\n\n    setFeature(feature) {\n        console.log('ConcreteColleague1.setFeature invoked');\n        console.log('ConcreteColleague1 Feature has changed from ' + this.feature + ' to ' + feature)\n        this.feature = feature;\n        this.changed();\n    }\n}\n\nclass ConcreteColleague2 extends Colleague {\n    constructor(mediator) {\n        super();\n        console.log('ConcreteColleague2 Class created');\n        this.mediator = mediator;\n        this.feature = \"feature 2\";\n    }\n\n    setFeature(feature) {\n        console.log('ConcreteColleague2.setFeature invoked');\n        console.log('ConcreteColleague2 Feature has changed from ' + this.feature + ' to ' + feature);\n        this.feature = feature;\n        this.changed();\n    }\n}\n\nvar mediator = new ConcreteMediator();\nmediator.colleague1.setFeature(\"new feature 1\");\n```\n---\n\n### Typescript实现\n``` ts\nnamespace MediatorPattern {\n    export interface Mediator {\n        send(msg: string, colleague: Colleague): void;\n    }\n\n    export class Colleague {\n        public mediator: Mediator;\n\n        constructor(mediator: Mediator) {\n            this.mediator = mediator;\n        }\n\n        public send(msg: string): void {\n            throw new Error(\"Abstract Method!\");\n        }\n\n        public receive(msg: string): void {\n            throw new Error(\"Abstract Method!\");\n        }\n    }\n\n    export class ConcreteColleagueA extends Colleague {\n        constructor(mediator: Mediator) {\n            super(mediator);\n        }\n\n        public send(msg: string): void {\n            this.mediator.send(msg, this);\n        }\n\n        public receive(msg: string): void {\n            console.log(msg, \"`receive` of ConcreteColleagueA is being called!\");\n        }\n    }\n\n    export class ConcreteColleagueB extends Colleague {\n        constructor(mediator: Mediator) {\n            super(mediator);\n        }\n\n        public send(msg: string): void {\n            this.mediator.send(msg, this);\n        }\n\n        public receive(msg: string): void {\n            console.log(msg, \"`receive` of ConcreteColleagueB is being called!\");\n        }\n    }\n\n    export class ConcreteMediator implements Mediator {\n        public concreteColleagueA: ConcreteColleagueA;\n        public concreteColleagueB: ConcreteColleagueB;\n\n        public send(msg: string, colleague: Colleague): void {\n            if (this.concreteColleagueA === colleague) {\n                this.concreteColleagueB.receive(msg);\n            } else {\n                this.concreteColleagueA.receive(msg);\n            }\n        }\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Mediator","published":1,"updated":"2017-07-08T07:06:16.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4v0315i000q2tmwzcqgelzu","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"中介模式的定义\"><a href=\"#中介模式的定义\" class=\"headerlink\" title=\"中介模式的定义\"></a>中介模式的定义</h3><ul>\n<li>中介者模式用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</li>\n<li>每一个同事对象在需要和其他同事对象通信时，先与中介者通信，通过中介者来间接完成与其他同事类的通信；</li>\n<li>在具体同事类中实现了在抽象同事类中定义的方法。</li>\n<li>中介者模式又称为调停者模式，它是一种对象行为型模式。<h3 id=\"中介模式包含二个角色：\"><a href=\"#中介模式包含二个角色：\" class=\"headerlink\" title=\"中介模式包含二个角色：\"></a>中介模式包含二个角色：</h3></li>\n<li>Mediator-抽象中介者用于定义一个接口，该接口用于与各同事对象之间的通信；</li>\n<li>ConcreteMediator-具体中介者是抽象中介者的子类，通过协调各个同事对象来实现协作行为，了解并维护它的各个同事对象的引用；</li>\n<li>Colleague-抽象同事类定义各同事的公有方法；</li>\n<li>Colleague-具体同事类是抽象同事类的子类，每一个同事对象都引用一个中介者对象；</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mediator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Mediator Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    colleagueChanged(colleague) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Mediator.colleagueChanged invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteMediator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Mediator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteMediator Class created'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.colleague1 = <span class=\"keyword\">new</span> ConcreteColleague1(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.colleague2 = <span class=\"keyword\">new</span> ConcreteColleague2(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    colleagueChanged(colleague) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteMediator.colleagueChanged invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">switch</span> (colleague) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"keyword\">this</span>.colleague1:</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague1 has Changed -&gt; change ConcreteColleague2.feature: '</span>);</div><div class=\"line\">                <span class=\"keyword\">this</span>.colleague2.setFeature(<span class=\"string\">'new feature 2'</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"keyword\">this</span>.colleague2:</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague2 has Changed, but do nothing'</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'Do nothing'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Colleague</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Colleague Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    changed() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Colleague.changed invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.mediator.colleagueChanged(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteColleague1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Colleague</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(mediator) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague1 Class created'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.mediator = mediator;</div><div class=\"line\">        <span class=\"keyword\">this</span>.feature = <span class=\"string\">\"feature 1\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setFeature(feature) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague1.setFeature invoked'</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague1 Feature has changed from '</span> + <span class=\"keyword\">this</span>.feature + <span class=\"string\">' to '</span> + feature)</div><div class=\"line\">        <span class=\"keyword\">this</span>.feature = feature;</div><div class=\"line\">        <span class=\"keyword\">this</span>.changed();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteColleague2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Colleague</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(mediator) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague2 Class created'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.mediator = mediator;</div><div class=\"line\">        <span class=\"keyword\">this</span>.feature = <span class=\"string\">\"feature 2\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setFeature(feature) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague2.setFeature invoked'</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague2 Feature has changed from '</span> + <span class=\"keyword\">this</span>.feature + <span class=\"string\">' to '</span> + feature);</div><div class=\"line\">        <span class=\"keyword\">this</span>.feature = feature;</div><div class=\"line\">        <span class=\"keyword\">this</span>.changed();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> mediator = <span class=\"keyword\">new</span> ConcreteMediator();</div><div class=\"line\">mediator.colleague1.setFeature(<span class=\"string\">\"new feature 1\"</span>);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> MediatorPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Mediator &#123;</div><div class=\"line\">        send(msg: <span class=\"built_in\">string</span>, colleague: Colleague): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Colleague &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> mediator: Mediator;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">mediator: Mediator</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.mediator = mediator;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> send(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract Method!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> receive(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract Method!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteColleagueA <span class=\"keyword\">extends</span> Colleague &#123;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">mediator: Mediator</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(mediator);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> send(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.mediator.send(msg, <span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> receive(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(msg, <span class=\"string\">\"`receive` of ConcreteColleagueA is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteColleagueB <span class=\"keyword\">extends</span> Colleague &#123;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">mediator: Mediator</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(mediator);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> send(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.mediator.send(msg, <span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> receive(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(msg, <span class=\"string\">\"`receive` of ConcreteColleagueB is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteMediator <span class=\"keyword\">implements</span> Mediator &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> concreteColleagueA: ConcreteColleagueA;</div><div class=\"line\">        <span class=\"keyword\">public</span> concreteColleagueB: ConcreteColleagueB;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> send(msg: <span class=\"built_in\">string</span>, colleague: Colleague): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.concreteColleagueA === colleague) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.concreteColleagueB.receive(msg);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.concreteColleagueA.receive(msg);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"中介模式的定义\"><a href=\"#中介模式的定义\" class=\"headerlink\" title=\"中介模式的定义\"></a>中介模式的定义</h3><ul>\n<li>中介者模式用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</li>\n<li>每一个同事对象在需要和其他同事对象通信时，先与中介者通信，通过中介者来间接完成与其他同事类的通信；</li>\n<li>在具体同事类中实现了在抽象同事类中定义的方法。</li>\n<li>中介者模式又称为调停者模式，它是一种对象行为型模式。<h3 id=\"中介模式包含二个角色：\"><a href=\"#中介模式包含二个角色：\" class=\"headerlink\" title=\"中介模式包含二个角色：\"></a>中介模式包含二个角色：</h3></li>\n<li>Mediator-抽象中介者用于定义一个接口，该接口用于与各同事对象之间的通信；</li>\n<li>ConcreteMediator-具体中介者是抽象中介者的子类，通过协调各个同事对象来实现协作行为，了解并维护它的各个同事对象的引用；</li>\n<li>Colleague-抽象同事类定义各同事的公有方法；</li>\n<li>Colleague-具体同事类是抽象同事类的子类，每一个同事对象都引用一个中介者对象；</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mediator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Mediator Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    colleagueChanged(colleague) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Mediator.colleagueChanged invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteMediator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Mediator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteMediator Class created'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.colleague1 = <span class=\"keyword\">new</span> ConcreteColleague1(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.colleague2 = <span class=\"keyword\">new</span> ConcreteColleague2(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    colleagueChanged(colleague) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteMediator.colleagueChanged invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">switch</span> (colleague) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"keyword\">this</span>.colleague1:</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague1 has Changed -&gt; change ConcreteColleague2.feature: '</span>);</div><div class=\"line\">                <span class=\"keyword\">this</span>.colleague2.setFeature(<span class=\"string\">'new feature 2'</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"keyword\">this</span>.colleague2:</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague2 has Changed, but do nothing'</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'Do nothing'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Colleague</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Colleague Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    changed() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Colleague.changed invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.mediator.colleagueChanged(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteColleague1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Colleague</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(mediator) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague1 Class created'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.mediator = mediator;</div><div class=\"line\">        <span class=\"keyword\">this</span>.feature = <span class=\"string\">\"feature 1\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setFeature(feature) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague1.setFeature invoked'</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague1 Feature has changed from '</span> + <span class=\"keyword\">this</span>.feature + <span class=\"string\">' to '</span> + feature)</div><div class=\"line\">        <span class=\"keyword\">this</span>.feature = feature;</div><div class=\"line\">        <span class=\"keyword\">this</span>.changed();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteColleague2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Colleague</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(mediator) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague2 Class created'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.mediator = mediator;</div><div class=\"line\">        <span class=\"keyword\">this</span>.feature = <span class=\"string\">\"feature 2\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setFeature(feature) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague2.setFeature invoked'</span>);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteColleague2 Feature has changed from '</span> + <span class=\"keyword\">this</span>.feature + <span class=\"string\">' to '</span> + feature);</div><div class=\"line\">        <span class=\"keyword\">this</span>.feature = feature;</div><div class=\"line\">        <span class=\"keyword\">this</span>.changed();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> mediator = <span class=\"keyword\">new</span> ConcreteMediator();</div><div class=\"line\">mediator.colleague1.setFeature(<span class=\"string\">\"new feature 1\"</span>);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> MediatorPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Mediator &#123;</div><div class=\"line\">        send(msg: <span class=\"built_in\">string</span>, colleague: Colleague): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Colleague &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> mediator: Mediator;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">mediator: Mediator</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.mediator = mediator;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> send(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract Method!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> receive(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract Method!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteColleagueA <span class=\"keyword\">extends</span> Colleague &#123;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">mediator: Mediator</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(mediator);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> send(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.mediator.send(msg, <span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> receive(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(msg, <span class=\"string\">\"`receive` of ConcreteColleagueA is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteColleagueB <span class=\"keyword\">extends</span> Colleague &#123;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">mediator: Mediator</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(mediator);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> send(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.mediator.send(msg, <span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> receive(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(msg, <span class=\"string\">\"`receive` of ConcreteColleagueB is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteMediator <span class=\"keyword\">implements</span> Mediator &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> concreteColleagueA: ConcreteColleagueA;</div><div class=\"line\">        <span class=\"keyword\">public</span> concreteColleagueB: ConcreteColleagueB;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> send(msg: <span class=\"built_in\">string</span>, colleague: Colleague): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.concreteColleagueA === colleague) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.concreteColleagueB.receive(msg);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.concreteColleagueA.receive(msg);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"原型模式(Prototype)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n\n---\n\n### ES6实现\n``` js\nclass Prototype {\n    constructor(prototype) {\n        console.log(\"Prototype Class created\");\n    }\n\n    setFeature(key, val) {\n        this[key] = val\n    }\n\n    clone() {\n        console.log(\"Prototype.clone invoked\");\n    }\n}\n\nclass ConcretePrototype1 extends Prototype {\n    constructor() {\n        super();\n        console.log(\"ConcretePrototype1 created\");\n        this.feature = \"feature 1\"\n    }\n\n    clone() {\n        console.log('ConcretePrototype1.clone invoked');\n        let clone = new ConcretePrototype1();\n        let keys = Object.keys(this);\n\n        keys.forEach(k => clone.setFeature(k, this[k]));\n\n        console.log(\"ConcretePrototype1 cloned\");\n        return clone;\n    }\n}\n\nclass ConcretePrototype2 extends Prototype {\n    constructor() {\n        super();\n        console.log(\"ConcretePrototype2 created\");\n        this.feature = \"feature 2\"\n    }\n\n    clone() {\n        console.log('ConcretePrototype2.Clone function');\n        let clone = new ConcretePrototype2();\n        let keys = Object.keys(this);\n\n        keys.forEach(k => clone.setFeature(k, this[k]));\n        console.log(\"ConcretePrototype2 cloned\");\n        return clone;\n    }\n}\n\nvar proto1 = new ConcretePrototype1();\nproto1.setFeature('feature', \"feature 11\");\nvar clone1 = proto1.clone();\nconsole.log(clone1.feature);\nconsole.log(typeof clone1);\nconsole.log(clone1 === proto1);\n\nvar proto2 = new ConcretePrototype2();\nproto2.setFeature('feature', \"feature 22\");\nvar clone2 = proto2.clone();\nconsole.log(clone2.feature);\nconsole.log(typeof clone2);\nconsole.log(clone2 === proto2);\n```\n---\n\n### Typescript实现\n``` ts\nnamespace PrototypePattern {\n    export interface Prototype {\n        clone(): Prototype;\n        toString(): string;\n    }\n\n    export class Concrete1 implements Prototype {\n\n        clone() : Prototype {\n            return new Concrete1();\n        }\n\n        toString(): string {\n            return \"This is Concrete1\";\n        }\n    }\n\n    export class Concrete2 implements Prototype {\n\n        clone() : Prototype {\n            return new Concrete2();\n        }\n\n        toString(): string {\n            return \"This is Concrete2\";\n        }\n    }\n\n    export class Concrete3 implements Prototype {\n\n        clone() : Prototype {\n            return new Concrete3();\n        }\n\n        toString(): string {\n            return \"This is Concrete3\";\n        }\n    }\n\n\n    export class Builder {\n        private prototypeMap: { [s: string]: Prototype; } = {};\n\n        constructor() {\n            this.prototypeMap['c1'] = new Concrete1();\n            this.prototypeMap['c2'] = new Concrete2();\n            this.prototypeMap['c3'] = new Concrete3();\n        }\n\n        createOne(s: string): Prototype {\n            console.log(s);\n            return this.prototypeMap[s].clone();\n        }\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Prototype.md","raw":"---\ntitle:  原型模式(Prototype)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Creational Patterns]\ntags: [javasctipt,  原型模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n\n---\n\n### ES6实现\n``` js\nclass Prototype {\n    constructor(prototype) {\n        console.log(\"Prototype Class created\");\n    }\n\n    setFeature(key, val) {\n        this[key] = val\n    }\n\n    clone() {\n        console.log(\"Prototype.clone invoked\");\n    }\n}\n\nclass ConcretePrototype1 extends Prototype {\n    constructor() {\n        super();\n        console.log(\"ConcretePrototype1 created\");\n        this.feature = \"feature 1\"\n    }\n\n    clone() {\n        console.log('ConcretePrototype1.clone invoked');\n        let clone = new ConcretePrototype1();\n        let keys = Object.keys(this);\n\n        keys.forEach(k => clone.setFeature(k, this[k]));\n\n        console.log(\"ConcretePrototype1 cloned\");\n        return clone;\n    }\n}\n\nclass ConcretePrototype2 extends Prototype {\n    constructor() {\n        super();\n        console.log(\"ConcretePrototype2 created\");\n        this.feature = \"feature 2\"\n    }\n\n    clone() {\n        console.log('ConcretePrototype2.Clone function');\n        let clone = new ConcretePrototype2();\n        let keys = Object.keys(this);\n\n        keys.forEach(k => clone.setFeature(k, this[k]));\n        console.log(\"ConcretePrototype2 cloned\");\n        return clone;\n    }\n}\n\nvar proto1 = new ConcretePrototype1();\nproto1.setFeature('feature', \"feature 11\");\nvar clone1 = proto1.clone();\nconsole.log(clone1.feature);\nconsole.log(typeof clone1);\nconsole.log(clone1 === proto1);\n\nvar proto2 = new ConcretePrototype2();\nproto2.setFeature('feature', \"feature 22\");\nvar clone2 = proto2.clone();\nconsole.log(clone2.feature);\nconsole.log(typeof clone2);\nconsole.log(clone2 === proto2);\n```\n---\n\n### Typescript实现\n``` ts\nnamespace PrototypePattern {\n    export interface Prototype {\n        clone(): Prototype;\n        toString(): string;\n    }\n\n    export class Concrete1 implements Prototype {\n\n        clone() : Prototype {\n            return new Concrete1();\n        }\n\n        toString(): string {\n            return \"This is Concrete1\";\n        }\n    }\n\n    export class Concrete2 implements Prototype {\n\n        clone() : Prototype {\n            return new Concrete2();\n        }\n\n        toString(): string {\n            return \"This is Concrete2\";\n        }\n    }\n\n    export class Concrete3 implements Prototype {\n\n        clone() : Prototype {\n            return new Concrete3();\n        }\n\n        toString(): string {\n            return \"This is Concrete3\";\n        }\n    }\n\n\n    export class Builder {\n        private prototypeMap: { [s: string]: Prototype; } = {};\n\n        constructor() {\n            this.prototypeMap['c1'] = new Concrete1();\n            this.prototypeMap['c2'] = new Concrete2();\n            this.prototypeMap['c3'] = new Concrete3();\n        }\n\n        createOne(s: string): Prototype {\n            console.log(s);\n            return this.prototypeMap[s].clone();\n        }\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Prototype","published":1,"updated":"2017-07-08T07:43:51.475Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4v0315k000s2tmwlk2t23un","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Prototype</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(prototype) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Prototype Class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setFeature(key, val) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>[key] = val</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    clone() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Prototype.clone invoked\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcretePrototype1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Prototype</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcretePrototype1 created\"</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.feature = <span class=\"string\">\"feature 1\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    clone() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcretePrototype1.clone invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">let</span> clone = <span class=\"keyword\">new</span> ConcretePrototype1();</div><div class=\"line\">        <span class=\"keyword\">let</span> keys = <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">        keys.forEach(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> clone.setFeature(k, <span class=\"keyword\">this</span>[k]));</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcretePrototype1 cloned\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> clone;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcretePrototype2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Prototype</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcretePrototype2 created\"</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.feature = <span class=\"string\">\"feature 2\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    clone() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcretePrototype2.Clone function'</span>);</div><div class=\"line\">        <span class=\"keyword\">let</span> clone = <span class=\"keyword\">new</span> ConcretePrototype2();</div><div class=\"line\">        <span class=\"keyword\">let</span> keys = <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">        keys.forEach(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> clone.setFeature(k, <span class=\"keyword\">this</span>[k]));</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcretePrototype2 cloned\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> clone;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> proto1 = <span class=\"keyword\">new</span> ConcretePrototype1();</div><div class=\"line\">proto1.setFeature(<span class=\"string\">'feature'</span>, <span class=\"string\">\"feature 11\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> clone1 = proto1.clone();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(clone1.feature);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> clone1);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(clone1 === proto1);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> proto2 = <span class=\"keyword\">new</span> ConcretePrototype2();</div><div class=\"line\">proto2.setFeature(<span class=\"string\">'feature'</span>, <span class=\"string\">\"feature 22\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> clone2 = proto2.clone();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(clone2.feature);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> clone2);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(clone2 === proto2);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> PrototypePattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Prototype &#123;</div><div class=\"line\">        clone(): Prototype;</div><div class=\"line\">        toString(): <span class=\"built_in\">string</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Concrete1 <span class=\"keyword\">implements</span> Prototype &#123;</div><div class=\"line\"></div><div class=\"line\">        clone() : Prototype &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Concrete1();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        toString(): <span class=\"built_in\">string</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"This is Concrete1\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Concrete2 <span class=\"keyword\">implements</span> Prototype &#123;</div><div class=\"line\"></div><div class=\"line\">        clone() : Prototype &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Concrete2();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        toString(): <span class=\"built_in\">string</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"This is Concrete2\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Concrete3 <span class=\"keyword\">implements</span> Prototype &#123;</div><div class=\"line\"></div><div class=\"line\">        clone() : Prototype &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Concrete3();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        toString(): <span class=\"built_in\">string</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"This is Concrete3\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Builder &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> prototypeMap: &#123; [s: <span class=\"built_in\">string</span>]: Prototype; &#125; = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.prototypeMap[<span class=\"string\">'c1'</span>] = <span class=\"keyword\">new</span> Concrete1();</div><div class=\"line\">            <span class=\"keyword\">this</span>.prototypeMap[<span class=\"string\">'c2'</span>] = <span class=\"keyword\">new</span> Concrete2();</div><div class=\"line\">            <span class=\"keyword\">this</span>.prototypeMap[<span class=\"string\">'c3'</span>] = <span class=\"keyword\">new</span> Concrete3();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        createOne(s: <span class=\"built_in\">string</span>): Prototype &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(s);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.prototypeMap[s].clone();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><p><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></p>\n</li>\n<li><p><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></p>\n</li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Prototype</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(prototype) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Prototype Class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setFeature(key, val) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>[key] = val</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    clone() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Prototype.clone invoked\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcretePrototype1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Prototype</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcretePrototype1 created\"</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.feature = <span class=\"string\">\"feature 1\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    clone() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcretePrototype1.clone invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">let</span> clone = <span class=\"keyword\">new</span> ConcretePrototype1();</div><div class=\"line\">        <span class=\"keyword\">let</span> keys = <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">        keys.forEach(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> clone.setFeature(k, <span class=\"keyword\">this</span>[k]));</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcretePrototype1 cloned\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> clone;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcretePrototype2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Prototype</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcretePrototype2 created\"</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.feature = <span class=\"string\">\"feature 2\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    clone() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcretePrototype2.Clone function'</span>);</div><div class=\"line\">        <span class=\"keyword\">let</span> clone = <span class=\"keyword\">new</span> ConcretePrototype2();</div><div class=\"line\">        <span class=\"keyword\">let</span> keys = <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">        keys.forEach(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> clone.setFeature(k, <span class=\"keyword\">this</span>[k]));</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcretePrototype2 cloned\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> clone;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> proto1 = <span class=\"keyword\">new</span> ConcretePrototype1();</div><div class=\"line\">proto1.setFeature(<span class=\"string\">'feature'</span>, <span class=\"string\">\"feature 11\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> clone1 = proto1.clone();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(clone1.feature);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> clone1);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(clone1 === proto1);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> proto2 = <span class=\"keyword\">new</span> ConcretePrototype2();</div><div class=\"line\">proto2.setFeature(<span class=\"string\">'feature'</span>, <span class=\"string\">\"feature 22\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> clone2 = proto2.clone();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(clone2.feature);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> clone2);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(clone2 === proto2);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> PrototypePattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Prototype &#123;</div><div class=\"line\">        clone(): Prototype;</div><div class=\"line\">        toString(): <span class=\"built_in\">string</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Concrete1 <span class=\"keyword\">implements</span> Prototype &#123;</div><div class=\"line\"></div><div class=\"line\">        clone() : Prototype &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Concrete1();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        toString(): <span class=\"built_in\">string</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"This is Concrete1\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Concrete2 <span class=\"keyword\">implements</span> Prototype &#123;</div><div class=\"line\"></div><div class=\"line\">        clone() : Prototype &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Concrete2();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        toString(): <span class=\"built_in\">string</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"This is Concrete2\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Concrete3 <span class=\"keyword\">implements</span> Prototype &#123;</div><div class=\"line\"></div><div class=\"line\">        clone() : Prototype &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Concrete3();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        toString(): <span class=\"built_in\">string</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"This is Concrete3\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Builder &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> prototypeMap: &#123; [s: <span class=\"built_in\">string</span>]: Prototype; &#125; = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.prototypeMap[<span class=\"string\">'c1'</span>] = <span class=\"keyword\">new</span> Concrete1();</div><div class=\"line\">            <span class=\"keyword\">this</span>.prototypeMap[<span class=\"string\">'c2'</span>] = <span class=\"keyword\">new</span> Concrete2();</div><div class=\"line\">            <span class=\"keyword\">this</span>.prototypeMap[<span class=\"string\">'c3'</span>] = <span class=\"keyword\">new</span> Concrete3();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        createOne(s: <span class=\"built_in\">string</span>): Prototype &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(s);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.prototypeMap[s].clone();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><p><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></p>\n</li>\n<li><p><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></p>\n</li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"观察者模式(Observer)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 观察者模式的定义\n- 观察者模式定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。\n- 观察者模式又叫做发布-订阅模式、模型-视图模式、源-监听器模式或从属者模式。\n- 观察者模式是一种对象行为型模式。\n\n\n### 观察者模式包含四个角色：\n- Subject-目标又称为主题，它是指被观察的对象；\n- ConcreteSubject-具体目标是目标类的子类，通常它包含有经常发生改变的数据，当它的状态发生改变时，向它的各个观察者发出通知；\n- Observer-观察者将对观察目标的改变做出反应；\n- ConcreteObserver-在具体观察者中维护一个指向具体目标对象的引用，它存储具体观察者的有关状态，这些状态需要和具体目标的状态保持一致。\n\n---\n\n### ES6实现\n``` js\nclass Subject {\n    constructor() {\n        console.log('Subject Class created');\n    }\n\n    attach(observer) {\n        this.observers.push(observer);\n        console.log('Subject.attach invoked');\n    }\n\n    dettach(observer) {\n        console.log('Subject.dettach invoked');\n        for (var i in this.observers) {\n            if (this.observers[i] === observer) {\n                this.observers.splice(i, 1);\n            }\n        }\n    }\n\n    notify() {\n        console.log('Subject.notify invoked');\n        for (var i in this.observers) {\n            this.observers[i].update(this);\n        }\n    }\n}\n\nclass ConcreteSubject extends Subject {\n    constructor() {\n        super();\n        this.subjectState = null;\n        this.observers = [];\n        console.log('ConcreteSubject Class created');\n    }\n\n    getState() {\n        console.log('ConcreteSubject.getState invoked');\n        return this.subjectState;\n    }\n\n    setState(state) {\n        console.log('ConcreteSubject.setState invoked');\n        this.subjectState = state;\n        this.notify();\n    }\n}\n\nclass Observer {\n    constructor() {\n        console.log('Observer Class created');\n    }\n\n    update() {\n        console.log('Observer.update invoked');\n    }\n}\n\nclass ConcreteObserver extends Observer {\n    constructor() {\n        super();\n        this.observerState = '';\n        console.log('ConcreteObserver Class created');\n    }\n\n    update(Subject) {\n        console.log('ConcreteObserver.update invoked');\n        this.observerState = Subject.getState();\n        console.log('Observer new state: ' + this.observerState);\n    }\n}\n\nvar observer1 = new ConcreteObserver();\nvar observer2 = new ConcreteObserver();\nvar subject = new ConcreteSubject();\nsubject.attach(observer1);\nsubject.attach(observer2);\nsubject.setState('state 1');\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace ObserverPattern {\n    export class Subject {\n        private observers: Observer[] = [];\n\n        public register(observer: Observer): void {\n            console.log(observer, \"is pushed!\");\n            this.observers.push(observer);\n        }\n\n        public unregister(observer: Observer): void {\n            var n: number = this.observers.indexOf(observer);\n            console.log(observer, \"is removed\");\n            this.observers.splice(n, 1);\n        }\n\n        public notify(): void {\n            console.log(\"notify all the observers\", this.observers);\n            var i: number\n              , max: number;\n\n            for (i = 0, max = this.observers.length; i < max; i += 1) {\n                this.observers[i].notify();\n            }\n        }\n    }\n\n    export class ConcreteSubject extends Subject {\n        private subjectState: number;\n\n        get SubjectState(): number {\n            return this.subjectState;\n        }\n\n        set SubjectState(subjectState: number) {\n            this.subjectState = subjectState;\n        }\n    }\n\n    export class Observer {\n        public notify(): void {\n            throw new Error(\"Abstract Method!\");\n        }\n    }\n\n    export class ConcreteObserver extends Observer {\n        private name: string;\n        private state: number;\n        private subject: ConcreteSubject;\n\n        constructor (subject: ConcreteSubject, name: string) {\n            super();\n            console.log(\"ConcreteObserver\", name, \"is created!\");\n            this.subject = subject;\n            this.name = name;\n        }\n\n        public notify(): void {\n            console.log(\"ConcreteObserver's notify method\");\n            console.log(this.name, this.state);\n            this.state = this.subject.SubjectState;\n        }\n\n        get Subject(): ConcreteSubject {\n            return this.subject;\n        }\n\n        set Subject(subject: ConcreteSubject) {\n            this.subject = subject;\n        }\n    }\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Observer.md","raw":"---\ntitle: 观察者模式(Observer)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Behavioral Patterns]\ntags: [javasctipt, 观察者模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 观察者模式的定义\n- 观察者模式定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。\n- 观察者模式又叫做发布-订阅模式、模型-视图模式、源-监听器模式或从属者模式。\n- 观察者模式是一种对象行为型模式。\n\n\n### 观察者模式包含四个角色：\n- Subject-目标又称为主题，它是指被观察的对象；\n- ConcreteSubject-具体目标是目标类的子类，通常它包含有经常发生改变的数据，当它的状态发生改变时，向它的各个观察者发出通知；\n- Observer-观察者将对观察目标的改变做出反应；\n- ConcreteObserver-在具体观察者中维护一个指向具体目标对象的引用，它存储具体观察者的有关状态，这些状态需要和具体目标的状态保持一致。\n\n---\n\n### ES6实现\n``` js\nclass Subject {\n    constructor() {\n        console.log('Subject Class created');\n    }\n\n    attach(observer) {\n        this.observers.push(observer);\n        console.log('Subject.attach invoked');\n    }\n\n    dettach(observer) {\n        console.log('Subject.dettach invoked');\n        for (var i in this.observers) {\n            if (this.observers[i] === observer) {\n                this.observers.splice(i, 1);\n            }\n        }\n    }\n\n    notify() {\n        console.log('Subject.notify invoked');\n        for (var i in this.observers) {\n            this.observers[i].update(this);\n        }\n    }\n}\n\nclass ConcreteSubject extends Subject {\n    constructor() {\n        super();\n        this.subjectState = null;\n        this.observers = [];\n        console.log('ConcreteSubject Class created');\n    }\n\n    getState() {\n        console.log('ConcreteSubject.getState invoked');\n        return this.subjectState;\n    }\n\n    setState(state) {\n        console.log('ConcreteSubject.setState invoked');\n        this.subjectState = state;\n        this.notify();\n    }\n}\n\nclass Observer {\n    constructor() {\n        console.log('Observer Class created');\n    }\n\n    update() {\n        console.log('Observer.update invoked');\n    }\n}\n\nclass ConcreteObserver extends Observer {\n    constructor() {\n        super();\n        this.observerState = '';\n        console.log('ConcreteObserver Class created');\n    }\n\n    update(Subject) {\n        console.log('ConcreteObserver.update invoked');\n        this.observerState = Subject.getState();\n        console.log('Observer new state: ' + this.observerState);\n    }\n}\n\nvar observer1 = new ConcreteObserver();\nvar observer2 = new ConcreteObserver();\nvar subject = new ConcreteSubject();\nsubject.attach(observer1);\nsubject.attach(observer2);\nsubject.setState('state 1');\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace ObserverPattern {\n    export class Subject {\n        private observers: Observer[] = [];\n\n        public register(observer: Observer): void {\n            console.log(observer, \"is pushed!\");\n            this.observers.push(observer);\n        }\n\n        public unregister(observer: Observer): void {\n            var n: number = this.observers.indexOf(observer);\n            console.log(observer, \"is removed\");\n            this.observers.splice(n, 1);\n        }\n\n        public notify(): void {\n            console.log(\"notify all the observers\", this.observers);\n            var i: number\n              , max: number;\n\n            for (i = 0, max = this.observers.length; i < max; i += 1) {\n                this.observers[i].notify();\n            }\n        }\n    }\n\n    export class ConcreteSubject extends Subject {\n        private subjectState: number;\n\n        get SubjectState(): number {\n            return this.subjectState;\n        }\n\n        set SubjectState(subjectState: number) {\n            this.subjectState = subjectState;\n        }\n    }\n\n    export class Observer {\n        public notify(): void {\n            throw new Error(\"Abstract Method!\");\n        }\n    }\n\n    export class ConcreteObserver extends Observer {\n        private name: string;\n        private state: number;\n        private subject: ConcreteSubject;\n\n        constructor (subject: ConcreteSubject, name: string) {\n            super();\n            console.log(\"ConcreteObserver\", name, \"is created!\");\n            this.subject = subject;\n            this.name = name;\n        }\n\n        public notify(): void {\n            console.log(\"ConcreteObserver's notify method\");\n            console.log(this.name, this.state);\n            this.state = this.subject.SubjectState;\n        }\n\n        get Subject(): ConcreteSubject {\n            return this.subject;\n        }\n\n        set Subject(subject: ConcreteSubject) {\n            this.subject = subject;\n        }\n    }\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Observer","published":1,"updated":"2017-07-08T07:06:22.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4v0315m000x2tmwdauuzn7o","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"观察者模式的定义\"><a href=\"#观察者模式的定义\" class=\"headerlink\" title=\"观察者模式的定义\"></a>观察者模式的定义</h3><ul>\n<li>观察者模式定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。</li>\n<li>观察者模式又叫做发布-订阅模式、模型-视图模式、源-监听器模式或从属者模式。</li>\n<li>观察者模式是一种对象行为型模式。</li>\n</ul>\n<h3 id=\"观察者模式包含四个角色：\"><a href=\"#观察者模式包含四个角色：\" class=\"headerlink\" title=\"观察者模式包含四个角色：\"></a>观察者模式包含四个角色：</h3><ul>\n<li>Subject-目标又称为主题，它是指被观察的对象；</li>\n<li>ConcreteSubject-具体目标是目标类的子类，通常它包含有经常发生改变的数据，当它的状态发生改变时，向它的各个观察者发出通知；</li>\n<li>Observer-观察者将对观察目标的改变做出反应；</li>\n<li>ConcreteObserver-在具体观察者中维护一个指向具体目标对象的引用，它存储具体观察者的有关状态，这些状态需要和具体目标的状态保持一致。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Subject Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    attach(observer) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.observers.push(observer);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Subject.attach invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    dettach(observer) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Subject.dettach invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.observers) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.observers[i] === observer) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.observers.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    notify() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Subject.notify invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.observers) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.observers[i].update(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteSubject</span> <span class=\"keyword\">extends</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.subjectState = <span class=\"literal\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.observers = [];</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteSubject Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    getState() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteSubject.getState invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.subjectState;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setState(state) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteSubject.setState invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.subjectState = state;</div><div class=\"line\">        <span class=\"keyword\">this</span>.notify();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Observer Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    update() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Observer.update invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.observerState = <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteObserver Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    update(Subject) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteObserver.update invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.observerState = Subject.getState();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Observer new state: '</span> + <span class=\"keyword\">this</span>.observerState);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> observer1 = <span class=\"keyword\">new</span> ConcreteObserver();</div><div class=\"line\"><span class=\"keyword\">var</span> observer2 = <span class=\"keyword\">new</span> ConcreteObserver();</div><div class=\"line\"><span class=\"keyword\">var</span> subject = <span class=\"keyword\">new</span> ConcreteSubject();</div><div class=\"line\">subject.attach(observer1);</div><div class=\"line\">subject.attach(observer2);</div><div class=\"line\">subject.setState(<span class=\"string\">'state 1'</span>);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> ObserverPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Subject &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> observers: Observer[] = [];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> register(observer: Observer): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(observer, <span class=\"string\">\"is pushed!\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.observers.push(observer);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> unregister(observer: Observer): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> n: <span class=\"built_in\">number</span> = <span class=\"keyword\">this</span>.observers.indexOf(observer);</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(observer, <span class=\"string\">\"is removed\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.observers.splice(n, <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> notify(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"notify all the observers\"</span>, <span class=\"keyword\">this</span>.observers);</div><div class=\"line\">            <span class=\"keyword\">var</span> i: <span class=\"built_in\">number</span></div><div class=\"line\">              , max: <span class=\"built_in\">number</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, max = <span class=\"keyword\">this</span>.observers.length; i &lt; max; i += <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.observers[i].notify();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteSubject <span class=\"keyword\">extends</span> Subject &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> subjectState: <span class=\"built_in\">number</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">get</span> SubjectState(): <span class=\"built_in\">number</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.subjectState;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">set</span> SubjectState(subjectState: <span class=\"built_in\">number</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.subjectState = subjectState;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Observer &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> notify(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract Method!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteObserver <span class=\"keyword\">extends</span> Observer &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> name: <span class=\"built_in\">string</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> state: <span class=\"built_in\">number</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> subject: ConcreteSubject;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span> (<span class=\"params\">subject: ConcreteSubject, name: <span class=\"built_in\">string</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>();</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcreteObserver\"</span>, name, <span class=\"string\">\"is created!\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.subject = subject;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> notify(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcreteObserver's notify method\"</span>);</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name, <span class=\"keyword\">this</span>.state);</div><div class=\"line\">            <span class=\"keyword\">this</span>.state = <span class=\"keyword\">this</span>.subject.SubjectState;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">get</span> Subject(): ConcreteSubject &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.subject;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">set</span> Subject(subject: ConcreteSubject) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.subject = subject;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"观察者模式的定义\"><a href=\"#观察者模式的定义\" class=\"headerlink\" title=\"观察者模式的定义\"></a>观察者模式的定义</h3><ul>\n<li>观察者模式定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。</li>\n<li>观察者模式又叫做发布-订阅模式、模型-视图模式、源-监听器模式或从属者模式。</li>\n<li>观察者模式是一种对象行为型模式。</li>\n</ul>\n<h3 id=\"观察者模式包含四个角色：\"><a href=\"#观察者模式包含四个角色：\" class=\"headerlink\" title=\"观察者模式包含四个角色：\"></a>观察者模式包含四个角色：</h3><ul>\n<li>Subject-目标又称为主题，它是指被观察的对象；</li>\n<li>ConcreteSubject-具体目标是目标类的子类，通常它包含有经常发生改变的数据，当它的状态发生改变时，向它的各个观察者发出通知；</li>\n<li>Observer-观察者将对观察目标的改变做出反应；</li>\n<li>ConcreteObserver-在具体观察者中维护一个指向具体目标对象的引用，它存储具体观察者的有关状态，这些状态需要和具体目标的状态保持一致。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Subject Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    attach(observer) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.observers.push(observer);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Subject.attach invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    dettach(observer) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Subject.dettach invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.observers) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.observers[i] === observer) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.observers.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    notify() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Subject.notify invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.observers) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.observers[i].update(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteSubject</span> <span class=\"keyword\">extends</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.subjectState = <span class=\"literal\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.observers = [];</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteSubject Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    getState() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteSubject.getState invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.subjectState;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setState(state) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteSubject.setState invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.subjectState = state;</div><div class=\"line\">        <span class=\"keyword\">this</span>.notify();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Observer Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    update() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Observer.update invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.observerState = <span class=\"string\">''</span>;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteObserver Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    update(Subject) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteObserver.update invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.observerState = Subject.getState();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Observer new state: '</span> + <span class=\"keyword\">this</span>.observerState);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> observer1 = <span class=\"keyword\">new</span> ConcreteObserver();</div><div class=\"line\"><span class=\"keyword\">var</span> observer2 = <span class=\"keyword\">new</span> ConcreteObserver();</div><div class=\"line\"><span class=\"keyword\">var</span> subject = <span class=\"keyword\">new</span> ConcreteSubject();</div><div class=\"line\">subject.attach(observer1);</div><div class=\"line\">subject.attach(observer2);</div><div class=\"line\">subject.setState(<span class=\"string\">'state 1'</span>);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> ObserverPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Subject &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> observers: Observer[] = [];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> register(observer: Observer): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(observer, <span class=\"string\">\"is pushed!\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.observers.push(observer);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> unregister(observer: Observer): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> n: <span class=\"built_in\">number</span> = <span class=\"keyword\">this</span>.observers.indexOf(observer);</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(observer, <span class=\"string\">\"is removed\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.observers.splice(n, <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> notify(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"notify all the observers\"</span>, <span class=\"keyword\">this</span>.observers);</div><div class=\"line\">            <span class=\"keyword\">var</span> i: <span class=\"built_in\">number</span></div><div class=\"line\">              , max: <span class=\"built_in\">number</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, max = <span class=\"keyword\">this</span>.observers.length; i &lt; max; i += <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.observers[i].notify();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteSubject <span class=\"keyword\">extends</span> Subject &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> subjectState: <span class=\"built_in\">number</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">get</span> SubjectState(): <span class=\"built_in\">number</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.subjectState;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">set</span> SubjectState(subjectState: <span class=\"built_in\">number</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.subjectState = subjectState;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Observer &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> notify(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract Method!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteObserver <span class=\"keyword\">extends</span> Observer &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> name: <span class=\"built_in\">string</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> state: <span class=\"built_in\">number</span>;</div><div class=\"line\">        <span class=\"keyword\">private</span> subject: ConcreteSubject;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span> (<span class=\"params\">subject: ConcreteSubject, name: <span class=\"built_in\">string</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>();</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcreteObserver\"</span>, name, <span class=\"string\">\"is created!\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.subject = subject;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> notify(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcreteObserver's notify method\"</span>);</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name, <span class=\"keyword\">this</span>.state);</div><div class=\"line\">            <span class=\"keyword\">this</span>.state = <span class=\"keyword\">this</span>.subject.SubjectState;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">get</span> Subject(): ConcreteSubject &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.subject;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">set</span> Subject(subject: ConcreteSubject) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.subject = subject;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"代理模式(Proxy)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 代理模式的定义\n- 代理模式(Proxy Pattern) ：给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英 文叫做Proxy或Surrogate，它是一种对象结构型模式。\n\n### 代理模式包含三个角色：\nSubject: 抽象主题角色\nProxy: 代理主题角色\nRealSubject: 真实主题角色\n\n---\n\n### ES6实现\n``` js\nclass Subject {\n    constructor() {\n        console.log('Subject Class created');\n    }\n\n    request() {\n        console.log('Subject.request invoked');\n    }\n}\n\nclass RealSubject extends Subject {\n    constructor() {\n        super()\n        console.log('RealSubject Class created');\n    }\n\n    request() {\n        console.log('RealSubject.request invoked');\n    }\n}\n\nclass Proxy extends Subject {\n    constructor() {\n        super()\n        console.log('Proxy Class created');\n    }\n\n    request() {\n        this.realSubject = new RealSubject();\n        this.realSubject.request();\n    }\n}\n\nvar proxy = new Proxy()\nproxy.request()\n\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace ProxyPattern {\n    export interface Subject {\n        doAction(): void;\n    }\n\n    export class Proxy implements Subject {\n        private realSubject: RealSubject;\n        private s: string;\n\n        constructor(s: string) {\n            this.s = s;\n        }\n\n        public doAction(): void {\n            console.log(\"`doAction` of Proxy(\", this.s, \")\");\n            if (this.realSubject === null || this.realSubject === undefined) {\n                console.log(\"creating a new RealSubject.\");\n                this.realSubject = new RealSubject(this.s);\n            }\n            this.realSubject.doAction();\n        }\n    }\n\n    export class RealSubject implements Subject {\n        private s: string;\n\n        constructor(s: string) {\n            this.s = s;\n        }\n        public doAction(): void {\n            console.log(\"`doAction` of RealSubject\", this.s, \"is being called!\");\n        }\n    }\n}\n\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Proxy.md","raw":"---\ntitle: 代理模式(Proxy)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Structural Patterns]\ntags: [javasctipt, 代理模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 代理模式的定义\n- 代理模式(Proxy Pattern) ：给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英 文叫做Proxy或Surrogate，它是一种对象结构型模式。\n\n### 代理模式包含三个角色：\nSubject: 抽象主题角色\nProxy: 代理主题角色\nRealSubject: 真实主题角色\n\n---\n\n### ES6实现\n``` js\nclass Subject {\n    constructor() {\n        console.log('Subject Class created');\n    }\n\n    request() {\n        console.log('Subject.request invoked');\n    }\n}\n\nclass RealSubject extends Subject {\n    constructor() {\n        super()\n        console.log('RealSubject Class created');\n    }\n\n    request() {\n        console.log('RealSubject.request invoked');\n    }\n}\n\nclass Proxy extends Subject {\n    constructor() {\n        super()\n        console.log('Proxy Class created');\n    }\n\n    request() {\n        this.realSubject = new RealSubject();\n        this.realSubject.request();\n    }\n}\n\nvar proxy = new Proxy()\nproxy.request()\n\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace ProxyPattern {\n    export interface Subject {\n        doAction(): void;\n    }\n\n    export class Proxy implements Subject {\n        private realSubject: RealSubject;\n        private s: string;\n\n        constructor(s: string) {\n            this.s = s;\n        }\n\n        public doAction(): void {\n            console.log(\"`doAction` of Proxy(\", this.s, \")\");\n            if (this.realSubject === null || this.realSubject === undefined) {\n                console.log(\"creating a new RealSubject.\");\n                this.realSubject = new RealSubject(this.s);\n            }\n            this.realSubject.doAction();\n        }\n    }\n\n    export class RealSubject implements Subject {\n        private s: string;\n\n        constructor(s: string) {\n            this.s = s;\n        }\n        public doAction(): void {\n            console.log(\"`doAction` of RealSubject\", this.s, \"is being called!\");\n        }\n    }\n}\n\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Proxy","published":1,"updated":"2017-07-08T07:06:30.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4v0315m000z2tmwi8ukckjx","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"代理模式的定义\"><a href=\"#代理模式的定义\" class=\"headerlink\" title=\"代理模式的定义\"></a>代理模式的定义</h3><ul>\n<li>代理模式(Proxy Pattern) ：给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英 文叫做Proxy或Surrogate，它是一种对象结构型模式。</li>\n</ul>\n<h3 id=\"代理模式包含三个角色：\"><a href=\"#代理模式包含三个角色：\" class=\"headerlink\" title=\"代理模式包含三个角色：\"></a>代理模式包含三个角色：</h3><p>Subject: 抽象主题角色<br>Proxy: 代理主题角色<br>RealSubject: 真实主题角色</p>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Subject Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    request() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Subject.request invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealSubject</span> <span class=\"keyword\">extends</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'RealSubject Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    request() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'RealSubject.request invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">extends</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Proxy Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    request() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.realSubject = <span class=\"keyword\">new</span> RealSubject();</div><div class=\"line\">        <span class=\"keyword\">this</span>.realSubject.request();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>()</div><div class=\"line\">proxy.request()</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> ProxyPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Subject &#123;</div><div class=\"line\">        doAction(): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Proxy <span class=\"keyword\">implements</span> Subject &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> realSubject: RealSubject;</div><div class=\"line\">        <span class=\"keyword\">private</span> s: <span class=\"built_in\">string</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">s: <span class=\"built_in\">string</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> doAction(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`doAction` of Proxy(\"</span>, <span class=\"keyword\">this</span>.s, <span class=\"string\">\")\"</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.realSubject === <span class=\"literal\">null</span> || <span class=\"keyword\">this</span>.realSubject === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"creating a new RealSubject.\"</span>);</div><div class=\"line\">                <span class=\"keyword\">this</span>.realSubject = <span class=\"keyword\">new</span> RealSubject(<span class=\"keyword\">this</span>.s);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">this</span>.realSubject.doAction();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> RealSubject <span class=\"keyword\">implements</span> Subject &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> s: <span class=\"built_in\">string</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">s: <span class=\"built_in\">string</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">public</span> doAction(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`doAction` of RealSubject\"</span>, <span class=\"keyword\">this</span>.s, <span class=\"string\">\"is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"代理模式的定义\"><a href=\"#代理模式的定义\" class=\"headerlink\" title=\"代理模式的定义\"></a>代理模式的定义</h3><ul>\n<li>代理模式(Proxy Pattern) ：给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英 文叫做Proxy或Surrogate，它是一种对象结构型模式。</li>\n</ul>\n<h3 id=\"代理模式包含三个角色：\"><a href=\"#代理模式包含三个角色：\" class=\"headerlink\" title=\"代理模式包含三个角色：\"></a>代理模式包含三个角色：</h3><p>Subject: 抽象主题角色<br>Proxy: 代理主题角色<br>RealSubject: 真实主题角色</p>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Subject Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    request() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Subject.request invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealSubject</span> <span class=\"keyword\">extends</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'RealSubject Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    request() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'RealSubject.request invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">extends</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>()</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Proxy Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    request() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.realSubject = <span class=\"keyword\">new</span> RealSubject();</div><div class=\"line\">        <span class=\"keyword\">this</span>.realSubject.request();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>()</div><div class=\"line\">proxy.request()</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> ProxyPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Subject &#123;</div><div class=\"line\">        doAction(): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Proxy <span class=\"keyword\">implements</span> Subject &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> realSubject: RealSubject;</div><div class=\"line\">        <span class=\"keyword\">private</span> s: <span class=\"built_in\">string</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">s: <span class=\"built_in\">string</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> doAction(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`doAction` of Proxy(\"</span>, <span class=\"keyword\">this</span>.s, <span class=\"string\">\")\"</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.realSubject === <span class=\"literal\">null</span> || <span class=\"keyword\">this</span>.realSubject === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"creating a new RealSubject.\"</span>);</div><div class=\"line\">                <span class=\"keyword\">this</span>.realSubject = <span class=\"keyword\">new</span> RealSubject(<span class=\"keyword\">this</span>.s);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">this</span>.realSubject.doAction();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> RealSubject <span class=\"keyword\">implements</span> Subject &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> s: <span class=\"built_in\">string</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">s: <span class=\"built_in\">string</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.s = s;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">public</span> doAction(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`doAction` of RealSubject\"</span>, <span class=\"keyword\">this</span>.s, <span class=\"string\">\"is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"单例模式(Singleton)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 单例模式的定义\n- 某个类只能有一个实例；\n- 它必须自行创建这个实例；\n- 它必须自行向整个系统提供这个实例。\n\n### 单例模式的实现过程中，需要注意如下三点：\n- 单例类的构造函数为私有；\n- 提供一个自身的静态私有成员变量；\n- 提供一个公有的静态工厂方法。\n\n---\n\n### ES6实现\n``` js\nclass Singleton {\n    constructor(data) {\n        if (Singleton.prototype.Instance === undefined) {\n            this.data = data;\n            Singleton.prototype.Instance = this;\n        }\n        return Singleton.prototype.Instance;\n    }\n}\n\nlet ob1 = new Singleton.getInstance();\nlet ob2 = new Singleton(\"two\");\n\nconsole.log(ob1 === ob2);\n```\n---\n\n### Typescript实现\n``` ts\nclass Singleton {\n  private static instance: Singleton;\n\n  constructor() {}\n\n  static get Instance() {\n      if (this.instance === null || this.instance === undefined) {\n          this.instance = new Singleton();\n      }\n      return this.instance;\n  }\n}\nlet ob1 = new Singleton(\"one\");\nlet ob2 = new Singleton(\"two\");\n\nconsole.log(ob1 === ob2);\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Singleton.md","raw":"---\ntitle: 单例模式(Singleton)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Creational Patterns]\ntags: [javasctipt, 单例模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 单例模式的定义\n- 某个类只能有一个实例；\n- 它必须自行创建这个实例；\n- 它必须自行向整个系统提供这个实例。\n\n### 单例模式的实现过程中，需要注意如下三点：\n- 单例类的构造函数为私有；\n- 提供一个自身的静态私有成员变量；\n- 提供一个公有的静态工厂方法。\n\n---\n\n### ES6实现\n``` js\nclass Singleton {\n    constructor(data) {\n        if (Singleton.prototype.Instance === undefined) {\n            this.data = data;\n            Singleton.prototype.Instance = this;\n        }\n        return Singleton.prototype.Instance;\n    }\n}\n\nlet ob1 = new Singleton.getInstance();\nlet ob2 = new Singleton(\"two\");\n\nconsole.log(ob1 === ob2);\n```\n---\n\n### Typescript实现\n``` ts\nclass Singleton {\n  private static instance: Singleton;\n\n  constructor() {}\n\n  static get Instance() {\n      if (this.instance === null || this.instance === undefined) {\n          this.instance = new Singleton();\n      }\n      return this.instance;\n  }\n}\nlet ob1 = new Singleton(\"one\");\nlet ob2 = new Singleton(\"two\");\n\nconsole.log(ob1 === ob2);\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Singleton","published":1,"updated":"2017-07-08T07:06:39.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4v0315q00132tmwwh6ub878","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"单例模式的定义\"><a href=\"#单例模式的定义\" class=\"headerlink\" title=\"单例模式的定义\"></a>单例模式的定义</h3><ul>\n<li>某个类只能有一个实例；</li>\n<li>它必须自行创建这个实例；</li>\n<li>它必须自行向整个系统提供这个实例。</li>\n</ul>\n<h3 id=\"单例模式的实现过程中，需要注意如下三点：\"><a href=\"#单例模式的实现过程中，需要注意如下三点：\" class=\"headerlink\" title=\"单例模式的实现过程中，需要注意如下三点：\"></a>单例模式的实现过程中，需要注意如下三点：</h3><ul>\n<li>单例类的构造函数为私有；</li>\n<li>提供一个自身的静态私有成员变量；</li>\n<li>提供一个公有的静态工厂方法。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(data) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Singleton.prototype.Instance === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.data = data;</div><div class=\"line\">            Singleton.prototype.Instance = <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> Singleton.prototype.Instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> ob1 = <span class=\"keyword\">new</span> Singleton.getInstance();</div><div class=\"line\"><span class=\"keyword\">let</span> ob2 = <span class=\"keyword\">new</span> Singleton(<span class=\"string\">\"two\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(ob1 === ob2);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Singleton &#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> instance: Singleton;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">get</span> Instance() &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.instance === <span class=\"literal\">null</span> || <span class=\"keyword\">this</span>.instance === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">this</span>.instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.instance;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> ob1 = <span class=\"keyword\">new</span> Singleton(<span class=\"string\">\"one\"</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> ob2 = <span class=\"keyword\">new</span> Singleton(<span class=\"string\">\"two\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(ob1 === ob2);</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><p><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></p>\n</li>\n<li><p><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></p>\n</li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"单例模式的定义\"><a href=\"#单例模式的定义\" class=\"headerlink\" title=\"单例模式的定义\"></a>单例模式的定义</h3><ul>\n<li>某个类只能有一个实例；</li>\n<li>它必须自行创建这个实例；</li>\n<li>它必须自行向整个系统提供这个实例。</li>\n</ul>\n<h3 id=\"单例模式的实现过程中，需要注意如下三点：\"><a href=\"#单例模式的实现过程中，需要注意如下三点：\" class=\"headerlink\" title=\"单例模式的实现过程中，需要注意如下三点：\"></a>单例模式的实现过程中，需要注意如下三点：</h3><ul>\n<li>单例类的构造函数为私有；</li>\n<li>提供一个自身的静态私有成员变量；</li>\n<li>提供一个公有的静态工厂方法。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(data) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Singleton.prototype.Instance === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.data = data;</div><div class=\"line\">            Singleton.prototype.Instance = <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> Singleton.prototype.Instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> ob1 = <span class=\"keyword\">new</span> Singleton.getInstance();</div><div class=\"line\"><span class=\"keyword\">let</span> ob2 = <span class=\"keyword\">new</span> Singleton(<span class=\"string\">\"two\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(ob1 === ob2);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Singleton &#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> instance: Singleton;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">get</span> Instance() &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.instance === <span class=\"literal\">null</span> || <span class=\"keyword\">this</span>.instance === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">this</span>.instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.instance;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> ob1 = <span class=\"keyword\">new</span> Singleton(<span class=\"string\">\"one\"</span>);</div><div class=\"line\"><span class=\"keyword\">let</span> ob2 = <span class=\"keyword\">new</span> Singleton(<span class=\"string\">\"two\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(ob1 === ob2);</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><p><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></p>\n</li>\n<li><p><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></p>\n</li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"简单工厂模式(Factory)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 简单工厂模式的定义\n- 简单工厂模式：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。\n\n### 简单工厂模式包含三个角色：\n- Factory-工厂角色负责实现创建所有实例的内部逻辑；\n- Product-抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口；\n- ConcreteProduct-具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。\n\n---\n\n### ES6实现\n``` js\nclass Product {\n    constructor() {\n        console.log('Product Class created');\n    }\n}\n\nclass ConcreteProduct extends Product {\n    constructor() {\n        super();\n        console.log('ConcreteProduct Class created');\n    }\n}\n\nclass Creator {\n    constructor() {\n        console.log('Creator Class created');\n    }\n\n    factoryMethod() {\n        console.log('Creator.factoryMethod created');\n    }\n\n    anOperation() {\n        console.log('Creator.anOperation created');\n        this.product = this.factoryMethod();\n        console.log(this.product instanceof ConcreteProduct);\n    }\n}\n\nclass ConcreteCreator extends Creator {\n\n    constructor() {\n        super();\n        console.log('ConcreteCreator Class created');\n    }\n\n    factoryMethod() {\n        return new ConcreteProduct();\n    }\n}\n\nvar factory = new ConcreteCreator();\nfactory.anOperation();\n```\n---\n\n### Typescript实现\n``` ts\ninterface AbstractProduct {\n    method(param?: any) : void;\n}\n\nclass ConcreteProductA implements AbstractProduct {\n    method = (param?: any) => {\n        return \"Method of ConcreteProductA\";\n    }\n}\n\nclass ConcreteProductB implements AbstractProduct {\n    method = (param?: any) => {\n        return \"Method of ConcreteProductB\";\n    }\n}\n\nclass ProductFactory {\n    public static createProduct(type: string) : AbstractProduct {\n        if (type === \"A\") {\n            return new ConcreteProductA();\n        } else if (type === \"B\") {\n            return new ConcreteProductB();\n        }\n\n        return null;\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/SimpleFactory.md","raw":"---\ntitle: 简单工厂模式(Factory)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Creational Patterns]\ntags: [javasctipt, 简单工厂模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 简单工厂模式的定义\n- 简单工厂模式：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。\n\n### 简单工厂模式包含三个角色：\n- Factory-工厂角色负责实现创建所有实例的内部逻辑；\n- Product-抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口；\n- ConcreteProduct-具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。\n\n---\n\n### ES6实现\n``` js\nclass Product {\n    constructor() {\n        console.log('Product Class created');\n    }\n}\n\nclass ConcreteProduct extends Product {\n    constructor() {\n        super();\n        console.log('ConcreteProduct Class created');\n    }\n}\n\nclass Creator {\n    constructor() {\n        console.log('Creator Class created');\n    }\n\n    factoryMethod() {\n        console.log('Creator.factoryMethod created');\n    }\n\n    anOperation() {\n        console.log('Creator.anOperation created');\n        this.product = this.factoryMethod();\n        console.log(this.product instanceof ConcreteProduct);\n    }\n}\n\nclass ConcreteCreator extends Creator {\n\n    constructor() {\n        super();\n        console.log('ConcreteCreator Class created');\n    }\n\n    factoryMethod() {\n        return new ConcreteProduct();\n    }\n}\n\nvar factory = new ConcreteCreator();\nfactory.anOperation();\n```\n---\n\n### Typescript实现\n``` ts\ninterface AbstractProduct {\n    method(param?: any) : void;\n}\n\nclass ConcreteProductA implements AbstractProduct {\n    method = (param?: any) => {\n        return \"Method of ConcreteProductA\";\n    }\n}\n\nclass ConcreteProductB implements AbstractProduct {\n    method = (param?: any) => {\n        return \"Method of ConcreteProductB\";\n    }\n}\n\nclass ProductFactory {\n    public static createProduct(type: string) : AbstractProduct {\n        if (type === \"A\") {\n            return new ConcreteProductA();\n        } else if (type === \"B\") {\n            return new ConcreteProductB();\n        }\n\n        return null;\n    }\n}\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"SimpleFactory","published":1,"updated":"2017-07-08T07:06:35.187Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4v0315t00162tmwjhvy28mt","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"简单工厂模式的定义\"><a href=\"#简单工厂模式的定义\" class=\"headerlink\" title=\"简单工厂模式的定义\"></a>简单工厂模式的定义</h3><ul>\n<li>简单工厂模式：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。</li>\n</ul>\n<h3 id=\"简单工厂模式包含三个角色：\"><a href=\"#简单工厂模式包含三个角色：\" class=\"headerlink\" title=\"简单工厂模式包含三个角色：\"></a>简单工厂模式包含三个角色：</h3><ul>\n<li>Factory-工厂角色负责实现创建所有实例的内部逻辑；</li>\n<li>Product-抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口；</li>\n<li>ConcreteProduct-具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Product Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteProduct</span> <span class=\"keyword\">extends</span> <span class=\"title\">Product</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteProduct Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Creator Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    factoryMethod() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Creator.factoryMethod created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    anOperation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Creator.anOperation created'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.product = <span class=\"keyword\">this</span>.factoryMethod();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.product <span class=\"keyword\">instanceof</span> ConcreteProduct);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteCreator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Creator</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteCreator Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    factoryMethod() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteProduct();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConcreteCreator();</div><div class=\"line\">factory.anOperation();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> AbstractProduct &#123;</div><div class=\"line\">    method(param?: <span class=\"built_in\">any</span>) : <span class=\"built_in\">void</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> ConcreteProductA <span class=\"keyword\">implements</span> AbstractProduct &#123;</div><div class=\"line\">    method = <span class=\"function\">(<span class=\"params\">param?: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Method of ConcreteProductA\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> ConcreteProductB <span class=\"keyword\">implements</span> AbstractProduct &#123;</div><div class=\"line\">    method = <span class=\"function\">(<span class=\"params\">param?: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Method of ConcreteProductB\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> ProductFactory &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> createProduct(<span class=\"keyword\">type</span>: <span class=\"built_in\">string</span>) : AbstractProduct &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">type</span> === <span class=\"string\">\"A\"</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteProductA();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">type</span> === <span class=\"string\">\"B\"</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteProductB();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><p><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></p>\n</li>\n<li><p><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></p>\n</li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"简单工厂模式的定义\"><a href=\"#简单工厂模式的定义\" class=\"headerlink\" title=\"简单工厂模式的定义\"></a>简单工厂模式的定义</h3><ul>\n<li>简单工厂模式：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。</li>\n</ul>\n<h3 id=\"简单工厂模式包含三个角色：\"><a href=\"#简单工厂模式包含三个角色：\" class=\"headerlink\" title=\"简单工厂模式包含三个角色：\"></a>简单工厂模式包含三个角色：</h3><ul>\n<li>Factory-工厂角色负责实现创建所有实例的内部逻辑；</li>\n<li>Product-抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口；</li>\n<li>ConcreteProduct-具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Product Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteProduct</span> <span class=\"keyword\">extends</span> <span class=\"title\">Product</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteProduct Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Creator</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Creator Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    factoryMethod() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Creator.factoryMethod created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    anOperation() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Creator.anOperation created'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.product = <span class=\"keyword\">this</span>.factoryMethod();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.product <span class=\"keyword\">instanceof</span> ConcreteProduct);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteCreator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Creator</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteCreator Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    factoryMethod() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteProduct();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> factory = <span class=\"keyword\">new</span> ConcreteCreator();</div><div class=\"line\">factory.anOperation();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> AbstractProduct &#123;</div><div class=\"line\">    method(param?: <span class=\"built_in\">any</span>) : <span class=\"built_in\">void</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> ConcreteProductA <span class=\"keyword\">implements</span> AbstractProduct &#123;</div><div class=\"line\">    method = <span class=\"function\">(<span class=\"params\">param?: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Method of ConcreteProductA\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> ConcreteProductB <span class=\"keyword\">implements</span> AbstractProduct &#123;</div><div class=\"line\">    method = <span class=\"function\">(<span class=\"params\">param?: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Method of ConcreteProductB\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> ProductFactory &#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> createProduct(<span class=\"keyword\">type</span>: <span class=\"built_in\">string</span>) : AbstractProduct &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">type</span> === <span class=\"string\">\"A\"</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteProductA();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">type</span> === <span class=\"string\">\"B\"</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ConcreteProductB();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><p><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></p>\n</li>\n<li><p><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></p>\n</li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"状态模式(State)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 状态模式的定义\n- 状态模式允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。\n- 其别名为状态对象，状态模式是一种对象行为型模式。\n\n### 状态模式包含二个角色：\n- Context-环境类又称为上下文类，它是拥有状态的对象，在环境类中维护一个抽象状态类State的实例，这个实例定义当前状态，在具体实现时，它是一个State子类的对象，可以定义初始状态；\n- State-抽象状态类用于定义一个接口以封装与环境类的一个特定状态相关的行为；\n- ConcreteState-具体状态类是抽象状态类的子类，每一个子类实现一个与环境类的一个状态相关的行为，每一个具体状态类对应环境的一个具体状态，不同的具体状态类其行为有所不同。\n---\n\n### ES6实现\n``` js\nclass Context {\n    constructor(state) {\n        console.log(\"Context Class created\");\n        switch (state) {\n            case \"A\":\n                this.state = new ConcreteStateA()\n                break\n            case \"B\":\n                this.state = new ConcreteStateB()\n                break\n            default:\n                this.state = new ConcreteStateA()\n        }\n    }\n\n    request() {\n        console.log('Context.request invoked');\n        this.state.handle(this);\n    }\n}\n\nclass State {\n    constructor() {\n        console.log(\"State Class created\");\n    }\n\n    handle() {\n        console.log('State.handle invoked');\n    }\n}\n\nclass ConcreteStateA extends State {\n    constructor() {\n        super();\n        console.log(\"ConcreteStateA Class created\");\n    }\n\n    handle(context) {\n        console.log('ConcreteStateA.handle invoked');\n    }\n}\n\nclass ConcreteStateB extends State {\n    constructor() {\n        super();\n        console.log(\"ConcreteStateB Class created\");\n    }\n\n    handle(context) {\n        console.log('ConcreteStateB.handle invoked');\n    }\n}\n\nlet context = new Context(\"A\")\ncontext.request()\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace StatePattern {\n  export interface State {\n      handle(context: Context): void;\n  }\n\n  export class ConcreteStateA implements State {\n      public handle(context: Context): void {\n          console.log(\"`handle` method of ConcreteStateA is being called!\");\n          context.State = new ConcreteStateB();\n      }\n  }\n\n  export class ConcreteStateB implements State {\n      public handle(context: Context): void {\n          console.log(\"`handle` method of ConcreteStateB is being called!\");\n          context.State = new ConcreteStateA();\n      }\n  }\n\n  export class Context {\n      private state: State;\n\n      constructor(state: State) {\n          this.state = state;\n      }\n\n      get State(): State {\n          return this.state;\n      }\n\n      set State(state: State) {\n          this.state = state;\n      }\n\n      public request(): void {\n          console.log(\"request is being called!\");\n          this.state.handle(this);\n      }\n    }\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/State.md","raw":"---\ntitle: 状态模式(State)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Behavioral Patterns]\ntags: [javasctipt, 状态模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 状态模式的定义\n- 状态模式允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。\n- 其别名为状态对象，状态模式是一种对象行为型模式。\n\n### 状态模式包含二个角色：\n- Context-环境类又称为上下文类，它是拥有状态的对象，在环境类中维护一个抽象状态类State的实例，这个实例定义当前状态，在具体实现时，它是一个State子类的对象，可以定义初始状态；\n- State-抽象状态类用于定义一个接口以封装与环境类的一个特定状态相关的行为；\n- ConcreteState-具体状态类是抽象状态类的子类，每一个子类实现一个与环境类的一个状态相关的行为，每一个具体状态类对应环境的一个具体状态，不同的具体状态类其行为有所不同。\n---\n\n### ES6实现\n``` js\nclass Context {\n    constructor(state) {\n        console.log(\"Context Class created\");\n        switch (state) {\n            case \"A\":\n                this.state = new ConcreteStateA()\n                break\n            case \"B\":\n                this.state = new ConcreteStateB()\n                break\n            default:\n                this.state = new ConcreteStateA()\n        }\n    }\n\n    request() {\n        console.log('Context.request invoked');\n        this.state.handle(this);\n    }\n}\n\nclass State {\n    constructor() {\n        console.log(\"State Class created\");\n    }\n\n    handle() {\n        console.log('State.handle invoked');\n    }\n}\n\nclass ConcreteStateA extends State {\n    constructor() {\n        super();\n        console.log(\"ConcreteStateA Class created\");\n    }\n\n    handle(context) {\n        console.log('ConcreteStateA.handle invoked');\n    }\n}\n\nclass ConcreteStateB extends State {\n    constructor() {\n        super();\n        console.log(\"ConcreteStateB Class created\");\n    }\n\n    handle(context) {\n        console.log('ConcreteStateB.handle invoked');\n    }\n}\n\nlet context = new Context(\"A\")\ncontext.request()\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace StatePattern {\n  export interface State {\n      handle(context: Context): void;\n  }\n\n  export class ConcreteStateA implements State {\n      public handle(context: Context): void {\n          console.log(\"`handle` method of ConcreteStateA is being called!\");\n          context.State = new ConcreteStateB();\n      }\n  }\n\n  export class ConcreteStateB implements State {\n      public handle(context: Context): void {\n          console.log(\"`handle` method of ConcreteStateB is being called!\");\n          context.State = new ConcreteStateA();\n      }\n  }\n\n  export class Context {\n      private state: State;\n\n      constructor(state: State) {\n          this.state = state;\n      }\n\n      get State(): State {\n          return this.state;\n      }\n\n      set State(state: State) {\n          this.state = state;\n      }\n\n      public request(): void {\n          console.log(\"request is being called!\");\n          this.state.handle(this);\n      }\n    }\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"State","published":1,"updated":"2017-07-08T07:29:06.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4v0315u001a2tmwj06rusxi","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"状态模式的定义\"><a href=\"#状态模式的定义\" class=\"headerlink\" title=\"状态模式的定义\"></a>状态模式的定义</h3><ul>\n<li>状态模式允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。</li>\n<li>其别名为状态对象，状态模式是一种对象行为型模式。</li>\n</ul>\n<h3 id=\"状态模式包含二个角色：\"><a href=\"#状态模式包含二个角色：\" class=\"headerlink\" title=\"状态模式包含二个角色：\"></a>状态模式包含二个角色：</h3><ul>\n<li>Context-环境类又称为上下文类，它是拥有状态的对象，在环境类中维护一个抽象状态类State的实例，这个实例定义当前状态，在具体实现时，它是一个State子类的对象，可以定义初始状态；</li>\n<li>State-抽象状态类用于定义一个接口以封装与环境类的一个特定状态相关的行为；</li>\n<li>ConcreteState-具体状态类是抽象状态类的子类，每一个子类实现一个与环境类的一个状态相关的行为，每一个具体状态类对应环境的一个具体状态，不同的具体状态类其行为有所不同。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(state) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Context Class created\"</span>);</div><div class=\"line\">        <span class=\"keyword\">switch</span> (state) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"A\"</span>:</div><div class=\"line\">                <span class=\"keyword\">this</span>.state = <span class=\"keyword\">new</span> ConcreteStateA()</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"B\"</span>:</div><div class=\"line\">                <span class=\"keyword\">this</span>.state = <span class=\"keyword\">new</span> ConcreteStateB()</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">this</span>.state = <span class=\"keyword\">new</span> ConcreteStateA()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    request() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context.request invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.state.handle(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">State</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"State Class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    handle() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'State.handle invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStateA</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcreteStateA Class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    handle(context) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteStateA.handle invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStateB</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcreteStateB Class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    handle(context) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteStateB.handle invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> context = <span class=\"keyword\">new</span> Context(<span class=\"string\">\"A\"</span>)</div><div class=\"line\">context.request()</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> StatePattern &#123;</div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> State &#123;</div><div class=\"line\">      handle(context: Context): <span class=\"built_in\">void</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteStateA <span class=\"keyword\">implements</span> State &#123;</div><div class=\"line\">      <span class=\"keyword\">public</span> handle(context: Context): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`handle` method of ConcreteStateA is being called!\"</span>);</div><div class=\"line\">          context.State = <span class=\"keyword\">new</span> ConcreteStateB();</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteStateB <span class=\"keyword\">implements</span> State &#123;</div><div class=\"line\">      <span class=\"keyword\">public</span> handle(context: Context): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`handle` method of ConcreteStateB is being called!\"</span>);</div><div class=\"line\">          context.State = <span class=\"keyword\">new</span> ConcreteStateA();</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Context &#123;</div><div class=\"line\">      <span class=\"keyword\">private</span> state: State;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">constructor</span>(<span class=\"params\">state: State</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">this</span>.state = state;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">get</span> State(): State &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.state;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">set</span> State(state: State) &#123;</div><div class=\"line\">          <span class=\"keyword\">this</span>.state = state;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">public</span> request(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">\"request is being called!\"</span>);</div><div class=\"line\">          <span class=\"keyword\">this</span>.state.handle(<span class=\"keyword\">this</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"状态模式的定义\"><a href=\"#状态模式的定义\" class=\"headerlink\" title=\"状态模式的定义\"></a>状态模式的定义</h3><ul>\n<li>状态模式允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。</li>\n<li>其别名为状态对象，状态模式是一种对象行为型模式。</li>\n</ul>\n<h3 id=\"状态模式包含二个角色：\"><a href=\"#状态模式包含二个角色：\" class=\"headerlink\" title=\"状态模式包含二个角色：\"></a>状态模式包含二个角色：</h3><ul>\n<li>Context-环境类又称为上下文类，它是拥有状态的对象，在环境类中维护一个抽象状态类State的实例，这个实例定义当前状态，在具体实现时，它是一个State子类的对象，可以定义初始状态；</li>\n<li>State-抽象状态类用于定义一个接口以封装与环境类的一个特定状态相关的行为；</li>\n<li>ConcreteState-具体状态类是抽象状态类的子类，每一个子类实现一个与环境类的一个状态相关的行为，每一个具体状态类对应环境的一个具体状态，不同的具体状态类其行为有所不同。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(state) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Context Class created\"</span>);</div><div class=\"line\">        <span class=\"keyword\">switch</span> (state) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"A\"</span>:</div><div class=\"line\">                <span class=\"keyword\">this</span>.state = <span class=\"keyword\">new</span> ConcreteStateA()</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"B\"</span>:</div><div class=\"line\">                <span class=\"keyword\">this</span>.state = <span class=\"keyword\">new</span> ConcreteStateB()</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">this</span>.state = <span class=\"keyword\">new</span> ConcreteStateA()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    request() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context.request invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.state.handle(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">State</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"State Class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    handle() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'State.handle invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStateA</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcreteStateA Class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    handle(context) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteStateA.handle invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStateB</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ConcreteStateB Class created\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    handle(context) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteStateB.handle invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> context = <span class=\"keyword\">new</span> Context(<span class=\"string\">\"A\"</span>)</div><div class=\"line\">context.request()</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> StatePattern &#123;</div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> State &#123;</div><div class=\"line\">      handle(context: Context): <span class=\"built_in\">void</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteStateA <span class=\"keyword\">implements</span> State &#123;</div><div class=\"line\">      <span class=\"keyword\">public</span> handle(context: Context): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`handle` method of ConcreteStateA is being called!\"</span>);</div><div class=\"line\">          context.State = <span class=\"keyword\">new</span> ConcreteStateB();</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteStateB <span class=\"keyword\">implements</span> State &#123;</div><div class=\"line\">      <span class=\"keyword\">public</span> handle(context: Context): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`handle` method of ConcreteStateB is being called!\"</span>);</div><div class=\"line\">          context.State = <span class=\"keyword\">new</span> ConcreteStateA();</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Context &#123;</div><div class=\"line\">      <span class=\"keyword\">private</span> state: State;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">constructor</span>(<span class=\"params\">state: State</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">this</span>.state = state;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">get</span> State(): State &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.state;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">set</span> State(state: State) &#123;</div><div class=\"line\">          <span class=\"keyword\">this</span>.state = state;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">public</span> request(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">\"request is being called!\"</span>);</div><div class=\"line\">          <span class=\"keyword\">this</span>.state.handle(<span class=\"keyword\">this</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"访问者模式(Visitor)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 访问者模式的定义\n- 表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。\n\n---\n\n### ES6实现\n``` js\nclass Visitor {\n    constructor() {\n        console.log('Visitor Class created!');\n    }\n\n    visitConcreteElementA(ConcreteElementA) {\n        console.log('Visitor.visitConcreteElementA invoked');\n    }\n\n    visitConcreteElementB(ConcreteElementB) {\n        console.log('Visitor.visitConcreteElementB invoked');\n    }\n}\n\nclass ConcreteVisitor1 extends Visitor {\n    constructor() {\n        super();\n        console.log('ConcreteVisitor1 Class created!');\n    }\n\n    visitConcreteElementA(ConcreteElementA) {\n        console.log('ConcreteVisitor1.visitConcreteElementA invoked');\n    }\n\n    visitConcreteElementB(ConcreteElementB) {\n        console.log('ConcreteVisitor1.visitConcreteElementB invoked');\n    }\n}\n\nclass ConcreteVisitor2 extends Visitor {\n    constructor() {\n        super();\n        console.log('ConcreteVisitor2 Class created!');\n    }\n\n    visitConcreteElementA(ConcreteElementA) {\n        console.log('ConcreteVisitor2.visitConcreteElementA invoked');\n    }\n\n    visitConcreteElementB(ConcreteElementB) {\n        console.log('ConcreteVisitor2.visitConcreteElementB invoked');\n    }\n}\n\nclass ObjectStructure {\n    constructor() {\n        console.log('ObjectStructure Class created!');\n    }\n}\n\nclass Element {\n    constructor() {\n        console.log('Element Class created!');\n    }\n\n    Accept(visitor) {\n        console.log('Element.visitConcreteElementB invoked');\n    }\n}\n\nclass ConcreteElementA extends Element {\n    constructor() {\n        super();\n        console.log('ConcreteElementA Class created!');\n    }\n\n    accept(visitor) {\n        console.log('ConcreteElementA.accept invoked');\n        visitor.visitConcreteElementA(this);\n    }\n\n    operationA() {\n        console.log('ConcreteElementA.operationA invoked');\n    }\n}\n\nclass ConcreteElementB extends Element {\n    constructor() {\n        super();\n        console.log('ConcreteElementB Class created!');\n    }\n\n    accept(visitor) {\n        console.log('ConcreteElementB.accept invoked');\n        visitor.visitConcreteElementB(this);\n    }\n\n    operationB() {\n        console.log('ConcreteElementB.operationB invoked');\n    }\n}\n\nlet visitor1 = new ConcreteVisitor1();\nlet visitor2 = new ConcreteVisitor2();\nlet elementA = new ConcreteElementA();\nlet elementB = new ConcreteElementB();\nelementA.accept(visitor1);\nelementB.accept(visitor2);\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace VisitorPattern {\n    export interface Visitor {\n        visitConcreteElement1(concreteElement1: ConcreteElement1): void;\n        visitConcreteElement2(concreteElement2: ConcreteElement2): void;\n    }\n\n    export class ConcreteVisitor1 implements Visitor {\n        public visitConcreteElement1(concreteElement1: ConcreteElement1): void {\n            console.log(\"`visitConcreteElement1` of ConcreteVisitor1 is being called!\");\n        }\n\n        public visitConcreteElement2(concreteElement2: ConcreteElement2): void {\n            console.log(\"`visitConcreteElement2` of ConcreteVisitor1 is being called!\");\n        }\n    }\n\n    export class ConcreteVisitor2 implements Visitor {\n        public visitConcreteElement1(concreteElement1: ConcreteElement1): void {\n            console.log(\"`visitConcreteElement1` of ConcreteVisitor2 is being called!\");\n        }\n\n        public visitConcreteElement2(concreteElement2: ConcreteElement2): void {\n            console.log(\"`visitConcreteElement2` of ConcreteVisitor2 is being called!\");\n        }\n    }\n\n\n    export interface Element {\n        operate(visitor: Visitor): void;\n    }\n\n    export class ConcreteElement1 implements Element {\n        public operate(visitor: Visitor): void {\n            console.log(\"`operate` of ConcreteElement1 is being called!\");\n            visitor.visitConcreteElement1(this);\n        }\n    }\n\n    export class ConcreteElement2 implements Element {\n        public operate(visitor: Visitor): void {\n            console.log(\"`operate` of ConcreteElement2 is being called!\");\n            visitor.visitConcreteElement2(this);\n        }\n    }\n\n    export class Objs {\n        private elements: Element[] = [];\n\n        public attach(e: Element): void {\n            this.elements.push(e);\n        }\n\n        public detach(e: Element): void {\n            var index = this.elements.indexOf(e);\n            this.elements.splice(index, 1);\n        }\n\n        public operate(visitor: Visitor): void {\n            var i = 0,\n                max = this.elements.length;\n\n            for(; i < max; i += 1) {\n                this.elements[i].operate(visitor);\n            }\n        }\n    }\n\n}\n\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Visitor.md","raw":"---\ntitle: 访问者模式(Visitor)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Behavioral Patterns]\ntags: [javasctipt, 访问者模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 访问者模式的定义\n- 表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。\n\n---\n\n### ES6实现\n``` js\nclass Visitor {\n    constructor() {\n        console.log('Visitor Class created!');\n    }\n\n    visitConcreteElementA(ConcreteElementA) {\n        console.log('Visitor.visitConcreteElementA invoked');\n    }\n\n    visitConcreteElementB(ConcreteElementB) {\n        console.log('Visitor.visitConcreteElementB invoked');\n    }\n}\n\nclass ConcreteVisitor1 extends Visitor {\n    constructor() {\n        super();\n        console.log('ConcreteVisitor1 Class created!');\n    }\n\n    visitConcreteElementA(ConcreteElementA) {\n        console.log('ConcreteVisitor1.visitConcreteElementA invoked');\n    }\n\n    visitConcreteElementB(ConcreteElementB) {\n        console.log('ConcreteVisitor1.visitConcreteElementB invoked');\n    }\n}\n\nclass ConcreteVisitor2 extends Visitor {\n    constructor() {\n        super();\n        console.log('ConcreteVisitor2 Class created!');\n    }\n\n    visitConcreteElementA(ConcreteElementA) {\n        console.log('ConcreteVisitor2.visitConcreteElementA invoked');\n    }\n\n    visitConcreteElementB(ConcreteElementB) {\n        console.log('ConcreteVisitor2.visitConcreteElementB invoked');\n    }\n}\n\nclass ObjectStructure {\n    constructor() {\n        console.log('ObjectStructure Class created!');\n    }\n}\n\nclass Element {\n    constructor() {\n        console.log('Element Class created!');\n    }\n\n    Accept(visitor) {\n        console.log('Element.visitConcreteElementB invoked');\n    }\n}\n\nclass ConcreteElementA extends Element {\n    constructor() {\n        super();\n        console.log('ConcreteElementA Class created!');\n    }\n\n    accept(visitor) {\n        console.log('ConcreteElementA.accept invoked');\n        visitor.visitConcreteElementA(this);\n    }\n\n    operationA() {\n        console.log('ConcreteElementA.operationA invoked');\n    }\n}\n\nclass ConcreteElementB extends Element {\n    constructor() {\n        super();\n        console.log('ConcreteElementB Class created!');\n    }\n\n    accept(visitor) {\n        console.log('ConcreteElementB.accept invoked');\n        visitor.visitConcreteElementB(this);\n    }\n\n    operationB() {\n        console.log('ConcreteElementB.operationB invoked');\n    }\n}\n\nlet visitor1 = new ConcreteVisitor1();\nlet visitor2 = new ConcreteVisitor2();\nlet elementA = new ConcreteElementA();\nlet elementB = new ConcreteElementB();\nelementA.accept(visitor1);\nelementB.accept(visitor2);\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace VisitorPattern {\n    export interface Visitor {\n        visitConcreteElement1(concreteElement1: ConcreteElement1): void;\n        visitConcreteElement2(concreteElement2: ConcreteElement2): void;\n    }\n\n    export class ConcreteVisitor1 implements Visitor {\n        public visitConcreteElement1(concreteElement1: ConcreteElement1): void {\n            console.log(\"`visitConcreteElement1` of ConcreteVisitor1 is being called!\");\n        }\n\n        public visitConcreteElement2(concreteElement2: ConcreteElement2): void {\n            console.log(\"`visitConcreteElement2` of ConcreteVisitor1 is being called!\");\n        }\n    }\n\n    export class ConcreteVisitor2 implements Visitor {\n        public visitConcreteElement1(concreteElement1: ConcreteElement1): void {\n            console.log(\"`visitConcreteElement1` of ConcreteVisitor2 is being called!\");\n        }\n\n        public visitConcreteElement2(concreteElement2: ConcreteElement2): void {\n            console.log(\"`visitConcreteElement2` of ConcreteVisitor2 is being called!\");\n        }\n    }\n\n\n    export interface Element {\n        operate(visitor: Visitor): void;\n    }\n\n    export class ConcreteElement1 implements Element {\n        public operate(visitor: Visitor): void {\n            console.log(\"`operate` of ConcreteElement1 is being called!\");\n            visitor.visitConcreteElement1(this);\n        }\n    }\n\n    export class ConcreteElement2 implements Element {\n        public operate(visitor: Visitor): void {\n            console.log(\"`operate` of ConcreteElement2 is being called!\");\n            visitor.visitConcreteElement2(this);\n        }\n    }\n\n    export class Objs {\n        private elements: Element[] = [];\n\n        public attach(e: Element): void {\n            this.elements.push(e);\n        }\n\n        public detach(e: Element): void {\n            var index = this.elements.indexOf(e);\n            this.elements.splice(index, 1);\n        }\n\n        public operate(visitor: Visitor): void {\n            var i = 0,\n                max = this.elements.length;\n\n            for(; i < max; i += 1) {\n                this.elements[i].operate(visitor);\n            }\n        }\n    }\n\n}\n\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Visitor","published":1,"updated":"2017-07-08T07:38:29.870Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4v0315w001e2tmwdbidtkms","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"访问者模式的定义\"><a href=\"#访问者模式的定义\" class=\"headerlink\" title=\"访问者模式的定义\"></a>访问者模式的定义</h3><ul>\n<li>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Visitor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Visitor Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    visitConcreteElementA(ConcreteElementA) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Visitor.visitConcreteElementA invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    visitConcreteElementB(ConcreteElementB) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Visitor.visitConcreteElementB invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteVisitor1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Visitor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteVisitor1 Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    visitConcreteElementA(ConcreteElementA) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteVisitor1.visitConcreteElementA invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    visitConcreteElementB(ConcreteElementB) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteVisitor1.visitConcreteElementB invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteVisitor2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Visitor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteVisitor2 Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    visitConcreteElementA(ConcreteElementA) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteVisitor2.visitConcreteElementA invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    visitConcreteElementB(ConcreteElementB) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteVisitor2.visitConcreteElementB invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObjectStructure</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ObjectStructure Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Element</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Element Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Accept(visitor) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Element.visitConcreteElementB invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteElementA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Element</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteElementA Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    accept(visitor) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteElementA.accept invoked'</span>);</div><div class=\"line\">        visitor.visitConcreteElementA(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationA() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteElementA.operationA invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteElementB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Element</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteElementB Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    accept(visitor) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteElementB.accept invoked'</span>);</div><div class=\"line\">        visitor.visitConcreteElementB(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationB() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteElementB.operationB invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> visitor1 = <span class=\"keyword\">new</span> ConcreteVisitor1();</div><div class=\"line\"><span class=\"keyword\">let</span> visitor2 = <span class=\"keyword\">new</span> ConcreteVisitor2();</div><div class=\"line\"><span class=\"keyword\">let</span> elementA = <span class=\"keyword\">new</span> ConcreteElementA();</div><div class=\"line\"><span class=\"keyword\">let</span> elementB = <span class=\"keyword\">new</span> ConcreteElementB();</div><div class=\"line\">elementA.accept(visitor1);</div><div class=\"line\">elementB.accept(visitor2);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> VisitorPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Visitor &#123;</div><div class=\"line\">        visitConcreteElement1(concreteElement1: ConcreteElement1): <span class=\"built_in\">void</span>;</div><div class=\"line\">        visitConcreteElement2(concreteElement2: ConcreteElement2): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteVisitor1 <span class=\"keyword\">implements</span> Visitor &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> visitConcreteElement1(concreteElement1: ConcreteElement1): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`visitConcreteElement1` of ConcreteVisitor1 is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> visitConcreteElement2(concreteElement2: ConcreteElement2): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`visitConcreteElement2` of ConcreteVisitor1 is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteVisitor2 <span class=\"keyword\">implements</span> Visitor &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> visitConcreteElement1(concreteElement1: ConcreteElement1): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`visitConcreteElement1` of ConcreteVisitor2 is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> visitConcreteElement2(concreteElement2: ConcreteElement2): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`visitConcreteElement2` of ConcreteVisitor2 is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Element &#123;</div><div class=\"line\">        operate(visitor: Visitor): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteElement1 <span class=\"keyword\">implements</span> Element &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> operate(visitor: Visitor): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operate` of ConcreteElement1 is being called!\"</span>);</div><div class=\"line\">            visitor.visitConcreteElement1(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteElement2 <span class=\"keyword\">implements</span> Element &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> operate(visitor: Visitor): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operate` of ConcreteElement2 is being called!\"</span>);</div><div class=\"line\">            visitor.visitConcreteElement2(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Objs &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> elements: Element[] = [];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> attach(e: Element): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.elements.push(e);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> detach(e: Element): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> index = <span class=\"keyword\">this</span>.elements.indexOf(e);</div><div class=\"line\">            <span class=\"keyword\">this</span>.elements.splice(index, <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operate(visitor: Visitor): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,</div><div class=\"line\">                max = <span class=\"keyword\">this</span>.elements.length;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span>(; i &lt; max; i += <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.elements[i].operate(visitor);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"访问者模式的定义\"><a href=\"#访问者模式的定义\" class=\"headerlink\" title=\"访问者模式的定义\"></a>访问者模式的定义</h3><ul>\n<li>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Visitor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Visitor Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    visitConcreteElementA(ConcreteElementA) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Visitor.visitConcreteElementA invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    visitConcreteElementB(ConcreteElementB) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Visitor.visitConcreteElementB invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteVisitor1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Visitor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteVisitor1 Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    visitConcreteElementA(ConcreteElementA) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteVisitor1.visitConcreteElementA invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    visitConcreteElementB(ConcreteElementB) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteVisitor1.visitConcreteElementB invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteVisitor2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Visitor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteVisitor2 Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    visitConcreteElementA(ConcreteElementA) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteVisitor2.visitConcreteElementA invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    visitConcreteElementB(ConcreteElementB) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteVisitor2.visitConcreteElementB invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObjectStructure</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ObjectStructure Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Element</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Element Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Accept(visitor) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Element.visitConcreteElementB invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteElementA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Element</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteElementA Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    accept(visitor) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteElementA.accept invoked'</span>);</div><div class=\"line\">        visitor.visitConcreteElementA(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationA() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteElementA.operationA invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteElementB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Element</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteElementB Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    accept(visitor) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteElementB.accept invoked'</span>);</div><div class=\"line\">        visitor.visitConcreteElementB(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    operationB() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteElementB.operationB invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> visitor1 = <span class=\"keyword\">new</span> ConcreteVisitor1();</div><div class=\"line\"><span class=\"keyword\">let</span> visitor2 = <span class=\"keyword\">new</span> ConcreteVisitor2();</div><div class=\"line\"><span class=\"keyword\">let</span> elementA = <span class=\"keyword\">new</span> ConcreteElementA();</div><div class=\"line\"><span class=\"keyword\">let</span> elementB = <span class=\"keyword\">new</span> ConcreteElementB();</div><div class=\"line\">elementA.accept(visitor1);</div><div class=\"line\">elementB.accept(visitor2);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> VisitorPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Visitor &#123;</div><div class=\"line\">        visitConcreteElement1(concreteElement1: ConcreteElement1): <span class=\"built_in\">void</span>;</div><div class=\"line\">        visitConcreteElement2(concreteElement2: ConcreteElement2): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteVisitor1 <span class=\"keyword\">implements</span> Visitor &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> visitConcreteElement1(concreteElement1: ConcreteElement1): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`visitConcreteElement1` of ConcreteVisitor1 is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> visitConcreteElement2(concreteElement2: ConcreteElement2): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`visitConcreteElement2` of ConcreteVisitor1 is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteVisitor2 <span class=\"keyword\">implements</span> Visitor &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> visitConcreteElement1(concreteElement1: ConcreteElement1): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`visitConcreteElement1` of ConcreteVisitor2 is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> visitConcreteElement2(concreteElement2: ConcreteElement2): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`visitConcreteElement2` of ConcreteVisitor2 is being called!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Element &#123;</div><div class=\"line\">        operate(visitor: Visitor): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteElement1 <span class=\"keyword\">implements</span> Element &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> operate(visitor: Visitor): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operate` of ConcreteElement1 is being called!\"</span>);</div><div class=\"line\">            visitor.visitConcreteElement1(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteElement2 <span class=\"keyword\">implements</span> Element &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> operate(visitor: Visitor): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`operate` of ConcreteElement2 is being called!\"</span>);</div><div class=\"line\">            visitor.visitConcreteElement2(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Objs &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> elements: Element[] = [];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> attach(e: Element): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.elements.push(e);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> detach(e: Element): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> index = <span class=\"keyword\">this</span>.elements.indexOf(e);</div><div class=\"line\">            <span class=\"keyword\">this</span>.elements.splice(index, <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operate(visitor: Visitor): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,</div><div class=\"line\">                max = <span class=\"keyword\">this</span>.elements.length;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span>(; i &lt; max; i += <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.elements[i].operate(visitor);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"模板方法模式(TemplateMethod)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 模板方法模式的定义\n- 表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。\n\n---\n\n### ES6实现\n``` js\nclass AbstractClass {\n    constructor() {\n        console.log('AbstractClass Class created!');\n    }\n\n    templateMethod() {\n        console.log('AbstractClass.templateMethod invoked');\n        this.primitiveOperation1();\n        this.primitiveOperation2();\n    }\n\n    primitiveOperation1() {\n        console.log('AbstractClass.primitiveOperation1 invoked');\n    }\n\n    primitiveOperation2() {\n        console.log('AbstractClass.primitiveOperation2 invoked');\n    }\n}\n\nclass ConcreteClass extends AbstractClass {\n    constructor() {\n        super();\n        console.log('ConcreteClass Class created!');\n    }\n\n    primitiveOperation1() {\n        console.log('ConcreteClass.primitiveOperation1 invoked');\n    }\n\n    primitiveOperation2() {\n        console.log('ConcreteClass.primitiveOperation2 invoked');\n    }\n}\n\nlet obj = new ConcreteClass();\nobj.templateMethod();\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace TemplateMethodPattern {\n    export class AbstractClass {\n        public method1(): void {\n            throw new Error(\"Abstract Method\");\n        }\n\n        public method2(): void {\n            throw new Error(\"Abstract Method\");\n        }\n\n        public method3(): void {\n            throw new Error(\"Abstract Method\");\n        }\n\n        public templateMethod(): void {\n            console.log(\"templateMethod is being called\");\n            this.method1();\n            this.method2();\n            this.method3();\n        }\n    }\n\n    export class ConcreteClass1 extends AbstractClass {\n        public method1(): void {\n            console.log(\"method1 of ConcreteClass1\");\n        }\n\n        public method2(): void {\n            console.log(\"method2 of ConcreteClass1\");\n        }\n\n        public method3(): void {\n            console.log(\"method3 of ConcreteClass1\");\n        }\n    }\n\n    export class ConcreteClass2 extends AbstractClass {\n        public method1(): void {\n            console.log(\"method1 of ConcreteClass2\");\n        }\n\n        public method2(): void {\n            console.log(\"method2 of ConcreteClass2\");\n        }\n\n        public method3(): void {\n            console.log(\"method3 of ConcreteClass2\");\n        }\n    }\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/TemplateMethod.md","raw":"---\ntitle: 模板方法模式(TemplateMethod)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Behavioral Patterns]\ntags: [javasctipt, 模板方法模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 模板方法模式的定义\n- 表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。\n\n---\n\n### ES6实现\n``` js\nclass AbstractClass {\n    constructor() {\n        console.log('AbstractClass Class created!');\n    }\n\n    templateMethod() {\n        console.log('AbstractClass.templateMethod invoked');\n        this.primitiveOperation1();\n        this.primitiveOperation2();\n    }\n\n    primitiveOperation1() {\n        console.log('AbstractClass.primitiveOperation1 invoked');\n    }\n\n    primitiveOperation2() {\n        console.log('AbstractClass.primitiveOperation2 invoked');\n    }\n}\n\nclass ConcreteClass extends AbstractClass {\n    constructor() {\n        super();\n        console.log('ConcreteClass Class created!');\n    }\n\n    primitiveOperation1() {\n        console.log('ConcreteClass.primitiveOperation1 invoked');\n    }\n\n    primitiveOperation2() {\n        console.log('ConcreteClass.primitiveOperation2 invoked');\n    }\n}\n\nlet obj = new ConcreteClass();\nobj.templateMethod();\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace TemplateMethodPattern {\n    export class AbstractClass {\n        public method1(): void {\n            throw new Error(\"Abstract Method\");\n        }\n\n        public method2(): void {\n            throw new Error(\"Abstract Method\");\n        }\n\n        public method3(): void {\n            throw new Error(\"Abstract Method\");\n        }\n\n        public templateMethod(): void {\n            console.log(\"templateMethod is being called\");\n            this.method1();\n            this.method2();\n            this.method3();\n        }\n    }\n\n    export class ConcreteClass1 extends AbstractClass {\n        public method1(): void {\n            console.log(\"method1 of ConcreteClass1\");\n        }\n\n        public method2(): void {\n            console.log(\"method2 of ConcreteClass1\");\n        }\n\n        public method3(): void {\n            console.log(\"method3 of ConcreteClass1\");\n        }\n    }\n\n    export class ConcreteClass2 extends AbstractClass {\n        public method1(): void {\n            console.log(\"method1 of ConcreteClass2\");\n        }\n\n        public method2(): void {\n            console.log(\"method2 of ConcreteClass2\");\n        }\n\n        public method3(): void {\n            console.log(\"method3 of ConcreteClass2\");\n        }\n    }\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"TemplateMethod","published":1,"updated":"2017-07-08T07:40:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4v0315w001i2tmwjnmsn5kr","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"模板方法模式的定义\"><a href=\"#模板方法模式的定义\" class=\"headerlink\" title=\"模板方法模式的定义\"></a>模板方法模式的定义</h3><ul>\n<li>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractClass Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    templateMethod() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractClass.templateMethod invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.primitiveOperation1();</div><div class=\"line\">        <span class=\"keyword\">this</span>.primitiveOperation2();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    primitiveOperation1() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractClass.primitiveOperation1 invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    primitiveOperation2() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractClass.primitiveOperation2 invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteClass Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    primitiveOperation1() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteClass.primitiveOperation1 invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    primitiveOperation2() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteClass.primitiveOperation2 invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> ConcreteClass();</div><div class=\"line\">obj.templateMethod();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> TemplateMethodPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AbstractClass &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> method1(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract Method\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> method2(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract Method\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> method3(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract Method\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> templateMethod(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"templateMethod is being called\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.method1();</div><div class=\"line\">            <span class=\"keyword\">this</span>.method2();</div><div class=\"line\">            <span class=\"keyword\">this</span>.method3();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteClass1 <span class=\"keyword\">extends</span> AbstractClass &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> method1(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"method1 of ConcreteClass1\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> method2(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"method2 of ConcreteClass1\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> method3(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"method3 of ConcreteClass1\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteClass2 <span class=\"keyword\">extends</span> AbstractClass &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> method1(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"method1 of ConcreteClass2\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> method2(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"method2 of ConcreteClass2\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> method3(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"method3 of ConcreteClass2\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"模板方法模式的定义\"><a href=\"#模板方法模式的定义\" class=\"headerlink\" title=\"模板方法模式的定义\"></a>模板方法模式的定义</h3><ul>\n<li>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractClass Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    templateMethod() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractClass.templateMethod invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.primitiveOperation1();</div><div class=\"line\">        <span class=\"keyword\">this</span>.primitiveOperation2();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    primitiveOperation1() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractClass.primitiveOperation1 invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    primitiveOperation2() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'AbstractClass.primitiveOperation2 invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteClass Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    primitiveOperation1() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteClass.primitiveOperation1 invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    primitiveOperation2() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteClass.primitiveOperation2 invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> ConcreteClass();</div><div class=\"line\">obj.templateMethod();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> TemplateMethodPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AbstractClass &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> method1(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract Method\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> method2(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract Method\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> method3(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract Method\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> templateMethod(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"templateMethod is being called\"</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.method1();</div><div class=\"line\">            <span class=\"keyword\">this</span>.method2();</div><div class=\"line\">            <span class=\"keyword\">this</span>.method3();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteClass1 <span class=\"keyword\">extends</span> AbstractClass &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> method1(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"method1 of ConcreteClass1\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> method2(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"method2 of ConcreteClass1\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> method3(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"method3 of ConcreteClass1\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteClass2 <span class=\"keyword\">extends</span> AbstractClass &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> method1(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"method1 of ConcreteClass2\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> method2(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"method2 of ConcreteClass2\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> method3(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"method3 of ConcreteClass2\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"责任链模式(Chain of Responsibility)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n\n\n### ES6实现\n``` js\n'use strict';\nclass Handler {\n    constructor() {\n        console.log('Handler Class created');\n    }\n\n    handleRequest() {\n        console.log('Handler.handleRequest invoked');\n    }\n}\n\nclass ConcreteHandler1 extends Handler {\n    constructor() {\n        super();\n        console.log('ConcreteHandler1 Class created');\n    }\n\n    setSuccessor(successor) {\n        this.successor = successor;\n        console.log('ConcreteHandler1.setSuccessor invoked');\n    }\n\n    handleRequest(request) {\n        console.log('ConcreteHandler1.handleRequest invoked');\n        if (request === 'run')\n            console.log('ConcreteHandler1 has handled the request');\n        else {\n            console.log('ConcreteHandler1 calls his successor');\n            this.successor.handleRequest(request);\n        }\n    }\n}\n\nclass ConcreteHandler2 extends Handler {\n    constructor() {\n        super();\n        console.log('ConcreteHandler2 Class created');\n    }\n\n    handleRequest(request) {\n        console.log('ConcreteHandler2.handleRequest invoked');\n    }\n}\n\nlet handle1 = new ConcreteHandler1();\nlet handle2 = new ConcreteHandler2();\nhandle1.setSuccessor(handle2);\nhandle1.handleRequest('run');\nhandle1.handleRequest('stay');\n\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace ChainOfResponsibilityPattern {\n\n    export class Handler {\n        private handler: Handler;\n        private req: number;\n\n        constructor(req: number) {\n            this.req = req;\n        }\n\n        public setHandler(handler: Handler): void {\n            this.handler = handler;\n        }\n\n        public operation(msg: string, req: number): void {\n            if (req <= this.req) {\n                this.handlerRequest(msg)\n            } else if (this.handler !== null && this.handler !== undefined) {\n                this.handler.operation(msg, req);\n            }\n        }\n\n        public handlerRequest(msg: string): void {\n            throw new Error(\"Abstract method!\");\n        }\n    }\n\n    export class ConcreteHandler1 extends Handler {\n        constructor(req: number) {\n            super(req);\n        }\n        public handlerRequest(msg: string) {\n            console.log(\"Message (ConcreteHandler1) :: \", msg);\n        }\n    }\n\n\n    export class ConcreteHandler2 extends Handler {\n        constructor(req: number) {\n            super(req);\n        }\n        public handlerRequest(msg: string) {\n            console.log(\"Message :: (ConcreteHandler2) \", msg);\n        }\n    }\n\n    export class ConcreteHandler3 extends Handler {\n        constructor(req: number) {\n            super(req);\n        }\n        public handlerRequest(msg: string) {\n            console.log(\"Message :: (ConcreteHandler3) \", msg);\n        }\n    }\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/chainOfResponsibility.md","raw":"---\ntitle: 责任链模式(Chain of Responsibility)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Behavioral Patterns]\ntags: [javasctipt, 责任链模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n\n\n### ES6实现\n``` js\n'use strict';\nclass Handler {\n    constructor() {\n        console.log('Handler Class created');\n    }\n\n    handleRequest() {\n        console.log('Handler.handleRequest invoked');\n    }\n}\n\nclass ConcreteHandler1 extends Handler {\n    constructor() {\n        super();\n        console.log('ConcreteHandler1 Class created');\n    }\n\n    setSuccessor(successor) {\n        this.successor = successor;\n        console.log('ConcreteHandler1.setSuccessor invoked');\n    }\n\n    handleRequest(request) {\n        console.log('ConcreteHandler1.handleRequest invoked');\n        if (request === 'run')\n            console.log('ConcreteHandler1 has handled the request');\n        else {\n            console.log('ConcreteHandler1 calls his successor');\n            this.successor.handleRequest(request);\n        }\n    }\n}\n\nclass ConcreteHandler2 extends Handler {\n    constructor() {\n        super();\n        console.log('ConcreteHandler2 Class created');\n    }\n\n    handleRequest(request) {\n        console.log('ConcreteHandler2.handleRequest invoked');\n    }\n}\n\nlet handle1 = new ConcreteHandler1();\nlet handle2 = new ConcreteHandler2();\nhandle1.setSuccessor(handle2);\nhandle1.handleRequest('run');\nhandle1.handleRequest('stay');\n\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace ChainOfResponsibilityPattern {\n\n    export class Handler {\n        private handler: Handler;\n        private req: number;\n\n        constructor(req: number) {\n            this.req = req;\n        }\n\n        public setHandler(handler: Handler): void {\n            this.handler = handler;\n        }\n\n        public operation(msg: string, req: number): void {\n            if (req <= this.req) {\n                this.handlerRequest(msg)\n            } else if (this.handler !== null && this.handler !== undefined) {\n                this.handler.operation(msg, req);\n            }\n        }\n\n        public handlerRequest(msg: string): void {\n            throw new Error(\"Abstract method!\");\n        }\n    }\n\n    export class ConcreteHandler1 extends Handler {\n        constructor(req: number) {\n            super(req);\n        }\n        public handlerRequest(msg: string) {\n            console.log(\"Message (ConcreteHandler1) :: \", msg);\n        }\n    }\n\n\n    export class ConcreteHandler2 extends Handler {\n        constructor(req: number) {\n            super(req);\n        }\n        public handlerRequest(msg: string) {\n            console.log(\"Message :: (ConcreteHandler2) \", msg);\n        }\n    }\n\n    export class ConcreteHandler3 extends Handler {\n        constructor(req: number) {\n            super(req);\n        }\n        public handlerRequest(msg: string) {\n            console.log(\"Message :: (ConcreteHandler3) \", msg);\n        }\n    }\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"chainOfResponsibility","published":1,"updated":"2017-07-08T07:05:27.628Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4v0315y001l2tmw8gkcjdjr","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Handler Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    handleRequest() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Handler.handleRequest invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteHandler1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler1 Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setSuccessor(successor) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.successor = successor;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler1.setSuccessor invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    handleRequest(request) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler1.handleRequest invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (request === <span class=\"string\">'run'</span>)</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler1 has handled the request'</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler1 calls his successor'</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.successor.handleRequest(request);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteHandler2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler2 Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    handleRequest(request) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler2.handleRequest invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> handle1 = <span class=\"keyword\">new</span> ConcreteHandler1();</div><div class=\"line\"><span class=\"keyword\">let</span> handle2 = <span class=\"keyword\">new</span> ConcreteHandler2();</div><div class=\"line\">handle1.setSuccessor(handle2);</div><div class=\"line\">handle1.handleRequest(<span class=\"string\">'run'</span>);</div><div class=\"line\">handle1.handleRequest(<span class=\"string\">'stay'</span>);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> ChainOfResponsibilityPattern &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Handler &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> handler: Handler;</div><div class=\"line\">        <span class=\"keyword\">private</span> req: <span class=\"built_in\">number</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">req: <span class=\"built_in\">number</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.req = req;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> setHandler(handler: Handler): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.handler = handler;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(msg: <span class=\"built_in\">string</span>, req: <span class=\"built_in\">number</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (req &lt;= <span class=\"keyword\">this</span>.req) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.handlerRequest(msg)</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.handler !== <span class=\"literal\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.handler !== <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.handler.operation(msg, req);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> handlerRequest(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract method!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteHandler1 <span class=\"keyword\">extends</span> Handler &#123;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">req: <span class=\"built_in\">number</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(req);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">public</span> handlerRequest(msg: <span class=\"built_in\">string</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Message (ConcreteHandler1) :: \"</span>, msg);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteHandler2 <span class=\"keyword\">extends</span> Handler &#123;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">req: <span class=\"built_in\">number</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(req);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">public</span> handlerRequest(msg: <span class=\"built_in\">string</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Message :: (ConcreteHandler2) \"</span>, msg);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteHandler3 <span class=\"keyword\">extends</span> Handler &#123;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">req: <span class=\"built_in\">number</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(req);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">public</span> handlerRequest(msg: <span class=\"built_in\">string</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Message :: (ConcreteHandler3) \"</span>, msg);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Handler Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    handleRequest() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Handler.handleRequest invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteHandler1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler1 Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    setSuccessor(successor) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.successor = successor;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler1.setSuccessor invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    handleRequest(request) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler1.handleRequest invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (request === <span class=\"string\">'run'</span>)</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler1 has handled the request'</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler1 calls his successor'</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.successor.handleRequest(request);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteHandler2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler2 Class created'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    handleRequest(request) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteHandler2.handleRequest invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> handle1 = <span class=\"keyword\">new</span> ConcreteHandler1();</div><div class=\"line\"><span class=\"keyword\">let</span> handle2 = <span class=\"keyword\">new</span> ConcreteHandler2();</div><div class=\"line\">handle1.setSuccessor(handle2);</div><div class=\"line\">handle1.handleRequest(<span class=\"string\">'run'</span>);</div><div class=\"line\">handle1.handleRequest(<span class=\"string\">'stay'</span>);</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> ChainOfResponsibilityPattern &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Handler &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> handler: Handler;</div><div class=\"line\">        <span class=\"keyword\">private</span> req: <span class=\"built_in\">number</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">req: <span class=\"built_in\">number</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.req = req;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> setHandler(handler: Handler): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.handler = handler;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> operation(msg: <span class=\"built_in\">string</span>, req: <span class=\"built_in\">number</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (req &lt;= <span class=\"keyword\">this</span>.req) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.handlerRequest(msg)</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.handler !== <span class=\"literal\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.handler !== <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">this</span>.handler.operation(msg, req);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> handlerRequest(msg: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Abstract method!\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteHandler1 <span class=\"keyword\">extends</span> Handler &#123;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">req: <span class=\"built_in\">number</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(req);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">public</span> handlerRequest(msg: <span class=\"built_in\">string</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Message (ConcreteHandler1) :: \"</span>, msg);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteHandler2 <span class=\"keyword\">extends</span> Handler &#123;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">req: <span class=\"built_in\">number</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(req);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">public</span> handlerRequest(msg: <span class=\"built_in\">string</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Message :: (ConcreteHandler2) \"</span>, msg);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteHandler3 <span class=\"keyword\">extends</span> Handler &#123;</div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">req: <span class=\"built_in\">number</span></span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(req);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">public</span> handlerRequest(msg: <span class=\"built_in\">string</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Message :: (ConcreteHandler3) \"</span>, msg);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"},{"title":"策略模式(Strategy)-设计模式","date":"2017-05-05T15:58:44.000Z","_content":"> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 策略模式的定义\n- 策略模式(Strategy Pattern)：定义一系列算法，将每一个算法封装起来，并让它们可以相互替换。\n- 策略模式让算法独立于使用它的客户而变化，也称为政策模式(Policy)。。\n\n### 策略模式包含三个角色：\n- Context-环境类在解决某个问题时可以采用多种策略，在环境类中维护一个对抽象策略类的引用实例;\n- Strategy-抽象策略类为所支持的算法声明了抽象方法，是所有策略类的父类;\n- ConcreteStrategy-具体策略类实现了在抽象策略类中定义的算法。\n---\n\n### ES6实现\n``` js\nclass Context {\n    constructor(type) {\n        console.log('Context Class created!');\n        switch (type) {\n            case \"A\":\n                this.strategy = new ConcreteStrategyA()\n                break\n            case \"B\":\n                this.strategy = new ConcreteStrategyB()\n                break\n            default:\n                this.strategy = new ConcreteStrategyA()\n        }\n    }\n\n    contextInterface() {\n        console.log('Context.contextInterface invoked');\n        this.strategy.algorithmInterface()\n    }\n}\n\nclass Strategy {\n    constructor() {\n        console.log('Strategy Class created!');\n    }\n\n    algorithmInterface() {\n        console.log('Strategy.algorithmInterface invoked');\n    }\n}\n\nclass ConcreteStrategyA extends Strategy {\n    constructor() {\n        super();\n        console.log('ConcreteStrategyA Class created!');\n    }\n\n    algorithmInterface() {\n        console.log('ConcreteStrategyA.algorithmInterface invoked');\n    }\n}\n\nclass ConcreteStrategyB extends Strategy {\n    constructor() {\n        super();\n        console.log('ConcreteStrategyB Class created!');\n    }\n\n    algorithmInterface() {\n        console.log('ConcreteStrategyB.algorithmInterface invoked');\n    }\n}\n\nlet contextA = new Context(\"A\");\ncontextA.contextInterface();\nlet contextB = new Context(\"B\");\ncontextB.contextInterface();\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace StrategyPattern {\n    export interface Strategy {\n        execute(): void;\n    }\n\n    export class ConcreteStrategy1 implements Strategy {\n        public execute(): void {\n            console.log(\"`execute` method of ConcreteStrategy1 is being called\");\n        }\n    }\n\n    export class ConcreteStrategy2 implements Strategy {\n        public execute(): void {\n            console.log(\"`execute` method of ConcreteStrategy2 is being called\");\n        }\n    }\n\n    export class ConcreteStrategy3 implements Strategy {\n        public execute(): void {\n            console.log(\"`execute` method of ConcreteStrategy3 is being called\");\n        }\n    }\n\n    export class Context {\n        private strategy: Strategy;\n\n        constructor(strategy: Strategy) {\n            this.strategy = strategy;\n        }\n\n        public executeStrategy(): void {\n            this.strategy.execute();\n        }\n    }\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","source":"_posts/Strategy.md","raw":"---\ntitle: 策略模式(Strategy)-设计模式\ndate: 2017-05-05 23:58:44\ncategories: [design-pattern, Behavioral Patterns]\ntags: [javasctipt, 策略模式]\n---\n> 软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。\n> 软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，\n> 实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。\n\n### 策略模式的定义\n- 策略模式(Strategy Pattern)：定义一系列算法，将每一个算法封装起来，并让它们可以相互替换。\n- 策略模式让算法独立于使用它的客户而变化，也称为政策模式(Policy)。。\n\n### 策略模式包含三个角色：\n- Context-环境类在解决某个问题时可以采用多种策略，在环境类中维护一个对抽象策略类的引用实例;\n- Strategy-抽象策略类为所支持的算法声明了抽象方法，是所有策略类的父类;\n- ConcreteStrategy-具体策略类实现了在抽象策略类中定义的算法。\n---\n\n### ES6实现\n``` js\nclass Context {\n    constructor(type) {\n        console.log('Context Class created!');\n        switch (type) {\n            case \"A\":\n                this.strategy = new ConcreteStrategyA()\n                break\n            case \"B\":\n                this.strategy = new ConcreteStrategyB()\n                break\n            default:\n                this.strategy = new ConcreteStrategyA()\n        }\n    }\n\n    contextInterface() {\n        console.log('Context.contextInterface invoked');\n        this.strategy.algorithmInterface()\n    }\n}\n\nclass Strategy {\n    constructor() {\n        console.log('Strategy Class created!');\n    }\n\n    algorithmInterface() {\n        console.log('Strategy.algorithmInterface invoked');\n    }\n}\n\nclass ConcreteStrategyA extends Strategy {\n    constructor() {\n        super();\n        console.log('ConcreteStrategyA Class created!');\n    }\n\n    algorithmInterface() {\n        console.log('ConcreteStrategyA.algorithmInterface invoked');\n    }\n}\n\nclass ConcreteStrategyB extends Strategy {\n    constructor() {\n        super();\n        console.log('ConcreteStrategyB Class created!');\n    }\n\n    algorithmInterface() {\n        console.log('ConcreteStrategyB.algorithmInterface invoked');\n    }\n}\n\nlet contextA = new Context(\"A\");\ncontextA.contextInterface();\nlet contextB = new Context(\"B\");\ncontextB.contextInterface();\n\n```\n---\n\n### Typescript实现\n``` ts\nnamespace StrategyPattern {\n    export interface Strategy {\n        execute(): void;\n    }\n\n    export class ConcreteStrategy1 implements Strategy {\n        public execute(): void {\n            console.log(\"`execute` method of ConcreteStrategy1 is being called\");\n        }\n    }\n\n    export class ConcreteStrategy2 implements Strategy {\n        public execute(): void {\n            console.log(\"`execute` method of ConcreteStrategy2 is being called\");\n        }\n    }\n\n    export class ConcreteStrategy3 implements Strategy {\n        public execute(): void {\n            console.log(\"`execute` method of ConcreteStrategy3 is being called\");\n        }\n    }\n\n    export class Context {\n        private strategy: Strategy;\n\n        constructor(strategy: Strategy) {\n            this.strategy = strategy;\n        }\n\n        public executeStrategy(): void {\n            this.strategy.execute();\n        }\n    }\n}\n\n```\n---\n\n## 参考以下内容:\n - [图说设计模式](https://design-patterns.readthedocs.io/zh_CN/latest/)\n - [ECMAScript2016-Design-Patterns](https://github.com/ryouaki/ECMAScript2016-Design-Patterns)\n - [Design Patterns in TypeScript](https://github.com/torokmark/design_patterns_in_typescript)\n","slug":"Strategy","published":1,"updated":"2017-07-08T07:33:56.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4v03160001p2tmwkcbdqzxc","content":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"策略模式的定义\"><a href=\"#策略模式的定义\" class=\"headerlink\" title=\"策略模式的定义\"></a>策略模式的定义</h3><ul>\n<li>策略模式(Strategy Pattern)：定义一系列算法，将每一个算法封装起来，并让它们可以相互替换。</li>\n<li>策略模式让算法独立于使用它的客户而变化，也称为政策模式(Policy)。。</li>\n</ul>\n<h3 id=\"策略模式包含三个角色：\"><a href=\"#策略模式包含三个角色：\" class=\"headerlink\" title=\"策略模式包含三个角色：\"></a>策略模式包含三个角色：</h3><ul>\n<li>Context-环境类在解决某个问题时可以采用多种策略，在环境类中维护一个对抽象策略类的引用实例;</li>\n<li>Strategy-抽象策略类为所支持的算法声明了抽象方法，是所有策略类的父类;</li>\n<li>ConcreteStrategy-具体策略类实现了在抽象策略类中定义的算法。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(type) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context Class created!'</span>);</div><div class=\"line\">        <span class=\"keyword\">switch</span> (type) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"A\"</span>:</div><div class=\"line\">                <span class=\"keyword\">this</span>.strategy = <span class=\"keyword\">new</span> ConcreteStrategyA()</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"B\"</span>:</div><div class=\"line\">                <span class=\"keyword\">this</span>.strategy = <span class=\"keyword\">new</span> ConcreteStrategyB()</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">this</span>.strategy = <span class=\"keyword\">new</span> ConcreteStrategyA()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    contextInterface() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context.contextInterface invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.strategy.algorithmInterface()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Strategy</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Strategy Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    algorithmInterface() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Strategy.algorithmInterface invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStrategyA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Strategy</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteStrategyA Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    algorithmInterface() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteStrategyA.algorithmInterface invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStrategyB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Strategy</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteStrategyB Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    algorithmInterface() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteStrategyB.algorithmInterface invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> contextA = <span class=\"keyword\">new</span> Context(<span class=\"string\">\"A\"</span>);</div><div class=\"line\">contextA.contextInterface();</div><div class=\"line\"><span class=\"keyword\">let</span> contextB = <span class=\"keyword\">new</span> Context(<span class=\"string\">\"B\"</span>);</div><div class=\"line\">contextB.contextInterface();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> StrategyPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Strategy &#123;</div><div class=\"line\">        execute(): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteStrategy1 <span class=\"keyword\">implements</span> Strategy &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> execute(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`execute` method of ConcreteStrategy1 is being called\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteStrategy2 <span class=\"keyword\">implements</span> Strategy &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> execute(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`execute` method of ConcreteStrategy2 is being called\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteStrategy3 <span class=\"keyword\">implements</span> Strategy &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> execute(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`execute` method of ConcreteStrategy3 is being called\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Context &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> strategy: Strategy;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">strategy: Strategy</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.strategy = strategy;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> executeStrategy(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.strategy.execute();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>\n</blockquote>\n<h3 id=\"策略模式的定义\"><a href=\"#策略模式的定义\" class=\"headerlink\" title=\"策略模式的定义\"></a>策略模式的定义</h3><ul>\n<li>策略模式(Strategy Pattern)：定义一系列算法，将每一个算法封装起来，并让它们可以相互替换。</li>\n<li>策略模式让算法独立于使用它的客户而变化，也称为政策模式(Policy)。。</li>\n</ul>\n<h3 id=\"策略模式包含三个角色：\"><a href=\"#策略模式包含三个角色：\" class=\"headerlink\" title=\"策略模式包含三个角色：\"></a>策略模式包含三个角色：</h3><ul>\n<li>Context-环境类在解决某个问题时可以采用多种策略，在环境类中维护一个对抽象策略类的引用实例;</li>\n<li>Strategy-抽象策略类为所支持的算法声明了抽象方法，是所有策略类的父类;</li>\n<li>ConcreteStrategy-具体策略类实现了在抽象策略类中定义的算法。</li>\n</ul>\n<hr>\n<h3 id=\"ES6实现\"><a href=\"#ES6实现\" class=\"headerlink\" title=\"ES6实现\"></a>ES6实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(type) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context Class created!'</span>);</div><div class=\"line\">        <span class=\"keyword\">switch</span> (type) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"A\"</span>:</div><div class=\"line\">                <span class=\"keyword\">this</span>.strategy = <span class=\"keyword\">new</span> ConcreteStrategyA()</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">\"B\"</span>:</div><div class=\"line\">                <span class=\"keyword\">this</span>.strategy = <span class=\"keyword\">new</span> ConcreteStrategyB()</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">this</span>.strategy = <span class=\"keyword\">new</span> ConcreteStrategyA()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    contextInterface() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Context.contextInterface invoked'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.strategy.algorithmInterface()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Strategy</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Strategy Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    algorithmInterface() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Strategy.algorithmInterface invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStrategyA</span> <span class=\"keyword\">extends</span> <span class=\"title\">Strategy</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteStrategyA Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    algorithmInterface() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteStrategyA.algorithmInterface invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStrategyB</span> <span class=\"keyword\">extends</span> <span class=\"title\">Strategy</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteStrategyB Class created!'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    algorithmInterface() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ConcreteStrategyB.algorithmInterface invoked'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> contextA = <span class=\"keyword\">new</span> Context(<span class=\"string\">\"A\"</span>);</div><div class=\"line\">contextA.contextInterface();</div><div class=\"line\"><span class=\"keyword\">let</span> contextB = <span class=\"keyword\">new</span> Context(<span class=\"string\">\"B\"</span>);</div><div class=\"line\">contextB.contextInterface();</div></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Typescript实现\"><a href=\"#Typescript实现\" class=\"headerlink\" title=\"Typescript实现\"></a>Typescript实现</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">namespace</span> StrategyPattern &#123;</div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> Strategy &#123;</div><div class=\"line\">        execute(): <span class=\"built_in\">void</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteStrategy1 <span class=\"keyword\">implements</span> Strategy &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> execute(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`execute` method of ConcreteStrategy1 is being called\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteStrategy2 <span class=\"keyword\">implements</span> Strategy &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> execute(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`execute` method of ConcreteStrategy2 is being called\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> ConcreteStrategy3 <span class=\"keyword\">implements</span> Strategy &#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> execute(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"`execute` method of ConcreteStrategy3 is being called\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">export</span> <span class=\"keyword\">class</span> Context &#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> strategy: Strategy;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">constructor</span>(<span class=\"params\">strategy: Strategy</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.strategy = strategy;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">public</span> executeStrategy(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.strategy.execute();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"参考以下内容\"><a href=\"#参考以下内容\" class=\"headerlink\" title=\"参考以下内容:\"></a>参考以下内容:</h2><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">图说设计模式</a></li>\n<li><a href=\"https://github.com/ryouaki/ECMAScript2016-Design-Patterns\" target=\"_blank\" rel=\"external\">ECMAScript2016-Design-Patterns</a></li>\n<li><a href=\"https://github.com/torokmark/design_patterns_in_typescript\" target=\"_blank\" rel=\"external\">Design Patterns in TypeScript</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj4v0314y00082tmwlf5ymlj9","category_id":"cj4v0314o00042tmwvjnyhvz1","_id":"cj4v0315l000t2tmwvuwhfzv1"},{"post_id":"cj4v0314y00082tmwlf5ymlj9","category_id":"cj4v0315d000j2tmwvt80zki6","_id":"cj4v0315m000y2tmwu7knsn5i"},{"post_id":"cj4v0314e00002tmw3yawras3","category_id":"cj4v0314o00042tmwvjnyhvz1","_id":"cj4v0315o00102tmwvui2doxy"},{"post_id":"cj4v0314e00002tmw3yawras3","category_id":"cj4v0315d000j2tmwvt80zki6","_id":"cj4v0315s00142tmwns9my1yz"},{"post_id":"cj4v0315200092tmwjy3qn052","category_id":"cj4v0314o00042tmwvjnyhvz1","_id":"cj4v0315t00172tmwkdwxr7dy"},{"post_id":"cj4v0315200092tmwjy3qn052","category_id":"cj4v0315l000u2tmw1lwzt9ah","_id":"cj4v0315v001c2tmw96msrqg0"},{"post_id":"cj4v0315m000z2tmwi8ukckjx","category_id":"cj4v0314o00042tmwvjnyhvz1","_id":"cj4v0315w001f2tmw27e6e3zs"},{"post_id":"cj4v0315m000z2tmwi8ukckjx","category_id":"cj4v0315d000j2tmwvt80zki6","_id":"cj4v0315x001j2tmwvhe171bt"},{"post_id":"cj4v0315q00132tmwwh6ub878","category_id":"cj4v0314o00042tmwvjnyhvz1","_id":"cj4v0315z001n2tmw8tfxqdj9"},{"post_id":"cj4v0315q00132tmwwh6ub878","category_id":"cj4v0315l000u2tmw1lwzt9ah","_id":"cj4v03162001r2tmw0mkpzvfn"},{"post_id":"cj4v03156000c2tmwoim5ffnm","category_id":"cj4v0314o00042tmwvjnyhvz1","_id":"cj4v03162001t2tmwarcjf42y"},{"post_id":"cj4v03156000c2tmwoim5ffnm","category_id":"cj4v0315p00112tmwwyx29k8c","_id":"cj4v03163001w2tmw5ht38r0o"},{"post_id":"cj4v0315t00162tmwjhvy28mt","category_id":"cj4v0314o00042tmwvjnyhvz1","_id":"cj4v03164001z2tmwlhu12bta"},{"post_id":"cj4v0315t00162tmwjhvy28mt","category_id":"cj4v0315l000u2tmw1lwzt9ah","_id":"cj4v0316500222tmwv70kefe9"},{"post_id":"cj4v0315u001a2tmwj06rusxi","category_id":"cj4v0314o00042tmwvjnyhvz1","_id":"cj4v0316500252tmw81com4wa"},{"post_id":"cj4v0315u001a2tmwj06rusxi","category_id":"cj4v0315p00112tmwwyx29k8c","_id":"cj4v0316600282tmwibht45m2"},{"post_id":"cj4v0314l00022tmw1hsszj2h","category_id":"cj4v0314o00042tmwvjnyhvz1","_id":"cj4v03167002a2tmwy0y0mydm"},{"post_id":"cj4v0314l00022tmw1hsszj2h","category_id":"cj4v0315l000u2tmw1lwzt9ah","_id":"cj4v03168002e2tmwno6lm0fy"},{"post_id":"cj4v0315w001e2tmwdbidtkms","category_id":"cj4v0314o00042tmwvjnyhvz1","_id":"cj4v03168002g2tmwxossjdxy"},{"post_id":"cj4v0315w001e2tmwdbidtkms","category_id":"cj4v0315p00112tmwwyx29k8c","_id":"cj4v03169002j2tmw5wymsv9f"},{"post_id":"cj4v0315w001i2tmwjnmsn5kr","category_id":"cj4v0314o00042tmwvjnyhvz1","_id":"cj4v03169002l2tmws1atrk2m"},{"post_id":"cj4v0315w001i2tmwjnmsn5kr","category_id":"cj4v0315p00112tmwwyx29k8c","_id":"cj4v0316b002p2tmwzyws5ppp"},{"post_id":"cj4v03157000d2tmwoa4js7p0","category_id":"cj4v0314o00042tmwvjnyhvz1","_id":"cj4v0316b002r2tmwjji57zsc"},{"post_id":"cj4v03157000d2tmwoa4js7p0","category_id":"cj4v0315d000j2tmwvt80zki6","_id":"cj4v0316c002v2tmwsvoqmv2t"},{"post_id":"cj4v0315y001l2tmw8gkcjdjr","category_id":"cj4v0314o00042tmwvjnyhvz1","_id":"cj4v0316c002x2tmw2b1bgd8f"},{"post_id":"cj4v0315y001l2tmw8gkcjdjr","category_id":"cj4v0315p00112tmwwyx29k8c","_id":"cj4v0316d002z2tmwybxlzxdc"},{"post_id":"cj4v03160001p2tmwkcbdqzxc","category_id":"cj4v0314o00042tmwvjnyhvz1","_id":"cj4v0316d00322tmwyutsutbd"},{"post_id":"cj4v03160001p2tmwkcbdqzxc","category_id":"cj4v0315p00112tmwwyx29k8c","_id":"cj4v0316d00342tmw969n3vh8"},{"post_id":"cj4v0315b000g2tmwu4c7ylw0","category_id":"cj4v0314o00042tmwvjnyhvz1","_id":"cj4v0316d00362tmwxhzanqjv"},{"post_id":"cj4v0315b000g2tmwu4c7ylw0","category_id":"cj4v0315d000j2tmwvt80zki6","_id":"cj4v0316d00382tmwyggd8mqe"},{"post_id":"cj4v0314t00062tmwgcxo37xw","category_id":"cj4v0314o00042tmwvjnyhvz1","_id":"cj4v0316d003b2tmwymr7lq95"},{"post_id":"cj4v0314t00062tmwgcxo37xw","category_id":"cj4v0315d000j2tmwvt80zki6","_id":"cj4v0316d003d2tmw6y3uxeo6"},{"post_id":"cj4v0315d000i2tmwszur6bfa","category_id":"cj4v0314o00042tmwvjnyhvz1","_id":"cj4v0316e003g2tmw94gg9i0w"},{"post_id":"cj4v0315d000i2tmwszur6bfa","category_id":"cj4v0315d000j2tmwvt80zki6","_id":"cj4v0316e003i2tmw5ztdykfo"},{"post_id":"cj4v0315f000m2tmwrqqg8u4m","category_id":"cj4v0314o00042tmwvjnyhvz1","_id":"cj4v0316e003k2tmwc3k8p5ux"},{"post_id":"cj4v0315f000m2tmwrqqg8u4m","category_id":"cj4v0315p00112tmwwyx29k8c","_id":"cj4v0316f003n2tmw40452gtu"},{"post_id":"cj4v0315g000n2tmwmdeaf5jf","category_id":"cj4v0314o00042tmwvjnyhvz1","_id":"cj4v0316f003p2tmwbalixq8r"},{"post_id":"cj4v0315g000n2tmwmdeaf5jf","category_id":"cj4v0315p00112tmwwyx29k8c","_id":"cj4v0316f003r2tmwuxzesgob"},{"post_id":"cj4v0315i000q2tmwzcqgelzu","category_id":"cj4v0314o00042tmwvjnyhvz1","_id":"cj4v0316f003t2tmwyntojarz"},{"post_id":"cj4v0315i000q2tmwzcqgelzu","category_id":"cj4v0315p00112tmwwyx29k8c","_id":"cj4v0316g003w2tmw7iki74v3"},{"post_id":"cj4v0315k000s2tmwlk2t23un","category_id":"cj4v0314o00042tmwvjnyhvz1","_id":"cj4v0316h003y2tmwfuw2t1t9"},{"post_id":"cj4v0315k000s2tmwlk2t23un","category_id":"cj4v0315l000u2tmw1lwzt9ah","_id":"cj4v0316h00412tmwg3j7csnr"},{"post_id":"cj4v0315m000x2tmwdauuzn7o","category_id":"cj4v0314o00042tmwvjnyhvz1","_id":"cj4v0316h00432tmwptcfnd8d"},{"post_id":"cj4v0315m000x2tmwdauuzn7o","category_id":"cj4v0315p00112tmwwyx29k8c","_id":"cj4v0316h00452tmwxowtcggw"}],"PostTag":[{"post_id":"cj4v0314e00002tmw3yawras3","tag_id":"cj4v0314t00052tmwm1e1tnb7","_id":"cj4v0315c000h2tmw1m2n7lpl"},{"post_id":"cj4v0314e00002tmw3yawras3","tag_id":"cj4v03153000b2tmwhzyidpfe","_id":"cj4v0315e000k2tmwwlzkousp"},{"post_id":"cj4v0314l00022tmw1hsszj2h","tag_id":"cj4v0314t00052tmwm1e1tnb7","_id":"cj4v0315k000r2tmwewirf493"},{"post_id":"cj4v0314l00022tmw1hsszj2h","tag_id":"cj4v0315e000l2tmw9frkhqbg","_id":"cj4v0315l000v2tmwvhhenzkl"},{"post_id":"cj4v0314t00062tmwgcxo37xw","tag_id":"cj4v0314t00052tmwm1e1tnb7","_id":"cj4v0315s00152tmwjwe1gk4f"},{"post_id":"cj4v0314t00062tmwgcxo37xw","tag_id":"cj4v0315m000w2tmw11wg147w","_id":"cj4v0315u00182tmwvjhd20pb"},{"post_id":"cj4v0314y00082tmwlf5ymlj9","tag_id":"cj4v0314t00052tmwm1e1tnb7","_id":"cj4v0315v001d2tmw2aqcyi31"},{"post_id":"cj4v0314y00082tmwlf5ymlj9","tag_id":"cj4v0315q00122tmwus1s64vl","_id":"cj4v0315w001h2tmw7lph2nw9"},{"post_id":"cj4v0315200092tmwjy3qn052","tag_id":"cj4v0314t00052tmwm1e1tnb7","_id":"cj4v0315z001m2tmw9mqam6gi"},{"post_id":"cj4v0315200092tmwjy3qn052","tag_id":"cj4v0315v001b2tmwa5prujdg","_id":"cj4v03162001q2tmwubxq2kkv"},{"post_id":"cj4v03156000c2tmwoim5ffnm","tag_id":"cj4v0314t00052tmwm1e1tnb7","_id":"cj4v03163001u2tmw2f78k742"},{"post_id":"cj4v03156000c2tmwoim5ffnm","tag_id":"cj4v0315x001k2tmwzowizvte","_id":"cj4v03163001x2tmwv3lbyz1n"},{"post_id":"cj4v03157000d2tmwoa4js7p0","tag_id":"cj4v0314t00052tmwm1e1tnb7","_id":"cj4v0316400202tmw4642xeuh"},{"post_id":"cj4v03157000d2tmwoa4js7p0","tag_id":"cj4v03162001s2tmw9dfrxhw2","_id":"cj4v0316500232tmw4gxh36ea"},{"post_id":"cj4v0315b000g2tmwu4c7ylw0","tag_id":"cj4v0314t00052tmwm1e1tnb7","_id":"cj4v0316600272tmw9r7bgvfh"},{"post_id":"cj4v0315b000g2tmwu4c7ylw0","tag_id":"cj4v03163001y2tmwirbkc8p3","_id":"cj4v0316600292tmw3d2b973e"},{"post_id":"cj4v0315d000i2tmwszur6bfa","tag_id":"cj4v0314t00052tmwm1e1tnb7","_id":"cj4v03168002d2tmwmb3fv3v1"},{"post_id":"cj4v0315d000i2tmwszur6bfa","tag_id":"cj4v0316500242tmw4a1v2jei","_id":"cj4v03168002f2tmw5hlcuvjm"},{"post_id":"cj4v0315f000m2tmwrqqg8u4m","tag_id":"cj4v0314t00052tmwm1e1tnb7","_id":"cj4v03169002k2tmwg40deo35"},{"post_id":"cj4v0315f000m2tmwrqqg8u4m","tag_id":"cj4v03167002b2tmw44d9l2l8","_id":"cj4v03169002m2tmwjv5oaep9"},{"post_id":"cj4v0315g000n2tmwmdeaf5jf","tag_id":"cj4v0314t00052tmwm1e1tnb7","_id":"cj4v0316b002q2tmwk2uqaqyp"},{"post_id":"cj4v0315g000n2tmwmdeaf5jf","tag_id":"cj4v03168002h2tmw33d45jxk","_id":"cj4v0316b002s2tmw9fgpahn2"},{"post_id":"cj4v0315i000q2tmwzcqgelzu","tag_id":"cj4v0314t00052tmwm1e1tnb7","_id":"cj4v0316c002w2tmwnoadmifp"},{"post_id":"cj4v0315i000q2tmwzcqgelzu","tag_id":"cj4v0316a002o2tmwkfojp22j","_id":"cj4v0316c002y2tmwznnso2i5"},{"post_id":"cj4v0315k000s2tmwlk2t23un","tag_id":"cj4v0314t00052tmwm1e1tnb7","_id":"cj4v0316d00312tmwz1qrvi3l"},{"post_id":"cj4v0315k000s2tmwlk2t23un","tag_id":"cj4v0316c002u2tmwqt9iu2qy","_id":"cj4v0316d00332tmw3wj1t8ig"},{"post_id":"cj4v0315m000x2tmwdauuzn7o","tag_id":"cj4v0314t00052tmwm1e1tnb7","_id":"cj4v0316d00372tmwx0k5sh7e"},{"post_id":"cj4v0315m000x2tmwdauuzn7o","tag_id":"cj4v0316d00302tmw7m1ozfzr","_id":"cj4v0316d00392tmw0fvwfrxp"},{"post_id":"cj4v0315m000z2tmwi8ukckjx","tag_id":"cj4v0314t00052tmwm1e1tnb7","_id":"cj4v0316d003c2tmwz8853jba"},{"post_id":"cj4v0315m000z2tmwi8ukckjx","tag_id":"cj4v0316d00352tmwyjkqv3d8","_id":"cj4v0316d003e2tmwd7bfgx16"},{"post_id":"cj4v0315q00132tmwwh6ub878","tag_id":"cj4v0314t00052tmwm1e1tnb7","_id":"cj4v0316e003h2tmwsdx6gizt"},{"post_id":"cj4v0315q00132tmwwh6ub878","tag_id":"cj4v0316d003a2tmwkc5csji4","_id":"cj4v0316e003j2tmw3ip6p5xf"},{"post_id":"cj4v0315t00162tmwjhvy28mt","tag_id":"cj4v0314t00052tmwm1e1tnb7","_id":"cj4v0316e003m2tmw63vb25hs"},{"post_id":"cj4v0315t00162tmwjhvy28mt","tag_id":"cj4v0316e003f2tmwl7qgousv","_id":"cj4v0316f003o2tmwkk5g8qg1"},{"post_id":"cj4v0315u001a2tmwj06rusxi","tag_id":"cj4v0314t00052tmwm1e1tnb7","_id":"cj4v0316f003s2tmw979kwx3n"},{"post_id":"cj4v0315u001a2tmwj06rusxi","tag_id":"cj4v0316e003l2tmwi02i5e65","_id":"cj4v0316f003u2tmwtc350k1o"},{"post_id":"cj4v0315w001e2tmwdbidtkms","tag_id":"cj4v0314t00052tmwm1e1tnb7","_id":"cj4v0316g003x2tmwjf5enwsh"},{"post_id":"cj4v0315w001e2tmwdbidtkms","tag_id":"cj4v0316f003q2tmwpjj3ji7q","_id":"cj4v0316h003z2tmw6v7qz11v"},{"post_id":"cj4v0315w001i2tmwjnmsn5kr","tag_id":"cj4v0314t00052tmwm1e1tnb7","_id":"cj4v0316h00422tmwcvgev4f2"},{"post_id":"cj4v0315w001i2tmwjnmsn5kr","tag_id":"cj4v0316g003v2tmw3ga91qth","_id":"cj4v0316h00442tmwxjrfi6qf"},{"post_id":"cj4v0315y001l2tmw8gkcjdjr","tag_id":"cj4v0314t00052tmwm1e1tnb7","_id":"cj4v0316h00472tmw97t005kl"},{"post_id":"cj4v0315y001l2tmw8gkcjdjr","tag_id":"cj4v0316h00402tmwm4w26kjt","_id":"cj4v0316i00482tmw62stdp6j"},{"post_id":"cj4v03160001p2tmwkcbdqzxc","tag_id":"cj4v0314t00052tmwm1e1tnb7","_id":"cj4v0316i00492tmw1494ea5q"},{"post_id":"cj4v03160001p2tmwkcbdqzxc","tag_id":"cj4v0316h00462tmwhhkn80g7","_id":"cj4v0316i004a2tmwzqbs7tgu"}],"Tag":[{"name":"javasctipt","_id":"cj4v0314t00052tmwm1e1tnb7"},{"name":"适配器模式","_id":"cj4v03153000b2tmwhzyidpfe"},{"name":"抽象工厂模式","_id":"cj4v0315e000l2tmw9frkhqbg"},{"name":"桥接模式","_id":"cj4v0315m000w2tmw11wg147w"},{"name":"组合模式","_id":"cj4v0315q00122tmwus1s64vl"},{"name":"建造者模式","_id":"cj4v0315v001b2tmwa5prujdg"},{"name":"命令模式","_id":"cj4v0315x001k2tmwzowizvte"},{"name":"外观模式","_id":"cj4v03162001s2tmw9dfrxhw2"},{"name":"装饰模式","_id":"cj4v03163001y2tmwirbkc8p3"},{"name":"享元模式","_id":"cj4v0316500242tmw4a1v2jei"},{"name":"解析器模式","_id":"cj4v03167002b2tmw44d9l2l8"},{"name":"迭代器","_id":"cj4v03168002h2tmw33d45jxk"},{"name":"中介模式","_id":"cj4v0316a002o2tmwkfojp22j"},{"name":"原型模式","_id":"cj4v0316c002u2tmwqt9iu2qy"},{"name":"观察者模式","_id":"cj4v0316d00302tmw7m1ozfzr"},{"name":"代理模式","_id":"cj4v0316d00352tmwyjkqv3d8"},{"name":"单例模式","_id":"cj4v0316d003a2tmwkc5csji4"},{"name":"简单工厂模式","_id":"cj4v0316e003f2tmwl7qgousv"},{"name":"状态模式","_id":"cj4v0316e003l2tmwi02i5e65"},{"name":"访问者模式","_id":"cj4v0316f003q2tmwpjj3ji7q"},{"name":"模板方法模式","_id":"cj4v0316g003v2tmw3ga91qth"},{"name":"责任链模式","_id":"cj4v0316h00402tmwm4w26kjt"},{"name":"策略模式","_id":"cj4v0316h00462tmwhhkn80g7"}]}}