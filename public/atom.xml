<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>biggs blog</title>
  <subtitle>javascript | Front-End developer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhangbihua.github.io/"/>
  <updated>2017-07-07T17:32:12.477Z</updated>
  <id>https://zhangbihua.github.io/</id>
  
  <author>
    <name>zhangbihua</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>适配器模式(Adapter)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/Adapter/"/>
    <id>https://zhangbihua.github.io/2017/05/05/Adapter/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-07T17:32:12.477Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<h3 id="适配器模式的定义"><a href="#适配器模式的定义" class="headerlink" title="适配器模式的定义"></a>适配器模式的定义</h3><ul>
<li>适配器模式：用于将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</li>
</ul>
<h3 id="适配器模式包含四个角色："><a href="#适配器模式包含四个角色：" class="headerlink" title="适配器模式包含四个角色："></a>适配器模式包含四个角色：</h3><ul>
<li>Target：目标抽象类-定义客户要用的特定领域的接口</li>
<li>Adapter：适配器类-作为一个转换器，对适配者和抽象目标类进行适配，它是适配器模式的核心</li>
<li>Adaptee：适配者类-定义了一个已经存在的接口，这个接口需要适配</li>
<li>Client：客户类-在客户类中针对目标抽象类（Target）进行编程，调用在目标抽象类中定义的业务方法</li>
</ul>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Target</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(type) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Target Class created!'</span>);</div><div class="line">        <span class="keyword">let</span> result = <span class="literal">undefined</span>;</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (type) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'adapter'</span>:</div><div class="line">                result = <span class="keyword">new</span> AdapterImpl();</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                result = <span class="literal">undefined</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    request() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Target.request invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Adapter Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    specificRequest() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Adapter.specificRequest invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdapterImpl</span> <span class="keyword">extends</span> <span class="title">Adapter</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>()</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'AdapterImpl Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    request() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'AdapterImpl.request invoked'</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.specificRequest();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Target(<span class="string">"adapter"</span>);</div><div class="line">f.request();</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">namespace AdapterPattern &#123;</div><div class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</div><div class="line">        public method(): <span class="keyword">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"`method` of Adaptee is being called"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> interface Target &#123;</div><div class="line">        call(): <span class="keyword">void</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="title">implements</span> <span class="title">Target</span> </span>&#123;</div><div class="line">        public call(): <span class="keyword">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"Adapter's `call` method is being called"</span>);</div><div class="line">            <span class="keyword">var</span> adaptee: Adaptee = <span class="keyword">new</span> Adaptee();</div><div class="line">            adaptee.method();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></li>
<li><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
      <category term="structural-patterns" scheme="https://zhangbihua.github.io/categories/design-pattern/structural-patterns/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="适配器模式" scheme="https://zhangbihua.github.io/tags/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>桥接模式(Bridge)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/Bridge/"/>
    <id>https://zhangbihua.github.io/2017/05/05/Bridge/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-07T17:23:58.909Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<h3 id="桥接模式的定义"><a href="#桥接模式的定义" class="headerlink" title="桥接模式的定义"></a>桥接模式的定义</h3><ul>
<li>桥接模式：模式将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体(Handle and Body)模式或接口(Interface)模式。</li>
</ul>
<h3 id="桥接模式包含四个角色："><a href="#桥接模式包含四个角色：" class="headerlink" title="桥接模式包含四个角色："></a>桥接模式包含四个角色：</h3><ul>
<li>Abstraction-抽象类中定义了一个实现类接口类型的对象并可以维护该对象；</li>
<li>RefinedAbstraction-扩充抽象类扩充由抽象类定义的接口，它实现了在抽象类中定义的抽象业务方法，在扩充抽象类中可以调用在实现类接口中定义的业务方法；</li>
<li>Implementor实现类接口定义了实现类的接口，实现类接口仅提供基本操作，而抽象类定义的接口可能会做更多更复杂的操作；</li>
<li>ConcreteImplementor具体实现类实现了实现类接口并且具体实现它，在不同的具体实现类中提供基本操作的不同实现，在程序运行时，具体实现类对象将替换其父类对象，提供给客户端具体的业务操作方法。</li>
</ul>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Abstraction</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Abstraction Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operation() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Abstraction.operation invoked'</span>);</div><div class="line">        <span class="keyword">this</span>.imp.operationImp();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefinedAbstraction</span> <span class="keyword">extends</span> <span class="title">Abstraction</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>()</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'RefinedAbstraction Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setImp(imp) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'RefinedAbstraction.setImp invoked'</span>);</div><div class="line">        <span class="keyword">this</span>.imp = imp</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Implementor</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Implementor Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operationImp() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Implementor.operationImp invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorA</span> <span class="keyword">extends</span> <span class="title">Implementor</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>()</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteImplementorA Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operationImp() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteImplementorA.operationImp invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorB</span> <span class="keyword">extends</span> <span class="title">Implementor</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>()</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteImplementorB Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operationImp() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteImplementorB.operationImp invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> abstraction = <span class="keyword">new</span> RefinedAbstraction();</div><div class="line">abstraction.setImp(<span class="keyword">new</span> ConcreteImplementorA());</div><div class="line">abstraction.operation();</div><div class="line">abstraction.setImp(<span class="keyword">new</span> ConcreteImplementorB());</div><div class="line">abstraction.operation();</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Abstraction</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Abstraction Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operation() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Abstraction.operation invoked'</span>);</div><div class="line">        <span class="keyword">this</span>.imp.operationImp();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefinedAbstraction</span> <span class="keyword">extends</span> <span class="title">Abstraction</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>()</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'RefinedAbstraction Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setImp(imp) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'RefinedAbstraction.setImp invoked'</span>);</div><div class="line">        <span class="keyword">this</span>.imp = imp</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Implementor</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Implementor Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operationImp() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Implementor.operationImp invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorA</span> <span class="keyword">extends</span> <span class="title">Implementor</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>()</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteImplementorA Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operationImp() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteImplementorA.operationImp invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorB</span> <span class="keyword">extends</span> <span class="title">Implementor</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>()</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteImplementorB Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operationImp() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteImplementorB.operationImp invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> abstraction = <span class="keyword">new</span> RefinedAbstraction();</div><div class="line">abstraction.setImp(<span class="keyword">new</span> ConcreteImplementorA());</div><div class="line">abstraction.operation();</div><div class="line">abstraction.setImp(<span class="keyword">new</span> ConcreteImplementorB());</div><div class="line">abstraction.operation();</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></li>
<li><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
      <category term="structural-patterns" scheme="https://zhangbihua.github.io/categories/design-pattern/structural-patterns/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="桥接模式" scheme="https://zhangbihua.github.io/tags/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>建造者模式(Builder)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/Builder/"/>
    <id>https://zhangbihua.github.io/2017/05/05/Builder/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-07T16:20:29.774Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<h3 id="建造者模式包含如下四个角色："><a href="#建造者模式包含如下四个角色：" class="headerlink" title="建造者模式包含如下四个角色："></a>建造者模式包含如下四个角色：</h3><ul>
<li>Builder-抽象建造者为创建一个产品对象的各个部件指定抽象接口；</li>
<li>ConcreteBuilder-具体建造者实现了抽象建造者接口，实现各个部件的构造和装配方法，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象；</li>
<li>Product-产品角色是被构建的复杂对象，包含多个组成部件；</li>
<li>Director-指挥者负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在关联关系，可以在其construct()建造方法中调用建造者对象的部件构造与装配方法，完成复杂对象的建造</li>
</ul>
<h3 id="建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个："><a href="#建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：" class="headerlink" title="建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个："></a>建造者模式的结构中引入了一个指挥者类，该类的作用主要有两个：</h3><ul>
<li>一方面它隔离了客户与生产过程；</li>
<li>另一方面它负责控制产品的生成过程。指挥者针对抽象建造者编程，客户端只需要知道具体建造者的类型，即可通过指挥者类调用建造者的相关方法，返回一个完整的产品对象。</li>
</ul>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Builder Class created!'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    buildPart(partName) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Builder.buildPart invoked!'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteBuilder Class created!'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    buildPart(partName) &#123;</div><div class="line">        <span class="keyword">super</span>.buildPart(partName);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteBuilder.buildPart invoked!'</span>);</div><div class="line">        <span class="keyword">this</span>.product = <span class="keyword">new</span> Product(partName);</div><div class="line">    &#125;</div><div class="line">    getResult() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteBuilder.getResult invoked!'</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.product;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(material) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Product class created"</span>);</div><div class="line">        <span class="keyword">this</span>.data = material</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">this</span>.structure = [<span class="string">'Prod1'</span>, <span class="string">'Prod2'</span>, <span class="string">'Prod3'</span>];</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Director class created"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    construct() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Director.Construct created"</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> prodName <span class="keyword">in</span> <span class="keyword">this</span>.structure) &#123;</div><div class="line">            <span class="keyword">let</span> builder = <span class="keyword">new</span> ConcreteBuilder();</div><div class="line">            builder.buildPart(<span class="keyword">this</span>.structure[prodName]);</div><div class="line">            builder.getResult();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> director = <span class="keyword">new</span> Director();</div><div class="line">director.construct();</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">namespace BuilderPattern &#123;</div><div class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBuilder</span> </span>&#123;</div><div class="line">        private name: string;</div><div class="line">        private age: number;</div><div class="line">        private phone: string;</div><div class="line">        private address: string;</div><div class="line"></div><div class="line">        <span class="keyword">constructor</span>(name: string) &#123;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        get Name() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">        &#125;</div><div class="line">        setAge(value: number): UserBuilder &#123;</div><div class="line">            <span class="keyword">this</span>.age = value;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        get Age() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.age;</div><div class="line">        &#125;</div><div class="line">        setPhone(value: string): UserBuilder &#123;</div><div class="line">            <span class="keyword">this</span>.phone = value;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        get Phone() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.phone;</div><div class="line">        &#125;</div><div class="line">        setAddress(value: string): UserBuilder &#123;</div><div class="line">            <span class="keyword">this</span>.address = value;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        get Address() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.address;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        build(): User &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">        private name: string;</div><div class="line">        private age: number;</div><div class="line">        private phone: string;</div><div class="line">        private address: string;</div><div class="line"></div><div class="line">        <span class="keyword">constructor</span>(builder: UserBuilder) &#123;</div><div class="line">            <span class="keyword">this</span>.name = builder.Name;</div><div class="line">            <span class="keyword">this</span>.age = builder.Age;</div><div class="line">            <span class="keyword">this</span>.phone = builder.Phone;</div><div class="line">            <span class="keyword">this</span>.address = builder.Address</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        get Name() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">        &#125;</div><div class="line">        get Age() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.age;</div><div class="line">        &#125;</div><div class="line">        get Phone() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.phone;</div><div class="line">        &#125;</div><div class="line">        get Address() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.address;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><p><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></p>
</li>
<li><p><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></p>
</li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
      <category term="creational-patterns" scheme="https://zhangbihua.github.io/categories/design-pattern/creational-patterns/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="建造者模式" scheme="https://zhangbihua.github.io/tags/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>组合模式(Composite)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/Composite/"/>
    <id>https://zhangbihua.github.io/2017/05/05/Composite/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-07T17:26:03.613Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Component Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operation() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Component.operation invoked'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    add(Component) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Component.add invoked'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    remove(Component) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Component.remove invoked'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    getChild(key) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Component.getChild invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name) &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Leaf Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operation() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Leaf.operation invoked'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name) &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.children = [];</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Composite Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operation() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Composite operation for: '</span> + <span class="keyword">this</span>.name)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> <span class="keyword">this</span>.children) &#123;</div><div class="line">            <span class="keyword">this</span>.children[i].operation();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    add(Component) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Composite.add invoked'</span>);</div><div class="line">        <span class="keyword">this</span>.children.push(Component);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    remove(Component) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Composite.remove invoked'</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> <span class="keyword">this</span>.children) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.children[i] === Component) &#123;</div><div class="line">                <span class="keyword">this</span>.children.splice(i, <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    getChild(key) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Composite.getChild invoked'</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.children[key];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> composite1 = <span class="keyword">new</span> Composite(<span class="string">'C1'</span>);</div><div class="line">composite1.add(<span class="keyword">new</span> Leaf(<span class="string">'L1'</span>));</div><div class="line">composite1.add(<span class="keyword">new</span> Leaf(<span class="string">'L2'</span>));</div><div class="line"><span class="keyword">var</span> composite2 = <span class="keyword">new</span> Composite(<span class="string">'C2'</span>);</div><div class="line">composite2.add(composite1);</div><div class="line">composite1.getChild(<span class="number">1</span>).operation();</div><div class="line">composite2.operation();</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">namespace CompositePattern &#123;</div><div class="line">    <span class="keyword">export</span> interface Component &#123;</div><div class="line">        operation(): <span class="keyword">void</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="title">implements</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">        private list: Component[];</div><div class="line">        private s: <span class="built_in">String</span>;</div><div class="line"></div><div class="line">        <span class="keyword">constructor</span>(s: String) &#123;</div><div class="line">            <span class="keyword">this</span>.list = [];</div><div class="line">            <span class="keyword">this</span>.s = s;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public operation(): <span class="keyword">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"`operation of `"</span>, <span class="keyword">this</span>.s)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.list.length; i += <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">this</span>.list[i].operation();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public add(c: Component): <span class="keyword">void</span> &#123;</div><div class="line">            <span class="keyword">this</span>.list.push(c);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public remove(i: number): <span class="keyword">void</span> &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.list.length &lt;= i) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"index out of bound!"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">this</span>.list.splice(i, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="title">implements</span> <span class="title">Component</span> </span>&#123;</div><div class="line">        private s: <span class="built_in">String</span>;</div><div class="line">        <span class="keyword">constructor</span>(s: String) &#123;</div><div class="line">            <span class="keyword">this</span>.s = s;</div><div class="line">        &#125;</div><div class="line">        public operation(): <span class="keyword">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"`operation` of Leaf"</span>, <span class="keyword">this</span>.s, <span class="string">" is called."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></li>
<li><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
      <category term="structural-patterns" scheme="https://zhangbihua.github.io/categories/design-pattern/structural-patterns/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="组合模式" scheme="https://zhangbihua.github.io/tags/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>抽象工厂模式(Abstract Factory)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/AbstractFactory/"/>
    <id>https://zhangbihua.github.io/2017/05/05/AbstractFactory/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-07T16:28:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<h3 id="抽象工厂模式的定义"><a href="#抽象工厂模式的定义" class="headerlink" title="抽象工厂模式的定义"></a>抽象工厂模式的定义</h3><ul>
<li>抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。</li>
<li>抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构</li>
</ul>
<h3 id="抽象工厂模式包含四个角色："><a href="#抽象工厂模式包含四个角色：" class="headerlink" title="抽象工厂模式包含四个角色："></a>抽象工厂模式包含四个角色：</h3><ul>
<li>ConcreteFactory-具体工厂实现了抽象工厂声明的生成抽象产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中；</li>
<li>AbstractProduct-抽象产品为每种产品声明接口，在抽象产品中定义了产品的抽象业务方法；</li>
<li>AbstractFactory-抽象工厂用于明生成抽象产品的方法；</li>
<li>Product-具体产品定义具体工厂生产的具体产品对象，实现抽象产品接口中定义的业务方法。</li>
</ul>
<h3 id="抽象工厂模式适用情况包括："><a href="#抽象工厂模式适用情况包括：" class="headerlink" title="抽象工厂模式适用情况包括："></a>抽象工厂模式适用情况包括：</h3><ul>
<li>一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节；</li>
<li>系统中有多于一个的产品族，而每次只使用其中某一产品族；</li>
<li>属于同一个产品族的产品将在一起使用；</li>
<li>系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。</li>
</ul>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"AbstractFactory class created"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    createProductA(product) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"AbstractFactory.createProductA created"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    createProductB(product) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"AbstractFactory.createProductB created"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory1</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcreteFactory1 class created"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    createProductA(product) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteFactory1 createProductA'</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA1();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    createProductB(product) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteFactory1 createProductB'</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB1();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory2</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcreteFactory2 class created"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    createProductA(product) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteFactory2 createProductA'</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA2();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    createProductB(product) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteFactory2 createProductB'</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB2();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractProductA</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'AbstractProductA class created'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractProductB</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'AbstractProductB class created'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA1</span> <span class="keyword">extends</span> <span class="title">AbstractProductA</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ProductA1 class created'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA2</span> <span class="keyword">extends</span> <span class="title">AbstractProductA</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ProductA2 class created'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB1</span> <span class="keyword">extends</span> <span class="title">AbstractProductB</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ProductB1 class created'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB2</span> <span class="keyword">extends</span> <span class="title">AbstractProductB</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ProductB2 class created'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> factory1 = <span class="keyword">new</span> ConcreteFactory1();</div><div class="line"><span class="keyword">var</span> productB1 = factory1.createProductB();</div><div class="line"><span class="keyword">var</span> productA1 = factory1.createProductA();</div><div class="line"></div><div class="line"><span class="keyword">var</span> factory2 = <span class="keyword">new</span> ConcreteFactory2();</div><div class="line"><span class="keyword">var</span> productA2 = factory2.createProductA();</div><div class="line"><span class="keyword">var</span> productB2 = factory2.createProductB();</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">namespace AbstractFactoryPattern &#123;</div><div class="line">    <span class="keyword">export</span> interface AbstractProductA &#123;</div><div class="line">        methodA(): string;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">export</span> interface AbstractProductB &#123;</div><div class="line">        methodB(): number;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> interface AbstractFactory &#123;</div><div class="line">        createProductA(param?: any) : AbstractProductA;</div><div class="line">        createProductB() : AbstractProductB;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductA1</span> <span class="title">implements</span> <span class="title">AbstractProductA</span> </span>&#123;</div><div class="line">        methodA = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"This is methodA of ProductA1"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductB1</span> <span class="title">implements</span> <span class="title">AbstractProductB</span> </span>&#123;</div><div class="line">        methodB = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductA2</span> <span class="title">implements</span> <span class="title">AbstractProductA</span> </span>&#123;</div><div class="line">        methodA = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"This is methodA of ProductA2"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductB2</span> <span class="title">implements</span> <span class="title">AbstractProductB</span> </span>&#123;</div><div class="line">        methodB = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory1</span> <span class="title">implements</span> <span class="title">AbstractFactory</span> </span>&#123;</div><div class="line">        createProductA(param?: any) : AbstractProductA &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductA1();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        createProductB(param?: any) : AbstractProductB &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductB1();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory2</span> <span class="title">implements</span> <span class="title">AbstractFactory</span> </span>&#123;</div><div class="line">        createProductA(param?: any) : AbstractProductA &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductA2();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        createProductB(param?: any) : AbstractProductB &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductB2();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Tester</span> </span>&#123;</div><div class="line">        private abstractProductA: AbstractProductA;</div><div class="line">        private abstractProductB: AbstractProductB;</div><div class="line"></div><div class="line">        <span class="keyword">constructor</span>(factory: AbstractFactory) &#123;</div><div class="line">            <span class="keyword">this</span>.abstractProductA = factory.createProductA();</div><div class="line">            <span class="keyword">this</span>.abstractProductB = factory.createProductB();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public test(): <span class="keyword">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.abstractProductA.methodA());</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.abstractProductB.methodB());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><p><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></p>
</li>
<li><p><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></p>
</li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
      <category term="creational-patterns" scheme="https://zhangbihua.github.io/categories/design-pattern/creational-patterns/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="抽象工厂模式" scheme="https://zhangbihua.github.io/tags/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>装饰模式(Decorator)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/Decorator/"/>
    <id>https://zhangbihua.github.io/2017/05/05/Decorator/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-07T17:33:19.017Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<h3 id="装饰模式的定义"><a href="#装饰模式的定义" class="headerlink" title="装饰模式的定义"></a>装饰模式的定义</h3><ul>
<li>装饰模式：装饰模式用于动态地给一个对象增加一些额外的职责，就增加对象功 能来说，装饰模式比生成子类实现更为灵活。它是一种对象结构型模 式。</li>
</ul>
<h3 id="装饰模式包含四个角色："><a href="#装饰模式包含四个角色：" class="headerlink" title="装饰模式包含四个角色："></a>装饰模式包含四个角色：</h3><ul>
<li>Component-抽象构件定义了对象的接口，可以给这些对 象动态增加职责（方法）；</li>
<li>ConcreteComponent-具体构件定义了具体的构件对象，实现了 在抽象构件中声明的方法，装饰器可以给它增加额外的职责（方法）；</li>
<li>Decorator-抽象装饰类是抽象构件类的子类，用于给具体构件增加职责，但是具 体职责在其子类中实现；</li>
<li>ConcreteDecorator-具体装饰类是抽象装饰类的子类，负责向构 件添加新的职责。</li>
</ul>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Component Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operation() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Component.operation invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteComponent Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operation() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteComponent.operation invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(component) &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.component = component;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Decorator Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operation() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Decorator.operation invoked'</span>);</div><div class="line">        <span class="keyword">this</span>.component.operation()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecoratorA</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(component, sign) &#123;</div><div class="line">        <span class="keyword">super</span>(component);</div><div class="line">        <span class="keyword">this</span>.addedState = sign;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteDecoratorA Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operation() &#123;</div><div class="line">        <span class="keyword">super</span>.operation();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteDecoratorA.operation invoked'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.addedState)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecoratorB</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(component, sign) &#123;</div><div class="line">        <span class="keyword">super</span>(component);</div><div class="line">        <span class="keyword">this</span>.addedState = sign;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteDecoratorB Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    operation() &#123;</div><div class="line">        <span class="keyword">super</span>.operation();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteDecoratorB.operation invoked'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.addedState + <span class="keyword">this</span>.addedState + <span class="keyword">this</span>.addedState + <span class="keyword">this</span>.addedState + <span class="keyword">this</span>.addedState);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    addedBehavior() &#123;</div><div class="line">        <span class="keyword">this</span>.operation();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteDecoratorB.operation invoked'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> component = <span class="keyword">new</span> ConcreteComponent();</div><div class="line"><span class="keyword">var</span> decoratorA = <span class="keyword">new</span> ConcreteDecoratorA(component, <span class="string">'decoratorA'</span>);</div><div class="line"><span class="keyword">var</span> decoratorB = <span class="keyword">new</span> ConcreteDecoratorB(component, <span class="string">'decoratorB'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'component: '</span>);</div><div class="line">component.operation();</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'decoratorA: '</span>);</div><div class="line">decoratorA.operation();</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'decoratorB: '</span>);</div><div class="line">decoratorB.addedBehavior();</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">namespace DecoratorPattern &#123;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> interface Component &#123;</div><div class="line">        operation(): <span class="keyword">void</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponent</span> <span class="title">implements</span> <span class="title">Component</span> </span>&#123;</div><div class="line">        private s: <span class="built_in">String</span>;</div><div class="line"></div><div class="line">        <span class="keyword">constructor</span>(s: String) &#123;</div><div class="line">            <span class="keyword">this</span>.s = s;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public operation(): <span class="keyword">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"`operation` of ConcreteComponent"</span>, <span class="keyword">this</span>.s, <span class="string">" is being called!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="title">implements</span> <span class="title">Component</span> </span>&#123;</div><div class="line">        private component: Component;</div><div class="line">        private id: <span class="built_in">Number</span>;</div><div class="line"></div><div class="line">        <span class="keyword">constructor</span>(id: Number, component: Component) &#123;</div><div class="line">            <span class="keyword">this</span>.id = id;</div><div class="line">            <span class="keyword">this</span>.component = component;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public get Id(): <span class="built_in">Number</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.id;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public operation(): <span class="keyword">void</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"`operation` of Decorator"</span>, <span class="keyword">this</span>.id, <span class="string">" is being called!"</span>);</div><div class="line">            <span class="keyword">this</span>.component.operation();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecorator</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</div><div class="line">        <span class="keyword">constructor</span>(id: Number, component: Component) &#123;</div><div class="line">            <span class="keyword">super</span>(id, component);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public operation(): <span class="keyword">void</span> &#123;</div><div class="line">            <span class="keyword">super</span>.operation();</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"`operation` of ConcreteDecorator"</span>, <span class="keyword">this</span>.Id, <span class="string">" is being called!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></li>
<li><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
      <category term="structural-patterns" scheme="https://zhangbihua.github.io/categories/design-pattern/structural-patterns/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="装饰模式" scheme="https://zhangbihua.github.io/tags/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>原型模式(Prototype)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/Prorotype/"/>
    <id>https://zhangbihua.github.io/2017/05/05/Prorotype/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-07T16:19:43.997Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(prototype) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Prototype Class created"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setFeature(key, val) &#123;</div><div class="line">        <span class="keyword">this</span>[key] = val</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    clone() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Prototype.clone invoked"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototype1</span> <span class="keyword">extends</span> <span class="title">Prototype</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcretePrototype1 created"</span>);</div><div class="line">        <span class="keyword">this</span>.feature = <span class="string">"feature 1"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    clone() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcretePrototype1.clone invoked'</span>);</div><div class="line">        <span class="keyword">let</span> clone = <span class="keyword">new</span> ConcretePrototype1();</div><div class="line">        <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        keys.forEach(<span class="function"><span class="params">k</span> =&gt;</span> clone.setFeature(k, <span class="keyword">this</span>[k]));</div><div class="line"></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcretePrototype1 cloned"</span>);</div><div class="line">        <span class="keyword">return</span> clone;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototype2</span> <span class="keyword">extends</span> <span class="title">Prototype</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcretePrototype2 created"</span>);</div><div class="line">        <span class="keyword">this</span>.feature = <span class="string">"feature 2"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    clone() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcretePrototype2.Clone function'</span>);</div><div class="line">        <span class="keyword">let</span> clone = <span class="keyword">new</span> ConcretePrototype2();</div><div class="line">        <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        keys.forEach(<span class="function"><span class="params">k</span> =&gt;</span> clone.setFeature(k, <span class="keyword">this</span>[k]));</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"ConcretePrototype2 cloned"</span>);</div><div class="line">        <span class="keyword">return</span> clone;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> proto1 = <span class="keyword">new</span> ConcretePrototype1();</div><div class="line">proto1.setFeature(<span class="string">'feature'</span>, <span class="string">"feature 11"</span>);</div><div class="line"><span class="keyword">var</span> clone1 = proto1.clone();</div><div class="line"><span class="built_in">console</span>.log(clone1.feature);</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> clone1);</div><div class="line"><span class="built_in">console</span>.log(clone1 === proto1);</div><div class="line"></div><div class="line"><span class="keyword">var</span> proto2 = <span class="keyword">new</span> ConcretePrototype2();</div><div class="line">proto2.setFeature(<span class="string">'feature'</span>, <span class="string">"feature 22"</span>);</div><div class="line"><span class="keyword">var</span> clone2 = proto2.clone();</div><div class="line"><span class="built_in">console</span>.log(clone2.feature);</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> clone2);</div><div class="line"><span class="built_in">console</span>.log(clone2 === proto2);</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">namespace PrototypePattern &#123;</div><div class="line">    <span class="keyword">export</span> interface Prototype &#123;</div><div class="line">        clone(): Prototype;</div><div class="line">        toString(): string;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Concrete1</span> <span class="title">implements</span> <span class="title">Prototype</span> </span>&#123;</div><div class="line"></div><div class="line">        clone() : Prototype &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Concrete1();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        toString(): string &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"This is Concrete1"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Concrete2</span> <span class="title">implements</span> <span class="title">Prototype</span> </span>&#123;</div><div class="line"></div><div class="line">        clone() : Prototype &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Concrete2();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        toString(): string &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"This is Concrete2"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Concrete3</span> <span class="title">implements</span> <span class="title">Prototype</span> </span>&#123;</div><div class="line"></div><div class="line">        clone() : Prototype &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Concrete3();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        toString(): string &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"This is Concrete3"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">        private prototypeMap: &#123; [s: string]: Prototype; &#125; = &#123;&#125;;</div><div class="line"></div><div class="line">        <span class="keyword">constructor</span>() &#123;</div><div class="line">            <span class="keyword">this</span>.prototypeMap[<span class="string">'c1'</span>] = <span class="keyword">new</span> Concrete1();</div><div class="line">            <span class="keyword">this</span>.prototypeMap[<span class="string">'c2'</span>] = <span class="keyword">new</span> Concrete2();</div><div class="line">            <span class="keyword">this</span>.prototypeMap[<span class="string">'c3'</span>] = <span class="keyword">new</span> Concrete3();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        createOne(s: string): Prototype &#123;</div><div class="line">            <span class="built_in">console</span>.log(s);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.prototypeMap[s].clone();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><p><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></p>
</li>
<li><p><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></p>
</li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
      <category term="creational-patterns" scheme="https://zhangbihua.github.io/categories/design-pattern/creational-patterns/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="原型模式" scheme="https://zhangbihua.github.io/tags/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>简单工厂模式(Factory)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/SimpleFactory/"/>
    <id>https://zhangbihua.github.io/2017/05/05/SimpleFactory/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-07T16:28:12.057Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<h3 id="简单工厂模式的定义"><a href="#简单工厂模式的定义" class="headerlink" title="简单工厂模式的定义"></a>简单工厂模式的定义</h3><ul>
<li>简单工厂模式：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。</li>
</ul>
<h3 id="简单工厂模式包含三个角色："><a href="#简单工厂模式包含三个角色：" class="headerlink" title="简单工厂模式包含三个角色："></a>简单工厂模式包含三个角色：</h3><ul>
<li>Factory-工厂角色负责实现创建所有实例的内部逻辑；</li>
<li>Product-抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口；</li>
<li>ConcreteProduct-具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。</li>
</ul>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Product Class created'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteProduct Class created'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Creator</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Creator Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    factoryMethod() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Creator.factoryMethod created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    anOperation() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Creator.anOperation created'</span>);</div><div class="line">        <span class="keyword">this</span>.product = <span class="keyword">this</span>.factoryMethod();</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.product <span class="keyword">instanceof</span> ConcreteProduct);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCreator</span> <span class="keyword">extends</span> <span class="title">Creator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteCreator Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    factoryMethod() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> factory = <span class="keyword">new</span> ConcreteCreator();</div><div class="line">factory.anOperation();</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">interface AbstractProduct &#123;</div><div class="line">    method(param?: any) : <span class="keyword">void</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProductA</span> <span class="title">implements</span> <span class="title">AbstractProduct</span> </span>&#123;</div><div class="line">    method = <span class="function">(<span class="params">param?: any</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Method of ConcreteProductA"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProductB</span> <span class="title">implements</span> <span class="title">AbstractProduct</span> </span>&#123;</div><div class="line">    method = <span class="function">(<span class="params">param?: any</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Method of ConcreteProductB"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductFactory</span> </span>&#123;</div><div class="line">    public <span class="keyword">static</span> createProduct(type: string) : AbstractProduct &#123;</div><div class="line">        <span class="keyword">if</span> (type === <span class="string">"A"</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProductA();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">"B"</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProductB();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><p><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></p>
</li>
<li><p><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></p>
</li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
      <category term="creational-patterns" scheme="https://zhangbihua.github.io/categories/design-pattern/creational-patterns/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="简单工厂模式" scheme="https://zhangbihua.github.io/tags/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单例模式(Singleton)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/Singleton/"/>
    <id>https://zhangbihua.github.io/2017/05/05/Singleton/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-07T16:30:58.641Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<h3 id="单例模式的定义"><a href="#单例模式的定义" class="headerlink" title="单例模式的定义"></a>单例模式的定义</h3><ul>
<li>某个类只能有一个实例；</li>
<li>它必须自行创建这个实例；</li>
<li>它必须自行向整个系统提供这个实例。</li>
</ul>
<h3 id="单例模式的实现过程中，需要注意如下三点："><a href="#单例模式的实现过程中，需要注意如下三点：" class="headerlink" title="单例模式的实现过程中，需要注意如下三点："></a>单例模式的实现过程中，需要注意如下三点：</h3><ul>
<li>单例类的构造函数为私有；</li>
<li>提供一个自身的静态私有成员变量；</li>
<li>提供一个公有的静态工厂方法。</li>
</ul>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(data) &#123;</div><div class="line">        <span class="keyword">if</span> (Singleton.prototype.Instance === <span class="literal">undefined</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.data = data;</div><div class="line">            Singleton.prototype.Instance = <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Singleton.prototype.Instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> ob1 = <span class="keyword">new</span> Singleton.getInstance();</div><div class="line"><span class="keyword">let</span> ob2 = <span class="keyword">new</span> Singleton(<span class="string">"two"</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(ob1 === ob2);</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">  private <span class="keyword">static</span> instance: Singleton;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>() &#123;&#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> get Instance() &#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.instance === <span class="literal">null</span> || <span class="keyword">this</span>.instance === <span class="literal">undefined</span>) &#123;</div><div class="line">          <span class="keyword">this</span>.instance = <span class="keyword">new</span> Singleton();</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.instance;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> ob1 = <span class="keyword">new</span> Singleton(<span class="string">"one"</span>);</div><div class="line"><span class="keyword">let</span> ob2 = <span class="keyword">new</span> Singleton(<span class="string">"two"</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(ob1 === ob2);</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><p><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></p>
</li>
<li><p><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></p>
</li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
      <category term="creational-patterns" scheme="https://zhangbihua.github.io/categories/design-pattern/creational-patterns/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="单例模式" scheme="https://zhangbihua.github.io/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
