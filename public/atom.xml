<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>biggs blog</title>
  <subtitle>javascript | Front-End developer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhangbihua.github.io/"/>
  <updated>2017-07-07T07:38:08.288Z</updated>
  <id>https://zhangbihua.github.io/</id>
  
  <author>
    <name>zhangbihua</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>工厂模式(Factory)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/Factory/"/>
    <id>https://zhangbihua.github.io/2017/05/05/Factory/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-07T07:38:08.288Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<h3 id="简单工厂模式的要点"><a href="#简单工厂模式的要点" class="headerlink" title="简单工厂模式的要点"></a>简单工厂模式的要点</h3><ul>
<li>简单工厂模式的要点在于：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。</li>
</ul>
<h3 id="简单工厂模式包含三个角色："><a href="#简单工厂模式包含三个角色：" class="headerlink" title="简单工厂模式包含三个角色："></a>简单工厂模式包含三个角色：</h3><ul>
<li>工厂角色负责实现创建所有实例的内部逻辑；</li>
<li>抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口；</li>
<li>具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。</li>
</ul>
<hr>
<h3 id="ES5实现"><a href="#ES5实现" class="headerlink" title="ES5实现"></a>ES5实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Factory</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.createEmployee = <span class="function"><span class="keyword">function</span> (<span class="params">type</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> employee;</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> (type === <span class="string">"fulltime"</span>) &#123;</div><div class="line">            employee = <span class="keyword">new</span> FullTime();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">"parttime"</span>) &#123;</div><div class="line">            employee = <span class="keyword">new</span> PartTime();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">"temporary"</span>) &#123;</div><div class="line">            employee = <span class="keyword">new</span> Temporary();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">"contractor"</span>) &#123;</div><div class="line">            employee = <span class="keyword">new</span> Contractor();</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        employee.type = type;</div><div class="line"> </div><div class="line">        employee.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            log.add(<span class="keyword">this</span>.type + <span class="string">": rate "</span> + <span class="keyword">this</span>.hourly + <span class="string">"/hour"</span>);</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> employee;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> FullTime = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.hourly = <span class="string">"$12"</span>;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> PartTime = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.hourly = <span class="string">"$11"</span>;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> Temporary = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.hourly = <span class="string">"$10"</span>;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> Contractor = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.hourly = <span class="string">"$15"</span>;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="comment">// log helper</span></div><div class="line"><span class="keyword">var</span> log = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> log = <span class="string">""</span>;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">add</span>: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123; log += msg + <span class="string">"\n"</span>; &#125;,</div><div class="line">        <span class="attr">show</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert(log); log = <span class="string">""</span>; &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> employees = [];</div><div class="line">    <span class="keyword">var</span> factory = <span class="keyword">new</span> Factory();</div><div class="line"> </div><div class="line">    employees.push(factory.createEmployee(<span class="string">"fulltime"</span>));</div><div class="line">    employees.push(factory.createEmployee(<span class="string">"parttime"</span>));</div><div class="line">    employees.push(factory.createEmployee(<span class="string">"temporary"</span>));</div><div class="line">    employees.push(factory.createEmployee(<span class="string">"contractor"</span>));</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = employees.length; i &lt; len; i++) &#123;</div><div class="line">        employees[i].say();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    log.show();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Product Class created'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteProduct Class created'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Creator</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Creator Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    factoryMethod() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Creator.factoryMethod created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    anOperation() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Creator.anOperation created'</span>);</div><div class="line">        <span class="keyword">this</span>.product = <span class="keyword">this</span>.factoryMethod();</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.product <span class="keyword">instanceof</span> ConcreteProduct);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCreator</span> <span class="keyword">extends</span> <span class="title">Creator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ConcreteCreator Class created'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    factoryMethod() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> factory = <span class="keyword">new</span> ConcreteCreator();</div><div class="line">factory.anOperation();</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">namespace FactoryMethodPattern &#123;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> interface AbstractProduct &#123;</div><div class="line">        method(param?: any) : <span class="keyword">void</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProductA</span> <span class="title">implements</span> <span class="title">AbstractProduct</span> </span>&#123;</div><div class="line">        method = <span class="function">(<span class="params">param?: any</span>) =&gt;</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"Method of ConcreteProductA"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProductB</span> <span class="title">implements</span> <span class="title">AbstractProduct</span> </span>&#123;</div><div class="line">        method = <span class="function">(<span class="params">param?: any</span>) =&gt;</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"Method of ConcreteProductB"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductFactory</span> </span>&#123;</div><div class="line">        public <span class="keyword">static</span> createProduct(type: string) : AbstractProduct &#123;</div><div class="line">            <span class="keyword">if</span> (type === <span class="string">"A"</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProductA();</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">"B"</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProductB();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></li>
<li><a href="http://www.dofactory.com/javascript/design-patterns" target="_blank" rel="external">JavaScript Design Patterns</a></li>
<li><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="工厂模式" scheme="https://zhangbihua.github.io/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单例模式(Singleton)-设计模式</title>
    <link href="https://zhangbihua.github.io/2017/05/05/Singleton/"/>
    <id>https://zhangbihua.github.io/2017/05/05/Singleton/</id>
    <published>2017-05-05T15:58:44.000Z</published>
    <updated>2017-07-07T07:37:57.382Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。<br>软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，<br>实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。</p>
</blockquote>
<h3 id="单例模式的要点有三个："><a href="#单例模式的要点有三个：" class="headerlink" title="单例模式的要点有三个："></a>单例模式的要点有三个：</h3><pre><code>- 一是某个类只能有一个实例；
- 二是它必须自行创建这个实例；
- 三是它必须自行向整个系统提供这个实例。
</code></pre><h3 id="在单例模式的实现过程中，需要注意如下三点："><a href="#在单例模式的实现过程中，需要注意如下三点：" class="headerlink" title="在单例模式的实现过程中，需要注意如下三点："></a>在单例模式的实现过程中，需要注意如下三点：</h3><pre><code>- 单例类的构造函数为私有；
- 提供一个自身的静态私有成员变量；
- 提供一个公有的静态工厂方法。
</code></pre><hr>
<h3 id="ES5实现"><a href="#ES5实现" class="headerlink" title="ES5实现"></a>ES5实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Singleton = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> instance;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createInstance</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> object = <span class="keyword">new</span> <span class="built_in">Object</span>(<span class="string">"I am the instance"</span>);</div><div class="line">        <span class="keyword">return</span> object;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">getInstance</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (!instance) &#123;</div><div class="line">                instance = createInstance();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> instance;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;)();</div><div class="line"> </div><div class="line"><span class="keyword">var</span> instance1 = Singleton.getInstance();</div><div class="line"><span class="keyword">var</span> instance2 = Singleton.getInstance();</div><div class="line"><span class="keyword">let</span> ob1 = <span class="keyword">new</span> Singleton.getInstance();</div><div class="line"><span class="keyword">let</span> ob2 = <span class="keyword">new</span> Singleton.getInstance();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(ob1 === ob2);</div></pre></td></tr></table></figure>
<hr>
<h3 id="ES6实现"><a href="#ES6实现" class="headerlink" title="ES6实现"></a>ES6实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(data) &#123;</div><div class="line">        <span class="keyword">if</span> (Singleton.prototype.Instance === <span class="literal">undefined</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.data = data;</div><div class="line">            Singleton.prototype.Instance = <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Singleton.prototype.Instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> ob1 = <span class="keyword">new</span> Singleton.getInstance();</div><div class="line"><span class="keyword">let</span> ob2 = <span class="keyword">new</span> Singleton(<span class="string">"two"</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(ob1 === ob2);</div></pre></td></tr></table></figure>
<hr>
<h3 id="Typescript实现"><a href="#Typescript实现" class="headerlink" title="Typescript实现"></a>Typescript实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">  private <span class="keyword">static</span> instance: Singleton;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>() &#123;&#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> get Instance() &#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.instance === <span class="literal">null</span> || <span class="keyword">this</span>.instance === <span class="literal">undefined</span>) &#123;</div><div class="line">          <span class="keyword">this</span>.instance = <span class="keyword">new</span> Singleton();</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.instance;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> ob1 = <span class="keyword">new</span> Singleton(<span class="string">"one"</span>);</div><div class="line"><span class="keyword">let</span> ob2 = <span class="keyword">new</span> Singleton(<span class="string">"two"</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(ob1 === ob2);</div></pre></td></tr></table></figure>
<hr>
<h2 id="参考以下内容"><a href="#参考以下内容" class="headerlink" title="参考以下内容:"></a>参考以下内容:</h2><ul>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">图说设计模式</a></li>
<li><a href="http://www.dofactory.com/javascript/design-patterns" target="_blank" rel="external">JavaScript Design Patterns</a></li>
<li><a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="external">ECMAScript2016-Design-Patterns</a></li>
<li><a href="https://github.com/torokmark/design_patterns_in_typescript" target="_blank" rel="external">Design Patterns in TypeScript</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;软件模式是将模式的一般概念应用于软件开发领域，即软件开发的 总体指导思路或参照样板。&lt;br&gt;软件模式并非仅限于设计模式，还包括 架构模式、分析模式和过程模式等，&lt;br&gt;实际上，在软件生存期的每一个阶段都存在着一些被认同的模式。&lt;/p&gt;
&lt;/bloc
    
    </summary>
    
      <category term="design-pattern" scheme="https://zhangbihua.github.io/categories/design-pattern/"/>
    
    
      <category term="javasctipt" scheme="https://zhangbihua.github.io/tags/javasctipt/"/>
    
      <category term="单例模式" scheme="https://zhangbihua.github.io/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
